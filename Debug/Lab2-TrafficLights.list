
Lab2-TrafficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006890  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  08006c1c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000424  20000078  08006c8c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000049c  08006c8c  0002049c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019e61  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003053  00000000  00000000  00039f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  0003cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019c8  00000000  00000000  0003ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023c1b  00000000  00000000  00040408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001824f  00000000  00000000  00064023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e5165  00000000  00000000  0007c272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001613d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c0c  00000000  00000000  00161428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080069b8 	.word	0x080069b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080069b8 	.word	0x080069b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000544:	f023 0218 	bic.w	r2, r3, #24
 8000548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4313      	orrs	r3, r2
 8000550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000584:	68fb      	ldr	r3, [r7, #12]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <abuzz_start>:
void abuzz_p_short();



void abuzz_start()
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
	TIM2->PSC 	= 42000-1;
 8000596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR   = 0xFFFF;
 80005a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1  = 0x0064;
 80005aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ae:	2264      	movs	r2, #100	; 0x64
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CNT   = 0x0000;
 80005b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <abuzz_stop>:



void abuzz_stop()
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	TIM2->PSC  = 0x0000;
 80005c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR  = 0xFFFF;
 80005d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 0x0000;
 80005da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005de:	2200      	movs	r2, #0
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <abuzz_p_long>:

void abuzz_p_long()
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	TIM2->ARR = 0x0F90;
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f4:	f44f 6279 	mov.w	r2, #3984	; 0xf90
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0x0000;
 80005fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <replace_newline_with_crlf>:
#define TRANSMIT_H

#include <string.h>
#include "main.h" // Include this header to access the UART_HandleTypeDef declaration

void replace_newline_with_crlf(const char* src, char* dest, size_t dest_size) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
    while (src[i] != '\0' && j < dest_size - 1) {
 8000620:	e026      	b.n	8000670 <replace_newline_with_crlf+0x64>
        if (src[i] == '\n') {
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b0a      	cmp	r3, #10
 800062c:	d113      	bne.n	8000656 <replace_newline_with_crlf+0x4a>
            dest[j++] = '\r';
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	613a      	str	r2, [r7, #16]
 8000634:	68ba      	ldr	r2, [r7, #8]
 8000636:	4413      	add	r3, r2
 8000638:	220d      	movs	r2, #13
 800063a:	701a      	strb	r2, [r3, #0]
            if (j < dest_size - 1) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b01      	subs	r3, #1
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	429a      	cmp	r2, r3
 8000644:	d211      	bcs.n	800066a <replace_newline_with_crlf+0x5e>
                dest[j++] = '\n';
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	613a      	str	r2, [r7, #16]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	220a      	movs	r2, #10
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e009      	b.n	800066a <replace_newline_with_crlf+0x5e>
            }
        } else {
            dest[j++] = src[i];
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	441a      	add	r2, r3
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	1c59      	adds	r1, r3, #1
 8000660:	6139      	str	r1, [r7, #16]
 8000662:	68b9      	ldr	r1, [r7, #8]
 8000664:	440b      	add	r3, r1
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	701a      	strb	r2, [r3, #0]
        }
        i++;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
    while (src[i] != '\0' && j < dest_size - 1) {
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <replace_newline_with_crlf+0x7a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	429a      	cmp	r2, r3
 8000684:	d3cd      	bcc.n	8000622 <replace_newline_with_crlf+0x16>
    }
    dest[j] = '\0';
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	4413      	add	r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	371c      	adds	r7, #28
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <Transmit>:

void Transmit(UART_HandleTypeDef *huart, const char* text) {
 800069c:	b580      	push	{r7, lr}
 800069e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006a8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80006ac:	6018      	str	r0, [r3, #0]
 80006ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006b2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80006b6:	6019      	str	r1, [r3, #0]
    // Replace newline with carriage return + newline for proper UART formatting
    char formatted_str[512] = { '\0' };
 80006b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	3304      	adds	r3, #4
 80006c6:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 f801 	bl	80056d4 <memset>
    replace_newline_with_crlf(text, formatted_str, sizeof(formatted_str));
 80006d2:	f107 010c 	add.w	r1, r7, #12
 80006d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006da:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80006de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	f7ff ff92 	bl	800060c <replace_newline_with_crlf>

    uint16_t str_len = strlen(formatted_str);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd47 	bl	8000180 <strlen>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
    HAL_UART_Transmit(huart, (uint8_t*) formatted_str, str_len, HAL_MAX_DELAY);
 80006f8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000704:	f5a3 7003 	sub.w	r0, r3, #524	; 0x20c
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	6800      	ldr	r0, [r0, #0]
 800070e:	f004 f9a9 	bl	8004a64 <HAL_UART_Transmit>
}
 8000712:	bf00      	nop
 8000714:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <evq_init>:
enum event evq[ EVQ_SIZE ];
int evq_count = 0;
int evq_front_ix = 0;
int evq_rear_ix = 0;

void evq_init(){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	for(int i = 0; i < EVQ_SIZE; i++)
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	e007      	b.n	8000738 <evq_init+0x1c>
		evq[i] = ev_error;
 8000728:	4a08      	ldr	r2, [pc, #32]	; (800074c <evq_init+0x30>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	229d      	movs	r2, #157	; 0x9d
 8000730:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EVQ_SIZE; i++)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b09      	cmp	r3, #9
 800073c:	ddf4      	ble.n	8000728 <evq_init+0xc>
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	2000046c 	.word	0x2000046c

08000750 <evq_is_full>:

bool evq_is_full(){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	return evq_count == EVQ_SIZE;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <evq_is_full+0x1c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b0a      	cmp	r3, #10
 800075a:	bf0c      	ite	eq
 800075c:	2301      	moveq	r3, #1
 800075e:	2300      	movne	r3, #0
 8000760:	b2db      	uxtb	r3, r3
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000478 	.word	0x20000478

08000770 <evq_is_empty>:

bool evq_is_empty(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	return evq_count == 0;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <evq_is_empty+0x1c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf0c      	ite	eq
 800077c:	2301      	moveq	r3, #1
 800077e:	2300      	movne	r3, #0
 8000780:	b2db      	uxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000478 	.word	0x20000478

08000790 <evq_push_back>:

void evq_push_back(enum event e){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	if (!evq_is_full()) {
 800079a:	f7ff ffd9 	bl	8000750 <evq_is_full>
 800079e:	4603      	mov	r3, r0
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d01a      	beq.n	80007e0 <evq_push_back+0x50>
		evq[evq_rear_ix] = e;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <evq_push_back+0x60>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4911      	ldr	r1, [pc, #68]	; (80007f4 <evq_push_back+0x64>)
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	54ca      	strb	r2, [r1, r3]
		evq_rear_ix = (evq_rear_ix + 1) % EVQ_SIZE;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <evq_push_back+0x60>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c59      	adds	r1, r3, #1
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <evq_push_back+0x68>)
 80007bc:	fb83 2301 	smull	r2, r3, r3, r1
 80007c0:	109a      	asrs	r2, r3, #2
 80007c2:	17cb      	asrs	r3, r1, #31
 80007c4:	1ad2      	subs	r2, r2, r3
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1aca      	subs	r2, r1, r3
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <evq_push_back+0x60>)
 80007d2:	601a      	str	r2, [r3, #0]
		evq_count++;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <evq_push_back+0x6c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <evq_push_back+0x6c>)
 80007dc:	6013      	str	r3, [r2, #0]
	} else {
		printf("Queue full");
	}
}
 80007de:	e002      	b.n	80007e6 <evq_push_back+0x56>
		printf("Queue full");
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <evq_push_back+0x70>)
 80007e2:	f004 ff7f 	bl	80056e4 <iprintf>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000480 	.word	0x20000480
 80007f4:	2000046c 	.word	0x2000046c
 80007f8:	66666667 	.word	0x66666667
 80007fc:	20000478 	.word	0x20000478
 8000800:	080069d0 	.word	0x080069d0

08000804 <evq_pop_front>:

enum event evq_pop_front(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	if (!evq_is_empty()) {
 800080a:	f7ff ffb1 	bl	8000770 <evq_is_empty>
 800080e:	4603      	mov	r3, r0
 8000810:	f083 0301 	eor.w	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d021      	beq.n	800085e <evq_pop_front+0x5a>
		enum event e = evq[evq_front_ix];
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <evq_pop_front+0x64>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <evq_pop_front+0x68>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	71fb      	strb	r3, [r7, #7]
		evq[evq_front_ix] = ev_error;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <evq_pop_front+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a10      	ldr	r2, [pc, #64]	; (800086c <evq_pop_front+0x68>)
 800082a:	219d      	movs	r1, #157	; 0x9d
 800082c:	54d1      	strb	r1, [r2, r3]
		evq_front_ix = (evq_front_ix + 1) % EVQ_SIZE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <evq_pop_front+0x64>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1c59      	adds	r1, r3, #1
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <evq_pop_front+0x6c>)
 8000836:	fb83 2301 	smull	r2, r3, r3, r1
 800083a:	109a      	asrs	r2, r3, #2
 800083c:	17cb      	asrs	r3, r1, #31
 800083e:	1ad2      	subs	r2, r2, r3
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1aca      	subs	r2, r1, r3
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <evq_pop_front+0x64>)
 800084c:	601a      	str	r2, [r3, #0]
		evq_count--;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <evq_pop_front+0x70>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <evq_pop_front+0x70>)
 8000856:	6013      	str	r3, [r2, #0]
		return e;
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	e000      	b.n	8000860 <evq_pop_front+0x5c>
	} else {
		return ev_none;
 800085e:	2300      	movs	r3, #0
	}
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000047c 	.word	0x2000047c
 800086c:	2000046c 	.word	0x2000046c
 8000870:	66666667 	.word	0x66666667
 8000874:	20000478 	.word	0x20000478

08000878 <reset_traffic_lights>:

void reset_traffic_lights(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <reset_traffic_lights+0x3c>)
 8000882:	f001 f9f3 	bl	8001c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2102      	movs	r1, #2
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <reset_traffic_lights+0x3c>)
 800088c:	f001 f9ee 	bl	8001c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2104      	movs	r1, #4
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <reset_traffic_lights+0x3c>)
 8000896:	f001 f9e9 	bl	8001c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <reset_traffic_lights+0x3c>)
 80008a0:	f001 f9e4 	bl	8001c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <reset_traffic_lights+0x3c>)
 80008aa:	f001 f9df 	bl	8001c6c <HAL_GPIO_WritePin>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	48000800 	.word	0x48000800

080008b8 <set_traffic_lights>:

void set_traffic_lights(enum traffic_light_state state) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	3b06      	subs	r3, #6
 80008c6:	2b19      	cmp	r3, #25
 80008c8:	f200 80ac 	bhi.w	8000a24 <set_traffic_lights+0x16c>
 80008cc:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <set_traffic_lights+0x1c>)
 80008ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d2:	bf00      	nop
 80008d4:	080009c7 	.word	0x080009c7
 80008d8:	08000a25 	.word	0x08000a25
 80008dc:	08000a25 	.word	0x08000a25
 80008e0:	08000a25 	.word	0x08000a25
 80008e4:	08000987 	.word	0x08000987
 80008e8:	08000a25 	.word	0x08000a25
 80008ec:	08000a25 	.word	0x08000a25
 80008f0:	08000a25 	.word	0x08000a25
 80008f4:	08000a25 	.word	0x08000a25
 80008f8:	08000a25 	.word	0x08000a25
 80008fc:	08000a25 	.word	0x08000a25
 8000900:	080009a7 	.word	0x080009a7
 8000904:	0800093d 	.word	0x0800093d
 8000908:	08000a25 	.word	0x08000a25
 800090c:	08000a25 	.word	0x08000a25
 8000910:	08000a25 	.word	0x08000a25
 8000914:	08000a25 	.word	0x08000a25
 8000918:	08000a25 	.word	0x08000a25
 800091c:	08000a25 	.word	0x08000a25
 8000920:	08000a25 	.word	0x08000a25
 8000924:	0800095d 	.word	0x0800095d
 8000928:	08000a25 	.word	0x08000a25
 800092c:	08000a25 	.word	0x08000a25
 8000930:	08000a25 	.word	0x08000a25
 8000934:	08000a25 	.word	0x08000a25
 8000938:	080009e7 	.word	0x080009e7
		case s_CarsRed_PedestrianRed:
			reset_traffic_lights();
 800093c:	f7ff ff9c 	bl	8000878 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianRed;
 8000940:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <set_traffic_lights+0x174>)
 8000942:	2212      	movs	r2, #18
 8000944:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2101      	movs	r1, #1
 800094a:	4839      	ldr	r0, [pc, #228]	; (8000a30 <set_traffic_lights+0x178>)
 800094c:	f001 f98e 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2108      	movs	r1, #8
 8000954:	4836      	ldr	r0, [pc, #216]	; (8000a30 <set_traffic_lights+0x178>)
 8000956:	f001 f989 	bl	8001c6c <HAL_GPIO_WritePin>
			break;
 800095a:	e063      	b.n	8000a24 <set_traffic_lights+0x16c>
		case s_CarsRedYellow_PedestrianRed:
			reset_traffic_lights();
 800095c:	f7ff ff8c 	bl	8000878 <reset_traffic_lights>
			currentState = s_CarsRedYellow_PedestrianRed;
 8000960:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <set_traffic_lights+0x174>)
 8000962:	221a      	movs	r2, #26
 8000964:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2101      	movs	r1, #1
 800096a:	4831      	ldr	r0, [pc, #196]	; (8000a30 <set_traffic_lights+0x178>)
 800096c:	f001 f97e 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2102      	movs	r1, #2
 8000974:	482e      	ldr	r0, [pc, #184]	; (8000a30 <set_traffic_lights+0x178>)
 8000976:	f001 f979 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2108      	movs	r1, #8
 800097e:	482c      	ldr	r0, [pc, #176]	; (8000a30 <set_traffic_lights+0x178>)
 8000980:	f001 f974 	bl	8001c6c <HAL_GPIO_WritePin>
			break;
 8000984:	e04e      	b.n	8000a24 <set_traffic_lights+0x16c>
		case s_CarsYellow_PedestrianRed:
			reset_traffic_lights();
 8000986:	f7ff ff77 	bl	8000878 <reset_traffic_lights>
			currentState = s_CarsYellow_PedestrianRed;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <set_traffic_lights+0x174>)
 800098c:	220a      	movs	r2, #10
 800098e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4826      	ldr	r0, [pc, #152]	; (8000a30 <set_traffic_lights+0x178>)
 8000996:	f001 f969 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2108      	movs	r1, #8
 800099e:	4824      	ldr	r0, [pc, #144]	; (8000a30 <set_traffic_lights+0x178>)
 80009a0:	f001 f964 	bl	8001c6c <HAL_GPIO_WritePin>
			break;
 80009a4:	e03e      	b.n	8000a24 <set_traffic_lights+0x16c>
		case s_CarsRed_PedestrianGreen:
			reset_traffic_lights();
 80009a6:	f7ff ff67 	bl	8000878 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianGreen;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <set_traffic_lights+0x174>)
 80009ac:	2211      	movs	r2, #17
 80009ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2101      	movs	r1, #1
 80009b4:	481e      	ldr	r0, [pc, #120]	; (8000a30 <set_traffic_lights+0x178>)
 80009b6:	f001 f959 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2120      	movs	r1, #32
 80009be:	481c      	ldr	r0, [pc, #112]	; (8000a30 <set_traffic_lights+0x178>)
 80009c0:	f001 f954 	bl	8001c6c <HAL_GPIO_WritePin>
			break;
 80009c4:	e02e      	b.n	8000a24 <set_traffic_lights+0x16c>
		case s_CarsGreen_PedestrianRed:
			reset_traffic_lights();
 80009c6:	f7ff ff57 	bl	8000878 <reset_traffic_lights>
			currentState = s_CarsGreen_PedestrianRed;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <set_traffic_lights+0x174>)
 80009cc:	2206      	movs	r2, #6
 80009ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2104      	movs	r1, #4
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <set_traffic_lights+0x178>)
 80009d6:	f001 f949 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <set_traffic_lights+0x178>)
 80009e0:	f001 f944 	bl	8001c6c <HAL_GPIO_WritePin>
			break;
 80009e4:	e01e      	b.n	8000a24 <set_traffic_lights+0x16c>
		case s_init:
			reset_traffic_lights();
 80009e6:	f7ff ff47 	bl	8000878 <reset_traffic_lights>
			currentState = s_init;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <set_traffic_lights+0x174>)
 80009ec:	221f      	movs	r2, #31
 80009ee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2101      	movs	r1, #1
 80009f4:	480e      	ldr	r0, [pc, #56]	; (8000a30 <set_traffic_lights+0x178>)
 80009f6:	f001 f939 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2102      	movs	r1, #2
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <set_traffic_lights+0x178>)
 8000a00:	f001 f934 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2104      	movs	r1, #4
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <set_traffic_lights+0x178>)
 8000a0a:	f001 f92f 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2108      	movs	r1, #8
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <set_traffic_lights+0x178>)
 8000a14:	f001 f92a 	bl	8001c6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <set_traffic_lights+0x178>)
 8000a1e:	f001 f925 	bl	8001c6c <HAL_GPIO_WritePin>
			break;
 8000a22:	bf00      	nop
	}
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000468 	.word	0x20000468
 8000a30:	48000800 	.word	0x48000800

08000a34 <buzz>:

void buzz(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f001 f914 	bl	8001c6c <HAL_GPIO_WritePin>
	abuzz_start();
 8000a44:	f7ff fda5 	bl	8000592 <abuzz_start>
	HAL_Delay(500);
 8000a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4c:	f000 fe96 	bl	800177c <HAL_Delay>
	abuzz_p_long();
 8000a50:	f7ff fdcc 	bl	80005ec <abuzz_p_long>
	HAL_Delay(500);
 8000a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a58:	f000 fe90 	bl	800177c <HAL_Delay>
	abuzz_stop();
 8000a5c:	f7ff fdb2 	bl	80005c4 <abuzz_stop>
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f001 f900 	bl	8001c6c <HAL_GPIO_WritePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <toggleIndicator>:

void toggleIndicator(){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(INDIC_GPIO_Port, INDIC_Pin);
 8000a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <toggleIndicator+0x18>)
 8000a7a:	f001 f90f 	bl	8001c9c <HAL_GPIO_TogglePin>
	buzz();
 8000a7e:	f7ff ffd9 	bl	8000a34 <buzz>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	48000400 	.word	0x48000400

08000a8c <test_circular_queue>:

void test_circular_queue() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
    Transmit(&huart1, "Initialized queue:\n");
 8000a92:	4947      	ldr	r1, [pc, #284]	; (8000bb0 <test_circular_queue+0x124>)
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <test_circular_queue+0x128>)
 8000a96:	f7ff fe01 	bl	800069c <Transmit>
    evq_init();
 8000a9a:	f7ff fe3f 	bl	800071c <evq_init>
    Transmit(&huart1, "<print_evq>");
 8000a9e:	4946      	ldr	r1, [pc, #280]	; (8000bb8 <test_circular_queue+0x12c>)
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <test_circular_queue+0x128>)
 8000aa2:	f7ff fdfb 	bl	800069c <Transmit>

    Transmit(&huart1, "Pushing events 1 to 5:\n");
 8000aa6:	4945      	ldr	r1, [pc, #276]	; (8000bbc <test_circular_queue+0x130>)
 8000aa8:	4842      	ldr	r0, [pc, #264]	; (8000bb4 <test_circular_queue+0x128>)
 8000aaa:	f7ff fdf7 	bl	800069c <Transmit>
    for (int i = 1; i <= 5; i++) {
 8000aae:	2301      	movs	r3, #1
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ab2:	e007      	b.n	8000ac4 <test_circular_queue+0x38>
        evq_push_back(i);
 8000ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe69 	bl	8000790 <evq_push_back>
    for (int i = 1; i <= 5; i++) {
 8000abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac6:	2b05      	cmp	r3, #5
 8000ac8:	ddf4      	ble.n	8000ab4 <test_circular_queue+0x28>
    }
    Transmit(&huart1, "<print_evq>");
 8000aca:	493b      	ldr	r1, [pc, #236]	; (8000bb8 <test_circular_queue+0x12c>)
 8000acc:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <test_circular_queue+0x128>)
 8000ace:	f7ff fde5 	bl	800069c <Transmit>

    Transmit(&huart1, "Popping 3 events:\n");
 8000ad2:	493b      	ldr	r1, [pc, #236]	; (8000bc0 <test_circular_queue+0x134>)
 8000ad4:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <test_circular_queue+0x128>)
 8000ad6:	f7ff fde1 	bl	800069c <Transmit>
    char buffer[32];
    for (int i = 0; i < 3; i++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ade:	e010      	b.n	8000b02 <test_circular_queue+0x76>
        sprintf(buffer, "Popped: %d\n", evq_pop_front());
 8000ae0:	f7ff fe90 	bl	8000804 <evq_pop_front>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4936      	ldr	r1, [pc, #216]	; (8000bc4 <test_circular_queue+0x138>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f004 fe11 	bl	8005714 <siprintf>
        Transmit(&huart1, buffer);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	482f      	ldr	r0, [pc, #188]	; (8000bb4 <test_circular_queue+0x128>)
 8000af8:	f7ff fdd0 	bl	800069c <Transmit>
    for (int i = 0; i < 3; i++) {
 8000afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afe:	3301      	adds	r3, #1
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
 8000b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	ddeb      	ble.n	8000ae0 <test_circular_queue+0x54>
    }
    Transmit(&huart1, "<print_evq>");
 8000b08:	492b      	ldr	r1, [pc, #172]	; (8000bb8 <test_circular_queue+0x12c>)
 8000b0a:	482a      	ldr	r0, [pc, #168]	; (8000bb4 <test_circular_queue+0x128>)
 8000b0c:	f7ff fdc6 	bl	800069c <Transmit>

    Transmit(&huart1, "Pushing events 6 to 10:\n");
 8000b10:	492d      	ldr	r1, [pc, #180]	; (8000bc8 <test_circular_queue+0x13c>)
 8000b12:	4828      	ldr	r0, [pc, #160]	; (8000bb4 <test_circular_queue+0x128>)
 8000b14:	f7ff fdc2 	bl	800069c <Transmit>
    for (int i = 6; i <= 10; i++) {
 8000b18:	2306      	movs	r3, #6
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b1c:	e007      	b.n	8000b2e <test_circular_queue+0xa2>
        evq_push_back(i);
 8000b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe34 	bl	8000790 <evq_push_back>
    for (int i = 6; i <= 10; i++) {
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b30:	2b0a      	cmp	r3, #10
 8000b32:	ddf4      	ble.n	8000b1e <test_circular_queue+0x92>
    }
    Transmit(&huart1, "<print_evq>");
 8000b34:	4920      	ldr	r1, [pc, #128]	; (8000bb8 <test_circular_queue+0x12c>)
 8000b36:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <test_circular_queue+0x128>)
 8000b38:	f7ff fdb0 	bl	800069c <Transmit>

    Transmit(&huart1, "Popping 5 events:\n");
 8000b3c:	4923      	ldr	r1, [pc, #140]	; (8000bcc <test_circular_queue+0x140>)
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <test_circular_queue+0x128>)
 8000b40:	f7ff fdac 	bl	800069c <Transmit>
    for (int i = 0; i < 5; i++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b48:	e010      	b.n	8000b6c <test_circular_queue+0xe0>
        sprintf(buffer, "Popped: %d\n", evq_pop_front());
 8000b4a:	f7ff fe5b 	bl	8000804 <evq_pop_front>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	491b      	ldr	r1, [pc, #108]	; (8000bc4 <test_circular_queue+0x138>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fddc 	bl	8005714 <siprintf>
        Transmit(&huart1, buffer);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <test_circular_queue+0x128>)
 8000b62:	f7ff fd9b 	bl	800069c <Transmit>
    for (int i = 0; i < 5; i++) {
 8000b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b68:	3301      	adds	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	ddeb      	ble.n	8000b4a <test_circular_queue+0xbe>
    }
    Transmit(&huart1, "<print_evq>");
 8000b72:	4911      	ldr	r1, [pc, #68]	; (8000bb8 <test_circular_queue+0x12c>)
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <test_circular_queue+0x128>)
 8000b76:	f7ff fd91 	bl	800069c <Transmit>

    Transmit(&huart1, "Pushing events 11 to 12:\n");
 8000b7a:	4915      	ldr	r1, [pc, #84]	; (8000bd0 <test_circular_queue+0x144>)
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <test_circular_queue+0x128>)
 8000b7e:	f7ff fd8d 	bl	800069c <Transmit>
    for (int i = 11; i <= 12; i++) {
 8000b82:	230b      	movs	r3, #11
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
 8000b86:	e007      	b.n	8000b98 <test_circular_queue+0x10c>
        evq_push_back(i);
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fdff 	bl	8000790 <evq_push_back>
    for (int i = 11; i <= 12; i++) {
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	3301      	adds	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	2b0c      	cmp	r3, #12
 8000b9c:	ddf4      	ble.n	8000b88 <test_circular_queue+0xfc>
    }
    Transmit(&huart1, "<print_evq>");
 8000b9e:	4906      	ldr	r1, [pc, #24]	; (8000bb8 <test_circular_queue+0x12c>)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <test_circular_queue+0x128>)
 8000ba2:	f7ff fd7b 	bl	800069c <Transmit>
}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	; 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	080069dc 	.word	0x080069dc
 8000bb4:	200000e0 	.word	0x200000e0
 8000bb8:	080069f0 	.word	0x080069f0
 8000bbc:	080069fc 	.word	0x080069fc
 8000bc0:	08006a14 	.word	0x08006a14
 8000bc4:	08006a28 	.word	0x08006a28
 8000bc8:	08006a34 	.word	0x08006a34
 8000bcc:	08006a50 	.word	0x08006a50
 8000bd0:	08006a64 	.word	0x08006a64

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  evq_init();
 8000bda:	f7ff fd9f 	bl	800071c <evq_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fd47 	bl	8001670 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f8c5 	bl	8000d70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000be6:	f000 f939 	bl	8000e5c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f000 fa3f 	bl	800106c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bee:	f000 f9c9 	bl	8000f84 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000bf2:	f000 fa13 	bl	800101c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000bf6:	f000 f94f 	bl	8000e98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4859      	ldr	r0, [pc, #356]	; (8000d64 <main+0x190>)
 8000bfe:	f003 f805 	bl	8003c0c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  test_circular_queue();
 8000c02:	f7ff ff43 	bl	8000a8c <test_circular_queue>
	set_traffic_lights(s_init);
 8000c06:	201f      	movs	r0, #31
 8000c08:	f7ff fe56 	bl	80008b8 <set_traffic_lights>
	enum event currentEvent;
	int ticks_left_in_state = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]

	while (1)
	{
	    uint32_t buttonPressed = GPIOB->IDR & BTN_Pin;
 8000c10:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <main+0x194>)
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	607b      	str	r3, [r7, #4]

	    if (buttonPressed && (currentState == s_init || currentState == s_CarsGreen_PedestrianRed))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d009      	beq.n	8000c34 <main+0x60>
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <main+0x198>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b1f      	cmp	r3, #31
 8000c26:	d003      	beq.n	8000c30 <main+0x5c>
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <main+0x198>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d101      	bne.n	8000c34 <main+0x60>
	        currentEvent = ev_button_push;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]

			if (ticks_left_in_state == 0){
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8086 	bne.w	8000d48 <main+0x174>
				switch (currentState){
 8000c3c:	4b4b      	ldr	r3, [pc, #300]	; (8000d6c <main+0x198>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3b06      	subs	r3, #6
 8000c42:	2b19      	cmp	r3, #25
 8000c44:	f200 8089 	bhi.w	8000d5a <main+0x186>
 8000c48:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <main+0x7c>)
 8000c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4e:	bf00      	nop
 8000c50:	08000cb9 	.word	0x08000cb9
 8000c54:	08000d5b 	.word	0x08000d5b
 8000c58:	08000d5b 	.word	0x08000d5b
 8000c5c:	08000d5b 	.word	0x08000d5b
 8000c60:	08000cdd 	.word	0x08000cdd
 8000c64:	08000d5b 	.word	0x08000d5b
 8000c68:	08000d5b 	.word	0x08000d5b
 8000c6c:	08000d5b 	.word	0x08000d5b
 8000c70:	08000d5b 	.word	0x08000d5b
 8000c74:	08000d5b 	.word	0x08000d5b
 8000c78:	08000d5b 	.word	0x08000d5b
 8000c7c:	08000d21 	.word	0x08000d21
 8000c80:	08000ce9 	.word	0x08000ce9
 8000c84:	08000d5b 	.word	0x08000d5b
 8000c88:	08000d5b 	.word	0x08000d5b
 8000c8c:	08000d5b 	.word	0x08000d5b
 8000c90:	08000d5b 	.word	0x08000d5b
 8000c94:	08000d5b 	.word	0x08000d5b
 8000c98:	08000d5b 	.word	0x08000d5b
 8000c9c:	08000d5b 	.word	0x08000d5b
 8000ca0:	08000d15 	.word	0x08000d15
 8000ca4:	08000d5b 	.word	0x08000d5b
 8000ca8:	08000d5b 	.word	0x08000d5b
 8000cac:	08000d5b 	.word	0x08000d5b
 8000cb0:	08000d5b 	.word	0x08000d5b
 8000cb4:	08000d31 	.word	0x08000d31
					case s_CarsGreen_PedestrianRed:
						if (currentEvent == ev_button_push){
 8000cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d147      	bne.n	8000d50 <main+0x17c>
							toggleIndicator();
 8000cc0:	f7ff fed6 	bl	8000a70 <toggleIndicator>
							HAL_Delay(2000);
 8000cc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cc8:	f000 fd58 	bl	800177c <HAL_Delay>
							set_traffic_lights(s_CarsYellow_PedestrianRed);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f7ff fdf3 	bl	80008b8 <set_traffic_lights>
							ticks_left_in_state = 25;
 8000cd2:	2319      	movs	r3, #25
 8000cd4:	60bb      	str	r3, [r7, #8]
							currentEvent = ev_none;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
						}
						break;
 8000cda:	e039      	b.n	8000d50 <main+0x17c>
					case s_CarsYellow_PedestrianRed:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 8000cdc:	2012      	movs	r0, #18
 8000cde:	f7ff fdeb 	bl	80008b8 <set_traffic_lights>
						ticks_left_in_state = 15;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60bb      	str	r3, [r7, #8]
						break;
 8000ce6:	e038      	b.n	8000d5a <main+0x186>
					case s_CarsRed_PedestrianRed:
						if(currentEvent == ev_none) {
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <main+0x128>
							set_traffic_lights(s_CarsRed_PedestrianGreen);
 8000cf0:	2011      	movs	r0, #17
 8000cf2:	f7ff fde1 	bl	80008b8 <set_traffic_lights>
							ticks_left_in_state = 50;
 8000cf6:	2332      	movs	r3, #50	; 0x32
 8000cf8:	60bb      	str	r3, [r7, #8]
						} else if (currentEvent == ev_return_state){
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
							toggleIndicator();
							ticks_left_in_state = 20;
						}
						break;
 8000cfa:	e02b      	b.n	8000d54 <main+0x180>
						} else if (currentEvent == ev_return_state){
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d127      	bne.n	8000d54 <main+0x180>
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
 8000d04:	201a      	movs	r0, #26
 8000d06:	f7ff fdd7 	bl	80008b8 <set_traffic_lights>
							toggleIndicator();
 8000d0a:	f7ff feb1 	bl	8000a70 <toggleIndicator>
							ticks_left_in_state = 20;
 8000d0e:	2314      	movs	r3, #20
 8000d10:	60bb      	str	r3, [r7, #8]
						break;
 8000d12:	e01f      	b.n	8000d54 <main+0x180>
					case s_CarsRedYellow_PedestrianRed:
						set_traffic_lights(s_CarsGreen_PedestrianRed);
 8000d14:	2006      	movs	r0, #6
 8000d16:	f7ff fdcf 	bl	80008b8 <set_traffic_lights>
						ticks_left_in_state = 15;
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	60bb      	str	r3, [r7, #8]
						break;
 8000d1e:	e01c      	b.n	8000d5a <main+0x186>
					case s_CarsRed_PedestrianGreen:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 8000d20:	2012      	movs	r0, #18
 8000d22:	f7ff fdc9 	bl	80008b8 <set_traffic_lights>
						ticks_left_in_state = 10;
 8000d26:	230a      	movs	r3, #10
 8000d28:	60bb      	str	r3, [r7, #8]
						currentEvent = ev_return_state;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	73fb      	strb	r3, [r7, #15]
						break;
 8000d2e:	e014      	b.n	8000d5a <main+0x186>
					case s_init:
						if (currentEvent == ev_button_push){
 8000d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10f      	bne.n	8000d58 <main+0x184>
							currentEvent = ev_none;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
							set_traffic_lights(s_CarsGreen_PedestrianRed);
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f7ff fdbb 	bl	80008b8 <set_traffic_lights>
							ticks_left_in_state = 20;
 8000d42:	2314      	movs	r3, #20
 8000d44:	60bb      	str	r3, [r7, #8]
						}
						break;
 8000d46:	e007      	b.n	8000d58 <main+0x184>
				}
			} else {
				ticks_left_in_state--;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	e004      	b.n	8000d5a <main+0x186>
						break;
 8000d50:	bf00      	nop
 8000d52:	e002      	b.n	8000d5a <main+0x186>
						break;
 8000d54:	bf00      	nop
 8000d56:	e000      	b.n	8000d5a <main+0x186>
						break;
 8000d58:	bf00      	nop
			}
			HAL_Delay(100);
 8000d5a:	2064      	movs	r0, #100	; 0x64
 8000d5c:	f000 fd0e 	bl	800177c <HAL_Delay>
	{
 8000d60:	e756      	b.n	8000c10 <main+0x3c>
 8000d62:	bf00      	nop
 8000d64:	20000094 	.word	0x20000094
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	20000468 	.word	0x20000468

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09a      	sub	sp, #104	; 0x68
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2248      	movs	r2, #72	; 0x48
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fca8 	bl	80056d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000da4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f023 0303 	bic.w	r3, r3, #3
 8000db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dba:	f001 f88d 	bl	8001ed8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fbb8 	bl	8000534 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <SystemClock_Config+0xe8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <SystemClock_Config+0xe8>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <SystemClock_Config+0xe8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000de0:	2327      	movs	r3, #39	; 0x27
 8000de2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fbf7 	bl	8002600 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e18:	f000 f9a4 	bl	8001164 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e1c:	236f      	movs	r3, #111	; 0x6f
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ff53 	bl	8002ce8 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000e48:	f000 f98c 	bl	8001164 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e4c:	f002 fd0e 	bl	800386c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e50:	bf00      	nop
 8000e52:	3768      	adds	r7, #104	; 0x68
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58000400 	.word	0x58000400

08000e5c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2250      	movs	r2, #80	; 0x50
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fc33 	bl	80056d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e72:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fb7e 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000e8a:	f000 f96b 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef2:	4823      	ldr	r0, [pc, #140]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000ef4:	f002 fdd1 	bl	8003a9a <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000efe:	f000 f931 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481c      	ldr	r0, [pc, #112]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000f10:	f003 f86a 	bl	8003fe8 <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f1a:	f000 f923 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000f20:	f002 fe12 	bl	8003b48 <HAL_TIM_PWM_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f2a:	f000 f91b 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4810      	ldr	r0, [pc, #64]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000f3e:	f003 fcc1 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f48:	f000 f90c 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000f64:	f002 ff2c 	bl	8003dc0 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f6e:	f000 f8f9 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <MX_TIM2_Init+0xe8>)
 8000f74:	f000 f95d 	bl	8001232 <HAL_TIM_MspPostInit>

}
 8000f78:	bf00      	nop
 8000f7a:	3738      	adds	r7, #56	; 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000094 	.word	0x20000094

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <MX_USART1_UART_Init+0x94>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fce:	f003 fcf9 	bl	80049c4 <HAL_UART_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fd8:	f000 f8c4 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000fe0:	f004 fa48 	bl	8005474 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fea:	f000 f8bb 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8000ff2:	f004 fa7d 	bl	80054f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f000 f8b2 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_USART1_UART_Init+0x90>)
 8001002:	f004 f9fe 	bl	8005402 <HAL_UARTEx_DisableFifoMode>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800100c:	f000 f8aa 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000e0 	.word	0x200000e0
 8001018:	40013800 	.word	0x40013800

0800101c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_USB_PCD_Init+0x48>)
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <MX_USB_PCD_Init+0x4c>)
 8001024:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USB_PCD_Init+0x48>)
 8001028:	2208      	movs	r2, #8
 800102a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_USB_PCD_Init+0x48>)
 800102e:	2202      	movs	r2, #2
 8001030:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USB_PCD_Init+0x48>)
 8001034:	2202      	movs	r2, #2
 8001036:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_USB_PCD_Init+0x48>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USB_PCD_Init+0x48>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_USB_PCD_Init+0x48>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USB_PCD_Init+0x48>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_USB_PCD_Init+0x48>)
 8001052:	f000 fe3d 	bl	8001cd0 <HAL_PCD_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800105c:	f000 f882 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000174 	.word	0x20000174
 8001068:	40006800 	.word	0x40006800

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	2004      	movs	r0, #4
 8001082:	f7ff fa6d 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fa6a 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff fa67 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	2008      	movs	r0, #8
 8001094:	f7ff fa64 	bl	8000560 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8001098:	2200      	movs	r2, #0
 800109a:	212f      	movs	r1, #47	; 0x2f
 800109c:	482e      	ldr	r0, [pc, #184]	; (8001158 <MX_GPIO_Init+0xec>)
 800109e:	f000 fde5 	bl	8001c6c <HAL_GPIO_WritePin>
                          |PED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f000 fddf 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INDIC_Pin|LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f640 0123 	movw	r1, #2083	; 0x823
 80010b4:	4829      	ldr	r0, [pc, #164]	; (800115c <MX_GPIO_Init+0xf0>)
 80010b6:	f000 fdd9 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CARS_RED_Pin CARS_YELLOW_Pin CARS_GREEN_Pin PED_RED_Pin
                           PED_GREEN_Pin */
  GPIO_InitStruct.Pin = CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 80010ba:	232f      	movs	r3, #47	; 0x2f
 80010bc:	607b      	str	r3, [r7, #4]
                          |PED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4822      	ldr	r0, [pc, #136]	; (8001158 <MX_GPIO_Init+0xec>)
 80010d0:	f000 fc5c 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 80010d4:	2340      	movs	r3, #64	; 0x40
 80010d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 fc4e 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f0:	2310      	movs	r3, #16
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <MX_GPIO_Init+0xec>)
 8001102:	f000 fc43 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001106:	2304      	movs	r3, #4
 8001108:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110e:	2302      	movs	r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_GPIO_Init+0xf0>)
 8001118:	f000 fc38 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : INDIC_Pin LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = INDIC_Pin|LD2_Pin|LD3_Pin|LD1_Pin;
 800111c:	f640 0323 	movw	r3, #2083	; 0x823
 8001120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <MX_GPIO_Init+0xf0>)
 8001134:	f000 fc2a 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001138:	2303      	movs	r3, #3
 800113a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_GPIO_Init+0xf4>)
 800114a:	f000 fc1f 	bl	800198c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	48000800 	.word	0x48000800
 800115c:	48000400 	.word	0x48000400
 8001160:	48000c00 	.word	0x48000c00

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>

0800116e <LL_AHB2_GRP1_EnableClock>:
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800117c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4313      	orrs	r3, r2
 8001184:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4013      	ands	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c4:	68fb      	ldr	r3, [r7, #12]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4013      	ands	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001222:	d102      	bne.n	800122a <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ffbb 	bl	80011a0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b088      	sub	sp, #32
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001252:	d113      	bne.n	800127c <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff ff8a 	bl	800116e <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800125a:	2301      	movs	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800126a:	2301      	movs	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f000 fb88 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b09c      	sub	sp, #112	; 0x70
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2250      	movs	r2, #80	; 0x50
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 fa15 	bl	80056d4 <memset>
  if(huart->Instance==USART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_UART_MspInit+0x84>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d124      	bne.n	80012fe <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f95d 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff ff4a 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d4:	f7ff ff7d 	bl	80011d2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff ff48 	bl	800116e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012de:	23c0      	movs	r3, #192	; 0xc0
 80012e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ee:	2307      	movs	r3, #7
 80012f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <HAL_UART_MspInit+0x88>)
 80012fa:	f000 fb47 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3770      	adds	r7, #112	; 0x70
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40013800 	.word	0x40013800
 800130c:	48000400 	.word	0x48000400

08001310 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b09c      	sub	sp, #112	; 0x70
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2250      	movs	r2, #80	; 0x50
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 f9cf 	bl	80056d4 <memset>
  if(hpcd->Instance==USB)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <HAL_PCD_MspInit+0xa8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d136      	bne.n	80013ae <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001346:	2318      	movs	r3, #24
 8001348:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001354:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001356:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800135a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800135c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001360:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4618      	mov	r0, r3
 800136e:	f002 f907 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001378:	f7ff fef4 	bl	8001164 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fef6 	bl	800116e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001382:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001386:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001394:	230a      	movs	r3, #10
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f000 faf3 	bl	800198c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80013aa:	f7ff fef9 	bl	80011a0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3770      	adds	r7, #112	; 0x70
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40006800 	.word	0x40006800

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f98c 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00a      	b.n	8001438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001422:	f3af 8000 	nop.w
 8001426:	4601      	mov	r1, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	b2ca      	uxtb	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf0      	blt.n	8001422 <_read+0x12>
  }

  return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e009      	b.n	8001470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf1      	blt.n	800145c <_write+0x12>
  }
  return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_close>:

int _close(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014aa:	605a      	str	r2, [r3, #4]
  return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f004 f8b0 	bl	8005680 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20030000 	.word	0x20030000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000484 	.word	0x20000484
 8001554:	200004a0 	.word	0x200004a0

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <SystemInit+0x98>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <SystemInit+0x98>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001584:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <SystemInit+0x9c>)
 8001592:	4013      	ands	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a2:	f023 0305 	bic.w	r3, r3, #5
 80015a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <SystemInit+0xa0>)
 80015c4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80015c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <SystemInit+0xa0>)
 80015cc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00
 80015f4:	faf6fefb 	.word	0xfaf6fefb
 80015f8:	22041000 	.word	0x22041000

080015fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001600:	3304      	adds	r3, #4

08001602 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001602:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001604:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001606:	d3f9      	bcc.n	80015fc <CopyDataInit>
  bx lr
 8001608:	4770      	bx	lr

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800160a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800160c:	3004      	adds	r0, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800160e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
  bx lr
 8001612:	4770      	bx	lr

08001614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001616:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001618:	f7ff ff9e 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <LoopForever+0x6>)
 800161e:	490c      	ldr	r1, [pc, #48]	; (8001650 <LoopForever+0xa>)
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <LoopForever+0xe>)
 8001622:	2300      	movs	r3, #0
 8001624:	f7ff ffed 	bl	8001602 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <LoopForever+0x12>)
 800162a:	490c      	ldr	r1, [pc, #48]	; (800165c <LoopForever+0x16>)
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <LoopForever+0x1a>)
 800162e:	2300      	movs	r3, #0
 8001630:	f7ff ffe7 	bl	8001602 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <LoopForever+0x1e>)
 8001636:	490c      	ldr	r1, [pc, #48]	; (8001668 <LoopForever+0x22>)
 8001638:	2300      	movs	r3, #0
 800163a:	f7ff ffe8 	bl	800160e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163e:	f004 f825 	bl	800568c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001642:	f7ff fac7 	bl	8000bd4 <main>

08001646 <LoopForever>:

LoopForever:
  b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   r0, =_estack
 8001648:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800164c:	20000008 	.word	0x20000008
 8001650:	20000078 	.word	0x20000078
 8001654:	08006c1c 	.word	0x08006c1c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001658:	20030000 	.word	0x20030000
 800165c:	20030000 	.word	0x20030000
 8001660:	08006c8c 	.word	0x08006c8c
  INIT_BSS _sbss, _ebss
 8001664:	20000078 	.word	0x20000078
 8001668:	2000049c 	.word	0x2000049c

0800166c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC1_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_Init+0x3c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_Init+0x3c>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001686:	2003      	movs	r0, #3
 8001688:	f000 f94e 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168c:	2000      	movs	r0, #0
 800168e:	f000 f80f 	bl	80016b0 <HAL_InitTick>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	e001      	b.n	80016a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800169e:	f7ff fdb1 	bl	8001204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a2:	79fb      	ldrb	r3, [r7, #7]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	58004000 	.word	0x58004000

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_InitTick+0x6c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d024      	beq.n	800170e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016c4:	f001 fcbc 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_InitTick+0x6c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f948 	bl	8001972 <HAL_SYSTICK_Config>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10f      	bne.n	8001708 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d809      	bhi.n	8001702 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ee:	2200      	movs	r2, #0
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	f04f 30ff 	mov.w	r0, #4294967295
 80016f6:	f000 f922 	bl	800193e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_InitTick+0x70>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e007      	b.n	8001712 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e004      	b.n	8001712 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e001      	b.n	8001712 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000010 	.word	0x20000010
 8001720:	2000000c 	.word	0x2000000c

08001724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000010 	.word	0x20000010
 8001748:	20000488 	.word	0x20000488

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000488 	.word	0x20000488

08001764 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTickPrio+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000000c 	.word	0x2000000c

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffe2 	bl	800174c <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffd2 	bl	800174c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000010 	.word	0x20000010

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff47 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff5e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffb2 	bl	80018e4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	e14c      	b.n	8001c36 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 813e 	beq.w	8001c30 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d005      	beq.n	80019cc <HAL_GPIO_Init+0x40>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d130      	bne.n	8001a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a02:	2201      	movs	r2, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 0201 	and.w	r2, r3, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d017      	beq.n	8001a6a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d123      	bne.n	8001abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	6939      	ldr	r1, [r7, #16]
 8001aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0203 	and.w	r2, r3, #3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8098 	beq.w	8001c30 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b00:	4a54      	ldr	r2, [pc, #336]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b2a:	d019      	beq.n	8001b60 <HAL_GPIO_Init+0x1d4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x1d0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1cc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2d4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1c8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a47      	ldr	r2, [pc, #284]	; (8001c64 <HAL_GPIO_Init+0x2d8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1c4>
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	e008      	b.n	8001b62 <HAL_GPIO_Init+0x1d6>
 8001b50:	2307      	movs	r3, #7
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1d6>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1d6>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1d6>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1d6>
 8001b60:	2300      	movs	r3, #0
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b72:	4938      	ldr	r1, [pc, #224]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ba4:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f aeab 	bne.w	800199c <HAL_GPIO_Init+0x10>
  }
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40010000 	.word	0x40010000
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	48000c00 	.word	0x48000c00
 8001c64:	48001000 	.word	0x48001000
 8001c68:	58000800 	.word	0x58000800

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	041a      	lsls	r2, r3, #16
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43d9      	mvns	r1, r3
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	b08b      	sub	sp, #44	; 0x2c
 8001cd4:	af06      	add	r7, sp, #24
 8001cd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0cb      	b.n	8001e7a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fb0a 	bl	8001310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fc7d 	bl	8005608 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e040      	b.n	8001d96 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	3301      	adds	r3, #1
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3303      	adds	r3, #3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	333c      	adds	r3, #60	; 0x3c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3340      	adds	r3, #64	; 0x40
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	3301      	adds	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3b9      	bcc.n	8001d14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e044      	b.n	8001e30 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3b5      	bcc.n	8001da6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	687e      	ldr	r6, [r7, #4]
 8001e42:	466d      	mov	r5, sp
 8001e44:	f106 0410 	add.w	r4, r6, #16
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	1d33      	adds	r3, r6, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f003 fbf2 	bl	800563e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f805 	bl	8001e82 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	58000400 	.word	0x58000400

08001ef8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	58000400 	.word	0x58000400

08001f14 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f26:	d101      	bne.n	8001f2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_RCC_HSE_Enable>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_HSE_Disable>:
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_RCC_HSE_IsReady>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f86:	d101      	bne.n	8001f8c <LL_RCC_HSE_IsReady+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_RCC_HSE_IsReady+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_HSI_Enable>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_HSI_Disable>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_HSI_IsReady>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	d101      	bne.n	8001fec <LL_RCC_HSI_IsReady+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_RCC_HSI_IsReady+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_RCC_HSI48_Enable>:
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_RCC_HSI48_Disable>:
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_RCC_HSI48_IsReady>:
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d101      	bne.n	800207e <LL_RCC_HSI48_IsReady+0x18>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_RCC_HSI48_IsReady+0x1a>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_RCC_LSE_Enable>:
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_LSE_Disable>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_LSE_EnableBypass>:
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_LSE_DisableBypass>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d101      	bne.n	800212a <LL_RCC_LSE_IsReady+0x18>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_RCC_LSE_IsReady+0x1a>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d101      	bne.n	8002192 <LL_RCC_LSI1_IsReady+0x18>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_RCC_LSI1_IsReady+0x1a>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d101      	bne.n	80021fa <LL_RCC_LSI2_IsReady+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_LSI2_IsReady+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d101      	bne.n	8002286 <LL_RCC_MSI_IsReady+0x16>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_RCC_MSI_IsReady+0x18>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2bb0      	cmp	r3, #176	; 0xb0
 80022d0:	d901      	bls.n	80022d6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80022d2:	23b0      	movs	r3, #176	; 0xb0
 80022d4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 0203 	bic.w	r2, r3, #3
 8002320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023b2:	f023 020f 	bic.w	r2, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024d2:	d101      	bne.n	80024d8 <LL_RCC_PLL_IsReady+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_RCC_PLL_IsReady+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d101      	bne.n	800255e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800257e:	d101      	bne.n	8002584 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d101      	bne.n	80025aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025c8:	d101      	bne.n	80025ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ec:	d101      	bne.n	80025f2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b08d      	sub	sp, #52	; 0x34
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e363      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 808d 	beq.w	800273a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002620:	f7ff fe89 	bl	8002336 <LL_RCC_GetSysClkSource>
 8002624:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002626:	f7ff ff82 	bl	800252e <LL_RCC_PLL_GetMainSource>
 800262a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x3e>
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d147      	bne.n	80026c8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	2b01      	cmp	r3, #1
 800263c:	d144      	bne.n	80026c8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e347      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800264e:	f7ff fe34 	bl	80022ba <LL_RCC_MSI_GetRange>
 8002652:	4603      	mov	r3, r0
 8002654:	429c      	cmp	r4, r3
 8002656:	d914      	bls.n	8002682 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fd2f 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e336      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fe0e 	bl	8002292 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fe32 	bl	80022e4 <LL_RCC_MSI_SetCalibTrimming>
 8002680:	e013      	b.n	80026aa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe03 	bl	8002292 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe27 	bl	80022e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fd10 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e317      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026aa:	f000 fcc9 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4aa4      	ldr	r2, [pc, #656]	; (8002944 <HAL_RCC_OscConfig+0x344>)
 80026b2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026b4:	4ba4      	ldr	r3, [pc, #656]	; (8002948 <HAL_RCC_OscConfig+0x348>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fff9 	bl	80016b0 <HAL_InitTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d039      	beq.n	8002738 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e308      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01e      	beq.n	800270e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d0:	f7ff fdb0 	bl	8002234 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f83a 	bl	800174c <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026dc:	f7ff f836 	bl	800174c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e2f5      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80026ee:	f7ff fdbf 	bl	8002270 <LL_RCC_MSI_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f1      	beq.n	80026dc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fdc8 	bl	8002292 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fdec 	bl	80022e4 <LL_RCC_MSI_SetCalibTrimming>
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800270e:	f7ff fda0 	bl	8002252 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002712:	f7ff f81b 	bl	800174c <HAL_GetTick>
 8002716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271a:	f7ff f817 	bl	800174c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e2d6      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800272c:	f7ff fda0 	bl	8002270 <LL_RCC_MSI_IsReady>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f1      	bne.n	800271a <HAL_RCC_OscConfig+0x11a>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002738:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d047      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002746:	f7ff fdf6 	bl	8002336 <LL_RCC_GetSysClkSource>
 800274a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800274c:	f7ff feef 	bl	800252e <LL_RCC_PLL_GetMainSource>
 8002750:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x164>
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d108      	bne.n	8002770 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d105      	bne.n	8002770 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d134      	bne.n	80027d6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e2b4      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d102      	bne.n	8002780 <HAL_RCC_OscConfig+0x180>
 800277a:	f7ff fbdd 	bl	8001f38 <LL_RCC_HSE_Enable>
 800277e:	e001      	b.n	8002784 <HAL_RCC_OscConfig+0x184>
 8002780:	f7ff fbe9 	bl	8001f56 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe ffde 	bl	800174c <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe ffda 	bl	800174c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e299      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027a6:	f7ff fbe5 	bl	8001f74 <LL_RCC_HSE_IsReady>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f1      	beq.n	8002794 <HAL_RCC_OscConfig+0x194>
 80027b0:	e011      	b.n	80027d6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe ffcb 	bl	800174c <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ba:	f7fe ffc7 	bl	800174c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e286      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80027cc:	f7ff fbd2 	bl	8001f74 <LL_RCC_HSE_IsReady>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f1      	bne.n	80027ba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04c      	beq.n	800287c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	f7ff fda8 	bl	8002336 <LL_RCC_GetSysClkSource>
 80027e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	f7ff fea1 	bl	800252e <LL_RCC_PLL_GetMainSource>
 80027ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x200>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d10e      	bne.n	8002818 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e266      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fbf1 	bl	8001ff8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002816:	e031      	b.n	800287c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d019      	beq.n	8002854 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	f7ff fbba 	bl	8001f98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe ff92 	bl	800174c <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7fe ff8e 	bl	800174c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e24d      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800283e:	f7ff fbc9 	bl	8001fd4 <LL_RCC_HSI_IsReady>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f1      	beq.n	800282c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fbd3 	bl	8001ff8 <LL_RCC_HSI_SetCalibTrimming>
 8002852:	e013      	b.n	800287c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	f7ff fbaf 	bl	8001fb6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe ff78 	bl	800174c <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe ff74 	bl	800174c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e233      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002872:	f7ff fbaf 	bl	8001fd4 <LL_RCC_HSI_IsReady>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f1      	bne.n	8002860 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a3 	beq.w	80029dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d076      	beq.n	800298c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d046      	beq.n	8002938 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80028aa:	f7ff fc66 	bl	800217a <LL_RCC_LSI1_IsReady>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d113      	bne.n	80028dc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80028b4:	f7ff fc3f 	bl	8002136 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b8:	f7fe ff48 	bl	800174c <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028c0:	f7fe ff44 	bl	800174c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e203      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028d2:	f7ff fc52 	bl	800217a <LL_RCC_LSI1_IsReady>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f1      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80028dc:	f7ff fc5f 	bl	800219e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe ff34 	bl	800174c <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028e8:	f7fe ff30 	bl	800174c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1ef      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028fa:	f7ff fc72 	bl	80021e2 <LL_RCC_LSI2_IsReady>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f1      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fc7c 	bl	8002206 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800290e:	f7ff fc23 	bl	8002158 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe ff1b 	bl	800174c <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800291a:	f7fe ff17 	bl	800174c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1d6      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800292c:	f7ff fc25 	bl	800217a <LL_RCC_LSI1_IsReady>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f1      	bne.n	800291a <HAL_RCC_OscConfig+0x31a>
 8002936:	e051      	b.n	80029dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002938:	f7ff fbfd 	bl	8002136 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe ff06 	bl	800174c <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002942:	e00c      	b.n	800295e <HAL_RCC_OscConfig+0x35e>
 8002944:	20000008 	.word	0x20000008
 8002948:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800294c:	f7fe fefe 	bl	800174c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e1bd      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800295e:	f7ff fc0c 	bl	800217a <LL_RCC_LSI1_IsReady>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f1      	beq.n	800294c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002968:	f7ff fc2a 	bl	80021c0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800296e:	f7fe feed 	bl	800174c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b03      	cmp	r3, #3
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1ac      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002980:	f7ff fc2f 	bl	80021e2 <LL_RCC_LSI2_IsReady>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f1      	bne.n	800296e <HAL_RCC_OscConfig+0x36e>
 800298a:	e027      	b.n	80029dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800298c:	f7ff fc18 	bl	80021c0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fedc 	bl	800174c <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002998:	f7fe fed8 	bl	800174c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e197      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029aa:	f7ff fc1a 	bl	80021e2 <LL_RCC_LSI2_IsReady>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f1      	bne.n	8002998 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80029b4:	f7ff fbd0 	bl	8002158 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fec8 	bl	800174c <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029c0:	f7fe fec4 	bl	800174c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e183      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029d2:	f7ff fbd2 	bl	800217a <LL_RCC_LSI1_IsReady>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f1      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05b      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e8:	4ba7      	ldr	r3, [pc, #668]	; (8002c88 <HAL_RCC_OscConfig+0x688>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d114      	bne.n	8002a1e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029f4:	f7ff fa70 	bl	8001ed8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fea8 	bl	800174c <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fe fea4 	bl	800174c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e163      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a12:	4b9d      	ldr	r3, [pc, #628]	; (8002c88 <HAL_RCC_OscConfig+0x688>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_OscConfig+0x42c>
 8002a26:	f7ff fb30 	bl	800208a <LL_RCC_LSE_Enable>
 8002a2a:	e00c      	b.n	8002a46 <HAL_RCC_OscConfig+0x446>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d104      	bne.n	8002a3e <HAL_RCC_OscConfig+0x43e>
 8002a34:	f7ff fb4b 	bl	80020ce <LL_RCC_LSE_EnableBypass>
 8002a38:	f7ff fb27 	bl	800208a <LL_RCC_LSE_Enable>
 8002a3c:	e003      	b.n	8002a46 <HAL_RCC_OscConfig+0x446>
 8002a3e:	f7ff fb35 	bl	80020ac <LL_RCC_LSE_Disable>
 8002a42:	f7ff fb55 	bl	80020f0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d014      	beq.n	8002a78 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fe7d 	bl	800174c <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fe79 	bl	800174c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e136      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a6c:	f7ff fb51 	bl	8002112 <LL_RCC_LSE_IsReady>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ef      	beq.n	8002a56 <HAL_RCC_OscConfig+0x456>
 8002a76:	e013      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fe68 	bl	800174c <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fe64 	bl	800174c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e121      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a96:	f7ff fb3c 	bl	8002112 <LL_RCC_LSE_IsReady>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ef      	bne.n	8002a80 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d02c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d014      	beq.n	8002ade <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ab4:	f7ff fab5 	bl	8002022 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fe48 	bl	800174c <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac0:	f7fe fe44 	bl	800174c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e103      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002ad2:	f7ff fac8 	bl	8002066 <LL_RCC_HSI48_IsReady>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f1      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4c0>
 8002adc:	e013      	b.n	8002b06 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ade:	f7ff fab1 	bl	8002044 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fe33 	bl	800174c <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aea:	f7fe fe2f 	bl	800174c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0ee      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002afc:	f7ff fab3 	bl	8002066 <LL_RCC_HSI48_IsReady>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f1      	bne.n	8002aea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80e4 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b10:	f7ff fc11 	bl	8002336 <LL_RCC_GetSysClkSource>
 8002b14:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 80b4 	bne.w	8002c90 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d123      	bne.n	8002b7e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d11c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d114      	bne.n	8002b7e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d10d      	bne.n	8002b7e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d05d      	beq.n	8002c3a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d058      	beq.n	8002c36 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0a1      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b96:	f7ff fc84 	bl	80024a2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b9a:	f7fe fdd7 	bl	800174c <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fdd3 	bl	800174c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e092      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ef      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x68c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bda:	0212      	lsls	r2, r2, #8
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf8:	f7ff fc44 	bl	8002484 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c0c:	f7fe fd9e 	bl	800174c <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fd9a 	bl	800174c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e059      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c34:	e050      	b.n	8002cd8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d147      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c48:	f7ff fc1c 	bl	8002484 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5c:	f7fe fd76 	bl	800174c <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fd72 	bl	800174c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e031      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCC_OscConfig+0x664>
 8002c84:	e028      	b.n	8002cd8 <HAL_RCC_OscConfig+0x6d8>
 8002c86:	bf00      	nop
 8002c88:	58000400 	.word	0x58000400
 8002c8c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d01e      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	f7ff fc04 	bl	80024a2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fd57 	bl	800174c <HAL_GetTick>
 8002c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fd53 	bl	800174c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e012      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ef      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_OscConfig+0x6e4>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60cb      	str	r3, [r1, #12]
 8002cd2:	e001      	b.n	8002cd8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3734      	adds	r7, #52	; 0x34
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	eefefffc 	.word	0xeefefffc

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e12d      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b98      	ldr	r3, [pc, #608]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d91b      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b95      	ldr	r3, [pc, #596]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0207 	bic.w	r2, r3, #7
 8002d12:	4993      	ldr	r1, [pc, #588]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fd17 	bl	800174c <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d22:	f7fe fd13 	bl	800174c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e111      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d34:	4b8a      	ldr	r3, [pc, #552]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d1ef      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fafb 	bl	800234e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d58:	f7fe fcf8 	bl	800174c <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d60:	f7fe fcf4 	bl	800174c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0f2      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d72:	f7ff fbe8 	bl	8002546 <LL_RCC_IsActiveFlag_HPRE>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f1      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff faf2 	bl	8002376 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fcdb 	bl	800174c <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d9a:	f7fe fcd7 	bl	800174c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0d5      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dac:	f7ff fbdd 	bl	800256a <LL_RCC_IsActiveFlag_C2HPRE>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f1      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff faeb 	bl	80023a2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fcbe 	bl	800174c <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dd4:	f7fe fcba 	bl	800174c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0b8      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002de6:	f7ff fbd3 	bl	8002590 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f1      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fae5 	bl	80023d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e06:	f7fe fca1 	bl	800174c <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e0e:	f7fe fc9d 	bl	800174c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e09b      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e20:	f7ff fbc9 	bl	80025b6 <LL_RCC_IsActiveFlag_PPRE1>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f1      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d017      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fadb 	bl	80023f8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e42:	f7fe fc83 	bl	800174c <HAL_GetTick>
 8002e46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e4a:	f7fe fc7f 	bl	800174c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e07d      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e5c:	f7ff fbbd 	bl	80025da <LL_RCC_IsActiveFlag_PPRE2>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f1      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d043      	beq.n	8002efa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e7a:	f7ff f87b 	bl	8001f74 <LL_RCC_HSE_IsReady>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11e      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e067      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e90:	f7ff fb16 	bl	80024c0 <LL_RCC_PLL_IsReady>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d113      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e05c      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ea6:	f7ff f9e3 	bl	8002270 <LL_RCC_MSI_IsReady>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d108      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e051      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002eb4:	f7ff f88e 	bl	8001fd4 <LL_RCC_HSI_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e04a      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fa21 	bl	800230e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fc3e 	bl	800174c <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fc3a 	bl	800174c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e036      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	f7ff fa24 	bl	8002336 <LL_RCC_GetSysClkSource>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d1ec      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d21b      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	4913      	ldr	r1, [pc, #76]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe fc18 	bl	800174c <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f20:	f7fe fc14 	bl	800174c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e012      	b.n	8002f58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1ef      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f40:	f000 f87e 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_RCC_ClockConfig+0x27c>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002f4a:	f7fe fc0b 	bl	8001764 <HAL_GetTickPrio>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fbad 	bl	80016b0 <HAL_InitTick>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	58004000 	.word	0x58004000
 8002f64:	20000008 	.word	0x20000008

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6e:	f7ff f9e2 	bl	8002336 <LL_RCC_GetSysClkSource>
 8002f72:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f7a:	f7ff f99e 	bl	80022ba <LL_RCC_MSI_GetRange>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e04b      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d102      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e045      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fa2:	f7fe ffb7 	bl	8001f14 <LL_RCC_HSE_IsEnabledDiv2>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e03a      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e037      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002fb8:	f7ff fab9 	bl	800252e <LL_RCC_PLL_GetMainSource>
 8002fbc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d003      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x64>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x6a>
 8002fca:	e00d      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fce:	60bb      	str	r3, [r7, #8]
        break;
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fd2:	f7fe ff9f 	bl	8001f14 <LL_RCC_HSE_IsEnabledDiv2>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fde:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002fe0:	e00d      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fe4:	60bb      	str	r3, [r7, #8]
        break;
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fe8:	f7ff f967 	bl	80022ba <LL_RCC_MSI_GetRange>
 8002fec:	4603      	mov	r3, r0
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffa:	60bb      	str	r3, [r7, #8]
        break;
 8002ffc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ffe:	f7ff fa71 	bl	80024e4 <LL_RCC_PLL_GetN>
 8003002:	4602      	mov	r2, r0
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	fb03 f402 	mul.w	r4, r3, r2
 800300a:	f7ff fa84 	bl	8002516 <LL_RCC_PLL_GetDivider>
 800300e:	4603      	mov	r3, r0
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	3301      	adds	r3, #1
 8003014:	fbb4 f4f3 	udiv	r4, r4, r3
 8003018:	f7ff fa71 	bl	80024fe <LL_RCC_PLL_GetR>
 800301c:	4603      	mov	r3, r0
 800301e:	0f5b      	lsrs	r3, r3, #29
 8003020:	3301      	adds	r3, #1
 8003022:	fbb4 f3f3 	udiv	r3, r4, r3
 8003026:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bd90      	pop	{r4, r7, pc}
 8003032:	bf00      	nop
 8003034:	08006b0c 	.word	0x08006b0c
 8003038:	00f42400 	.word	0x00f42400
 800303c:	01e84800 	.word	0x01e84800

08003040 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b598      	push	{r3, r4, r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003044:	f7ff ff90 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8003048:	4604      	mov	r4, r0
 800304a:	f7ff f9e9 	bl	8002420 <LL_RCC_GetAHBPrescaler>
 800304e:	4603      	mov	r3, r0
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	4a03      	ldr	r2, [pc, #12]	; (8003064 <HAL_RCC_GetHCLKFreq+0x24>)
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd98      	pop	{r3, r4, r7, pc}
 8003064:	08006aac 	.word	0x08006aac

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b598      	push	{r3, r4, r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800306c:	f7ff ffe8 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8003070:	4604      	mov	r4, r0
 8003072:	f7ff f9ef 	bl	8002454 <LL_RCC_GetAPB1Prescaler>
 8003076:	4603      	mov	r3, r0
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa24 f303 	lsr.w	r3, r4, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd98      	pop	{r3, r4, r7, pc}
 8003090:	08006aec 	.word	0x08006aec

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b598      	push	{r3, r4, r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003098:	f7ff ffd2 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 800309c:	4604      	mov	r4, r0
 800309e:	f7ff f9e5 	bl	800246c <LL_RCC_GetAPB2Prescaler>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0adb      	lsrs	r3, r3, #11
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	4a04      	ldr	r2, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd98      	pop	{r3, r4, r7, pc}
 80030bc:	08006aec 	.word	0x08006aec

080030c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2bb0      	cmp	r3, #176	; 0xb0
 80030cc:	d903      	bls.n	80030d6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e007      	b.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80030e6:	f7ff f9a7 	bl	8002438 <LL_RCC_GetAHB4Prescaler>
 80030ea:	4603      	mov	r3, r0
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	0c9c      	lsrs	r4, r3, #18
 800310a:	f7fe fef5 	bl	8001ef8 <HAL_PWREx_GetVoltageRange>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	4620      	mov	r0, r4
 8003114:	f000 f80c 	bl	8003130 <RCC_SetFlashLatency>
 8003118:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	08006b0c 	.word	0x08006b0c
 8003128:	08006aac 	.word	0x08006aac
 800312c:	431bde83 	.word	0x431bde83

08003130 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b093      	sub	sp, #76	; 0x4c
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <RCC_SetFlashLatency+0xe8>)
 800313c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003146:	4a35      	ldr	r2, [pc, #212]	; (800321c <RCC_SetFlashLatency+0xec>)
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	ca07      	ldmia	r2, {r0, r1, r2}
 800314e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <RCC_SetFlashLatency+0xf0>)
 8003154:	f107 040c 	add.w	r4, r7, #12
 8003158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800315a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800315e:	2300      	movs	r3, #0
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d11a      	bne.n	80031a0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800316a:	2300      	movs	r3, #0
 800316c:	643b      	str	r3, [r7, #64]	; 0x40
 800316e:	e013      	b.n	8003198 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	3348      	adds	r3, #72	; 0x48
 8003176:	443b      	add	r3, r7
 8003178:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d807      	bhi.n	8003192 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3348      	adds	r3, #72	; 0x48
 8003188:	443b      	add	r3, r7
 800318a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003190:	e020      	b.n	80031d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003194:	3301      	adds	r3, #1
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	2b03      	cmp	r3, #3
 800319c:	d9e8      	bls.n	8003170 <RCC_SetFlashLatency+0x40>
 800319e:	e019      	b.n	80031d4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a4:	e013      	b.n	80031ce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	3348      	adds	r3, #72	; 0x48
 80031ac:	443b      	add	r3, r7
 80031ae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d807      	bhi.n	80031c8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3348      	adds	r3, #72	; 0x48
 80031be:	443b      	add	r3, r7
 80031c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80031c6:	e005      	b.n	80031d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	3301      	adds	r3, #1
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d9e8      	bls.n	80031a6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <RCC_SetFlashLatency+0xf4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 0207 	bic.w	r2, r3, #7
 80031dc:	4911      	ldr	r1, [pc, #68]	; (8003224 <RCC_SetFlashLatency+0xf4>)
 80031de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031e4:	f7fe fab2 	bl	800174c <HAL_GetTick>
 80031e8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031ea:	e008      	b.n	80031fe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031ec:	f7fe faae 	bl	800174c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e007      	b.n	800320e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <RCC_SetFlashLatency+0xf4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003208:	429a      	cmp	r2, r3
 800320a:	d1ef      	bne.n	80031ec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	374c      	adds	r7, #76	; 0x4c
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}
 8003216:	bf00      	nop
 8003218:	08006a80 	.word	0x08006a80
 800321c:	08006a90 	.word	0x08006a90
 8003220:	08006a9c 	.word	0x08006a9c
 8003224:	58004000 	.word	0x58004000

08003228 <LL_RCC_LSE_IsEnabled>:
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <LL_RCC_LSE_IsEnabled+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_RCC_LSE_IsEnabled+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_RCC_LSE_IsReady>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d101      	bne.n	8003264 <LL_RCC_LSE_IsReady+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_RCC_LSE_IsReady+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_RCC_MSI_EnablePLLMode>:
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_SetRFWKPClockSource>:
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_RCC_SetSMPSClockSource>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f023 0203 	bic.w	r2, r3, #3
 80032cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_RCC_SetSMPSPrescaler>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_RCC_SetUSARTClockSource>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_RCC_SetLPUARTClockSource>:
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800334a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_RCC_SetI2CClockSource>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800337a:	43db      	mvns	r3, r3
 800337c:	401a      	ands	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_RCC_SetLPTIMClockSource>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	43db      	mvns	r3, r3
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_RCC_SetSAIClockSource>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80033d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_RCC_SetRNGClockSource>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_RCC_SetCLK48ClockSource>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800343c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_RCC_SetUSBClockSource>:
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffe3 	bl	8003428 <LL_RCC_SetCLK48ClockSource>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <LL_RCC_SetADCClockSource>:
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_RCC_SetRTCClockSource>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_RCC_GetRTCClockSource>:
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_RCC_ForceBackupDomainReset>:
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_PLLSAI1_Enable>:
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_RCC_PLLSAI1_Disable>:
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003550:	6013      	str	r3, [r2, #0]
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_RCC_PLLSAI1_IsReady>:
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356e:	d101      	bne.n	8003574 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800358c:	2300      	movs	r3, #0
 800358e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d034      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a4:	d021      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80035a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035aa:	d81b      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b0:	d01d      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80035b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b6:	d815      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80035bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c0:	d110      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80035d2:	e00d      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f94d 	bl	8003878 <RCCEx_PLLSAI1_ConfigNP>
 80035de:	4603      	mov	r3, r0
 80035e0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80035e2:	e005      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
        break;
 80035e8:	e002      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f0:	7ffb      	ldrb	r3, [r7, #31]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fee8 	bl	80033d0 <LL_RCC_SetSAIClockSource>
 8003600:	e001      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	2b00      	cmp	r3, #0
 8003610:	d046      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003612:	f7ff ff56 	bl	80034c2 <LL_RCC_GetRTCClockSource>
 8003616:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	429a      	cmp	r2, r3
 8003620:	d03c      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003622:	f7fe fc59 	bl	8001ed8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff30 	bl	8003496 <LL_RCC_SetRTCClockSource>
 8003636:	e02e      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003642:	f7ff ff4b 	bl	80034dc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003646:	f7ff ff5a 	bl	80034fe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003662:	f7ff fde1 	bl	8003228 <LL_RCC_LSE_IsEnabled>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d114      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366c:	f7fe f86e 	bl	800174c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003672:	e00b      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003674:	f7fe f86a 	bl	800174c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d902      	bls.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	77fb      	strb	r3, [r7, #31]
              break;
 800368a:	e004      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800368c:	f7ff fdde 	bl	800324c <LL_RCC_LSE_IsReady>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d1ee      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	77bb      	strb	r3, [r7, #30]
 800369a:	e001      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	7ffb      	ldrb	r3, [r7, #31]
 800369e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe2a 	bl	800330a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe35 	bl	8003336 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fe5d 	bl	800339c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fe52 	bl	800339c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fe2a 	bl	8003362 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fe1f 	bl	8003362 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe8d 	bl	8003454 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003742:	d107      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375c:	d10b      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f8e3 	bl	800392e <RCCEx_PLLSAI1_ConfigNQ>
 8003768:	4603      	mov	r3, r0
 800376a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003772:	7ffb      	ldrb	r3, [r7, #31]
 8003774:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377e:	2b00      	cmp	r3, #0
 8003780:	d02b      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fe2a 	bl	80033fc <LL_RCC_SetRNGClockSource>
 80037a8:	e00a      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7ff fe21 	bl	80033fc <LL_RCC_SetRNGClockSource>
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fe34 	bl	8003428 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80037c8:	d107      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d022      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fe3d 	bl	800346a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f8:	d107      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003812:	d10b      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f8e3 	bl	80039e4 <RCCEx_PLLSAI1_ConfigNR>
 800381e:	4603      	mov	r3, r0
 8003820:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fd26 	bl	800328e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fd45 	bl	80032e2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fd2c 	bl	80032ba <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003862:	7fbb      	ldrb	r3, [r7, #30]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003870:	f7ff fcfe 	bl	8003270 <LL_RCC_MSI_EnablePLLMode>
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}

08003878 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003884:	f7ff fe5b 	bl	800353e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003888:	f7fd ff60 	bl	800174c <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800388e:	e009      	b.n	80038a4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003890:	f7fd ff5c 	bl	800174c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d902      	bls.n	80038a4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	73fb      	strb	r3, [r7, #15]
      break;
 80038a2:	e004      	b.n	80038ae <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038a4:	f7ff fe5a 	bl	800355c <LL_RCC_PLLSAI1_IsReady>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d137      	bne.n	8003924 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038de:	4313      	orrs	r3, r2
 80038e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038e2:	f7ff fe1d 	bl	8003520 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e6:	f7fd ff31 	bl	800174c <HAL_GetTick>
 80038ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038ec:	e009      	b.n	8003902 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ee:	f7fd ff2d 	bl	800174c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d902      	bls.n	8003902 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003900:	e004      	b.n	800390c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003902:	f7ff fe2b 	bl	800355c <LL_RCC_PLLSAI1_IsReady>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d1f0      	bne.n	80038ee <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003920:	4313      	orrs	r3, r2
 8003922:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800393a:	f7ff fe00 	bl	800353e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800393e:	f7fd ff05 	bl	800174c <HAL_GetTick>
 8003942:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003944:	e009      	b.n	800395a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003946:	f7fd ff01 	bl	800174c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d902      	bls.n	800395a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e004      	b.n	8003964 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800395a:	f7ff fdff 	bl	800355c <LL_RCC_PLLSAI1_IsReady>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d137      	bne.n	80039da <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003998:	f7ff fdc2 	bl	8003520 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fd fed6 	bl	800174c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039a2:	e009      	b.n	80039b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039a4:	f7fd fed2 	bl	800174c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	73fb      	strb	r3, [r7, #15]
        break;
 80039b6:	e004      	b.n	80039c2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039b8:	f7ff fdd0 	bl	800355c <LL_RCC_PLLSAI1_IsReady>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d1f0      	bne.n	80039a4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d6:	4313      	orrs	r3, r2
 80039d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039f0:	f7ff fda5 	bl	800353e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039f4:	f7fd feaa 	bl	800174c <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039fa:	e009      	b.n	8003a10 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039fc:	f7fd fea6 	bl	800174c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a0e:	e004      	b.n	8003a1a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a10:	f7ff fda4 	bl	800355c <LL_RCC_PLLSAI1_IsReady>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d137      	bne.n	8003a90 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a34:	4313      	orrs	r3, r2
 8003a36:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a4e:	f7ff fd67 	bl	8003520 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a52:	f7fd fe7b 	bl	800174c <HAL_GetTick>
 8003a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a58:	e009      	b.n	8003a6e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a5a:	f7fd fe77 	bl	800174c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d902      	bls.n	8003a6e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a6c:	e004      	b.n	8003a78 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a6e:	f7ff fd75 	bl	800355c <LL_RCC_PLLSAI1_IsReady>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d1f0      	bne.n	8003a5a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e049      	b.n	8003b40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fd fba6 	bl	8001212 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f000 fb4f 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e049      	b.n	8003bee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f841 	bl	8003bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 faf8 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_TIM_PWM_Start+0x24>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e03c      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d109      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x3e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e02f      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d109      	bne.n	8003c64 <HAL_TIM_PWM_Start+0x58>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e022      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d109      	bne.n	8003c7e <HAL_TIM_PWM_Start+0x72>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e015      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d109      	bne.n	8003c98 <HAL_TIM_PWM_Start+0x8c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e008      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e079      	b.n	8003da6 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0xb6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc0:	e023      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0xc6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd0:	e01b      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xd6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	e013      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0xe6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0xf6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d00:	e003      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fdb0 	bl	8004878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <HAL_TIM_PWM_Start+0x1a4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x12a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <HAL_TIM_PWM_Start+0x1a8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x12a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <HAL_TIM_PWM_Start+0x1ac>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x12e>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_TIM_PWM_Start+0x130>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <HAL_TIM_PWM_Start+0x1a4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x158>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d62:	d115      	bne.n	8003d90 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_TIM_PWM_Start+0x1b0>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d015      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x196>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d011      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	e008      	b.n	8003da2 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e000      	b.n	8003da4 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800
 8003dbc:	00010007 	.word	0x00010007

08003dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0ff      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b14      	cmp	r3, #20
 8003dea:	f200 80f0 	bhi.w	8003fce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e49 	.word	0x08003e49
 8003df8:	08003fcf 	.word	0x08003fcf
 8003dfc:	08003fcf 	.word	0x08003fcf
 8003e00:	08003fcf 	.word	0x08003fcf
 8003e04:	08003e89 	.word	0x08003e89
 8003e08:	08003fcf 	.word	0x08003fcf
 8003e0c:	08003fcf 	.word	0x08003fcf
 8003e10:	08003fcf 	.word	0x08003fcf
 8003e14:	08003ecb 	.word	0x08003ecb
 8003e18:	08003fcf 	.word	0x08003fcf
 8003e1c:	08003fcf 	.word	0x08003fcf
 8003e20:	08003fcf 	.word	0x08003fcf
 8003e24:	08003f0b 	.word	0x08003f0b
 8003e28:	08003fcf 	.word	0x08003fcf
 8003e2c:	08003fcf 	.word	0x08003fcf
 8003e30:	08003fcf 	.word	0x08003fcf
 8003e34:	08003f4d 	.word	0x08003f4d
 8003e38:	08003fcf 	.word	0x08003fcf
 8003e3c:	08003fcf 	.word	0x08003fcf
 8003e40:	08003fcf 	.word	0x08003fcf
 8003e44:	08003f8d 	.word	0x08003f8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f9f8 	bl	8004244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
 8003e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0204 	bic.w	r2, r2, #4
 8003e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6999      	ldr	r1, [r3, #24]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	619a      	str	r2, [r3, #24]
      break;
 8003e86:	e0a5      	b.n	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa54 	bl	800433c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6999      	ldr	r1, [r3, #24]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	619a      	str	r2, [r3, #24]
      break;
 8003ec8:	e084      	b.n	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 faad 	bl	8004430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0208 	orr.w	r2, r2, #8
 8003ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0204 	bic.w	r2, r2, #4
 8003ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69d9      	ldr	r1, [r3, #28]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	61da      	str	r2, [r3, #28]
      break;
 8003f08:	e064      	b.n	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fb05 	bl	8004520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69d9      	ldr	r1, [r3, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	021a      	lsls	r2, r3, #8
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	61da      	str	r2, [r3, #28]
      break;
 8003f4a:	e043      	b.n	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb42 	bl	80045dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0208 	orr.w	r2, r2, #8
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f8a:	e023      	b.n	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fb7a 	bl	800468c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fcc:	e002      	b.n	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop

08003fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_ConfigClockSource+0x1c>
 8004000:	2302      	movs	r3, #2
 8004002:	e0b6      	b.n	8004172 <HAL_TIM_ConfigClockSource+0x18a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004022:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004040:	d03e      	beq.n	80040c0 <HAL_TIM_ConfigClockSource+0xd8>
 8004042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004046:	f200 8087 	bhi.w	8004158 <HAL_TIM_ConfigClockSource+0x170>
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	f000 8086 	beq.w	800415e <HAL_TIM_ConfigClockSource+0x176>
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d87f      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004058:	2b70      	cmp	r3, #112	; 0x70
 800405a:	d01a      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0xaa>
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d87b      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d050      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x11e>
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d877      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d03c      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xfe>
 800406c:	2b50      	cmp	r3, #80	; 0x50
 800406e:	d873      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d058      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x13e>
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d86f      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d064      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15e>
 800407c:	2b30      	cmp	r3, #48	; 0x30
 800407e:	d86b      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d060      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15e>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d867      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05c      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15e>
 800408c:	2b10      	cmp	r3, #16
 800408e:	d05a      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15e>
 8004090:	e062      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6899      	ldr	r1, [r3, #8]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f000 fbc9 	bl	8004838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	609a      	str	r2, [r3, #8]
      break;
 80040be:	e04f      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f000 fbb2 	bl	8004838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e2:	609a      	str	r2, [r3, #8]
      break;
 80040e4:	e03c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6859      	ldr	r1, [r3, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f000 fb24 	bl	8004740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2150      	movs	r1, #80	; 0x50
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fb7d 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004104:	e02c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	f000 fb43 	bl	800479e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2160      	movs	r1, #96	; 0x60
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fb6d 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004124:	e01c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	461a      	mov	r2, r3
 8004134:	f000 fb04 	bl	8004740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb5d 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004144:	e00c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f000 fb54 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004156:	e003      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      break;
 800415c:	e000      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800415e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_Base_SetConfig+0x20>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d108      	bne.n	80041ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a21      	ldr	r2, [pc, #132]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_Base_SetConfig+0x52>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0x52>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <TIM_Base_SetConfig+0xc0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0x52>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <TIM_Base_SetConfig+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0xa0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <TIM_Base_SetConfig+0xc0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0xa0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <TIM_Base_SetConfig+0xc4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0302 	bic.w	r3, r3, #2
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a24      	ldr	r2, [pc, #144]	; (8004330 <TIM_OC1_SetConfig+0xec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_OC1_SetConfig+0x70>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <TIM_OC1_SetConfig+0xf0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC1_SetConfig+0x70>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <TIM_OC1_SetConfig+0xf4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10c      	bne.n	80042ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0308 	bic.w	r3, r3, #8
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <TIM_OC1_SetConfig+0xec>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_OC1_SetConfig+0xa2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <TIM_OC1_SetConfig+0xf4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC1_SetConfig+0xa2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <TIM_OC1_SetConfig+0xf0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014800 	.word	0x40014800
 8004338:	40014400 	.word	0x40014400

0800433c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0210 	bic.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a22      	ldr	r2, [pc, #136]	; (8004424 <TIM_OC2_SetConfig+0xe8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10d      	bne.n	80043bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <TIM_OC2_SetConfig+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_OC2_SetConfig+0x98>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <TIM_OC2_SetConfig+0xec>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC2_SetConfig+0x98>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <TIM_OC2_SetConfig+0xf0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d113      	bne.n	80043fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	621a      	str	r2, [r3, #32]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a21      	ldr	r2, [pc, #132]	; (8004514 <TIM_OC3_SetConfig+0xe4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10d      	bne.n	80044ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <TIM_OC3_SetConfig+0xe4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_OC3_SetConfig+0x96>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a17      	ldr	r2, [pc, #92]	; (8004518 <TIM_OC3_SetConfig+0xe8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_OC3_SetConfig+0x96>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC3_SetConfig+0xec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d113      	bne.n	80044ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <TIM_OC4_SetConfig+0xb0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_OC4_SetConfig+0x74>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <TIM_OC4_SetConfig+0xb4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC4_SetConfig+0x74>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <TIM_OC4_SetConfig+0xb8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a13      	ldr	r2, [pc, #76]	; (8004680 <TIM_OC5_SetConfig+0xa4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_OC5_SetConfig+0x6a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a12      	ldr	r2, [pc, #72]	; (8004684 <TIM_OC5_SetConfig+0xa8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC5_SetConfig+0x6a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a11      	ldr	r2, [pc, #68]	; (8004688 <TIM_OC5_SetConfig+0xac>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d109      	bne.n	800465a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	051b      	lsls	r3, r3, #20
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a14      	ldr	r2, [pc, #80]	; (8004734 <TIM_OC6_SetConfig+0xa8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC6_SetConfig+0x6c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <TIM_OC6_SetConfig+0xac>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC6_SetConfig+0x6c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <TIM_OC6_SetConfig+0xb0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	029b      	lsls	r3, r3, #10
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 030a 	bic.w	r3, r3, #10
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479e:	b480      	push	{r7}
 80047a0:	b087      	sub	sp, #28
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0210 	bic.w	r2, r3, #16
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	031b      	lsls	r3, r3, #12
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	f043 0307 	orr.w	r3, r3, #7
 8004824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	431a      	orrs	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2201      	movs	r2, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1a      	ldr	r2, [r3, #32]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e04a      	b.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800490c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d10c      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4313      	orrs	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40012c00 	.word	0x40012c00

08004984 <LL_RCC_GetUSARTClockSource>:
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4013      	ands	r3, r2
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_RCC_GetLPUARTClockSource>:
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4013      	ands	r3, r2
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e042      	b.n	8004a5c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fc fc4b 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2224      	movs	r2, #36	; 0x24
 80049f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8ba 	bl	8004b80 <UART_SetConfig>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e022      	b.n	8004a5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fad6 	bl	8004fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fb5d 	bl	8005114 <UART_CheckIdleState>
 8004a5a:	4603      	mov	r3, r0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d17b      	bne.n	8004b76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_UART_Transmit+0x26>
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e074      	b.n	8004b78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2221      	movs	r2, #33	; 0x21
 8004a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a9e:	f7fc fe55 	bl	800174c <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	d108      	bne.n	8004ad0 <HAL_UART_Transmit+0x6c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e003      	b.n	8004ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ad8:	e030      	b.n	8004b3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fbbf 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e03d      	b.n	8004b78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	3302      	adds	r3, #2
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	e007      	b.n	8004b2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	3301      	adds	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1c8      	bne.n	8004ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2140      	movs	r1, #64	; 0x40
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fb88 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e006      	b.n	8004b78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b08c      	sub	sp, #48	; 0x30
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4baf      	ldr	r3, [pc, #700]	; (8004e6c <UART_SetConfig+0x2ec>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4aa4      	ldr	r2, [pc, #656]	; (8004e70 <UART_SetConfig+0x2f0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bf6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	f023 010f 	bic.w	r1, r3, #15
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a95      	ldr	r2, [pc, #596]	; (8004e74 <UART_SetConfig+0x2f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d125      	bne.n	8004c70 <UART_SetConfig+0xf0>
 8004c24:	2003      	movs	r0, #3
 8004c26:	f7ff fead 	bl	8004984 <LL_RCC_GetUSARTClockSource>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d81b      	bhi.n	8004c68 <UART_SetConfig+0xe8>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0xb8>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e042      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e03e      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e03a      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e036      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e032      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7e      	ldr	r2, [pc, #504]	; (8004e70 <UART_SetConfig+0x2f0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d12a      	bne.n	8004cd0 <UART_SetConfig+0x150>
 8004c7a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004c7e:	f7ff fe91 	bl	80049a4 <LL_RCC_GetLPUARTClockSource>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c88:	d01a      	beq.n	8004cc0 <UART_SetConfig+0x140>
 8004c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c8e:	d81b      	bhi.n	8004cc8 <UART_SetConfig+0x148>
 8004c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c94:	d00c      	beq.n	8004cb0 <UART_SetConfig+0x130>
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d815      	bhi.n	8004cc8 <UART_SetConfig+0x148>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <UART_SetConfig+0x128>
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d008      	beq.n	8004cb8 <UART_SetConfig+0x138>
 8004ca6:	e00f      	b.n	8004cc8 <UART_SetConfig+0x148>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cae:	e012      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e00e      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e00a      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	e006      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e002      	b.n	8004cd6 <UART_SetConfig+0x156>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a65      	ldr	r2, [pc, #404]	; (8004e70 <UART_SetConfig+0x2f0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	f040 8097 	bne.w	8004e10 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d823      	bhi.n	8004d32 <UART_SetConfig+0x1b2>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x170>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d23 	.word	0x08004d23
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d33 	.word	0x08004d33
 8004d0c:	08004d33 	.word	0x08004d33
 8004d10:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe f9a8 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d1a:	e010      	b.n	8004d3e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b56      	ldr	r3, [pc, #344]	; (8004e78 <UART_SetConfig+0x2f8>)
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d20:	e00d      	b.n	8004d3e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe f921 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d28:	e009      	b.n	8004d3e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d30:	e005      	b.n	8004d3e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 812b 	beq.w	8004f9c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <UART_SetConfig+0x2fc>)
 8004d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d305      	bcc.n	8004d76 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d903      	bls.n	8004d7e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d7c:	e10e      	b.n	8004f9c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	2200      	movs	r2, #0
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	60fa      	str	r2, [r7, #12]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <UART_SetConfig+0x2fc>)
 8004d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2200      	movs	r2, #0
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004da0:	f7fb fa46 	bl	8000230 <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	020b      	lsls	r3, r1, #8
 8004db6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dba:	0202      	lsls	r2, r0, #8
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	6849      	ldr	r1, [r1, #4]
 8004dc0:	0849      	lsrs	r1, r1, #1
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	eb12 0804 	adds.w	r8, r2, r4
 8004dcc:	eb43 0905 	adc.w	r9, r3, r5
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	469a      	mov	sl, r3
 8004dd8:	4693      	mov	fp, r2
 8004dda:	4652      	mov	r2, sl
 8004ddc:	465b      	mov	r3, fp
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	f7fb fa25 	bl	8000230 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4613      	mov	r3, r2
 8004dec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df4:	d308      	bcc.n	8004e08 <UART_SetConfig+0x288>
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfc:	d204      	bcs.n	8004e08 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	e0c9      	b.n	8004f9c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e0e:	e0c5      	b.n	8004f9c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	d16d      	bne.n	8004ef6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	2b07      	cmp	r3, #7
 8004e22:	d82d      	bhi.n	8004e80 <UART_SetConfig+0x300>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <UART_SetConfig+0x2ac>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e4d 	.word	0x08004e4d
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e81 	.word	0x08004e81
 8004e38:	08004e5b 	.word	0x08004e5b
 8004e3c:	08004e81 	.word	0x08004e81
 8004e40:	08004e81 	.word	0x08004e81
 8004e44:	08004e81 	.word	0x08004e81
 8004e48:	08004e63 	.word	0x08004e63
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe f922 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e52:	e01b      	b.n	8004e8c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <UART_SetConfig+0x2f8>)
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e58:	e018      	b.n	8004e8c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7fe f885 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e60:	e014      	b.n	8004e8c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e68:	e010      	b.n	8004e8c <UART_SetConfig+0x30c>
 8004e6a:	bf00      	nop
 8004e6c:	cfff69f3 	.word	0xcfff69f3
 8004e70:	40008000 	.word	0x40008000
 8004e74:	40013800 	.word	0x40013800
 8004e78:	00f42400 	.word	0x00f42400
 8004e7c:	08006b4c 	.word	0x08006b4c
      default:
        pclk = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8084 	beq.w	8004f9c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <UART_SetConfig+0x448>)
 8004e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea6:	005a      	lsls	r2, r3, #1
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	441a      	add	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d916      	bls.n	8004eee <UART_SetConfig+0x36e>
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d212      	bcs.n	8004eee <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f023 030f 	bic.w	r3, r3, #15
 8004ed0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	8bfb      	ldrh	r3, [r7, #30]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	8bfa      	ldrh	r2, [r7, #30]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e056      	b.n	8004f9c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ef4:	e052      	b.n	8004f9c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004efa:	3b01      	subs	r3, #1
 8004efc:	2b07      	cmp	r3, #7
 8004efe:	d822      	bhi.n	8004f46 <UART_SetConfig+0x3c6>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x388>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f29 	.word	0x08004f29
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f47 	.word	0x08004f47
 8004f14:	08004f37 	.word	0x08004f37
 8004f18:	08004f47 	.word	0x08004f47
 8004f1c:	08004f47 	.word	0x08004f47
 8004f20:	08004f47 	.word	0x08004f47
 8004f24:	08004f3f 	.word	0x08004f3f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe f8b4 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f2e:	e010      	b.n	8004f52 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <UART_SetConfig+0x44c>)
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f34:	e00d      	b.n	8004f52 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7fe f817 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f3c:	e009      	b.n	8004f52 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f44:	e005      	b.n	8004f52 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f50:	bf00      	nop
    }

    if (pclk != 0U)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d021      	beq.n	8004f9c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <UART_SetConfig+0x448>)
 8004f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f62:	461a      	mov	r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	441a      	add	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d909      	bls.n	8004f96 <UART_SetConfig+0x416>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d205      	bcs.n	8004f96 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	e002      	b.n	8004f9c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3730      	adds	r7, #48	; 0x30
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08006b4c 	.word	0x08006b4c
 8004fcc:	00f42400 	.word	0x00f42400

08004fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ce:	d10a      	bne.n	80050e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b098      	sub	sp, #96	; 0x60
 8005118:	af02      	add	r7, sp, #8
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005124:	f7fc fb12 	bl	800174c <HAL_GetTick>
 8005128:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b08      	cmp	r3, #8
 8005136:	d12f      	bne.n	8005198 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005140:	2200      	movs	r2, #0
 8005142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f88e 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d022      	beq.n	8005198 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005166:	653b      	str	r3, [r7, #80]	; 0x50
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005170:	647b      	str	r3, [r7, #68]	; 0x44
 8005172:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e6      	bne.n	8005152 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e063      	b.n	8005260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d149      	bne.n	800523a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ae:	2200      	movs	r2, #0
 80051b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f857 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d03c      	beq.n	800523a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	623b      	str	r3, [r7, #32]
   return(result);
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
 80051e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e6      	bne.n	80051c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3308      	adds	r3, #8
 80051f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	60fb      	str	r3, [r7, #12]
   return(result);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	64bb      	str	r3, [r7, #72]	; 0x48
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005212:	61fa      	str	r2, [r7, #28]
 8005214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	617b      	str	r3, [r7, #20]
   return(result);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e5      	bne.n	80051f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e012      	b.n	8005260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3758      	adds	r7, #88	; 0x58
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	e049      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d045      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fc fa63 	bl	800174c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <UART_WaitOnFlagUntilTimeout+0x30>
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e048      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d031      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d110      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f838 	bl	8005336 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2208      	movs	r2, #8
 80052ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e029      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d111      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f81e 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d0a6      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b095      	sub	sp, #84	; 0x54
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	643b      	str	r3, [r7, #64]	; 0x40
 800535e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e3      	bne.n	8005370 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d118      	bne.n	80053e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f023 0310 	bic.w	r3, r3, #16
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6979      	ldr	r1, [r7, #20]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	613b      	str	r3, [r7, #16]
   return(result);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e6      	bne.n	80053b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053f6:	bf00      	nop
 80053f8:	3754      	adds	r7, #84	; 0x54
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_UARTEx_DisableFifoMode+0x16>
 8005414:	2302      	movs	r3, #2
 8005416:	e027      	b.n	8005468 <HAL_UARTEx_DisableFifoMode+0x66>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2224      	movs	r2, #36	; 0x24
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005446:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e02d      	b.n	80054e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f84f 	bl	800556c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005504:	2302      	movs	r3, #2
 8005506:	e02d      	b.n	8005564 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f811 	bl	800556c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005578:	2b00      	cmp	r3, #0
 800557a:	d108      	bne.n	800558e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800558c:	e031      	b.n	80055f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800558e:	2308      	movs	r3, #8
 8005590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005592:	2308      	movs	r3, #8
 8005594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	0e5b      	lsrs	r3, r3, #25
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	0f5b      	lsrs	r3, r3, #29
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	7b3a      	ldrb	r2, [r7, #12]
 80055ba:	4911      	ldr	r1, [pc, #68]	; (8005600 <UARTEx_SetNbDataToProcess+0x94>)
 80055bc:	5c8a      	ldrb	r2, [r1, r2]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055c2:	7b3a      	ldrb	r2, [r7, #12]
 80055c4:	490f      	ldr	r1, [pc, #60]	; (8005604 <UARTEx_SetNbDataToProcess+0x98>)
 80055c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	7b7a      	ldrb	r2, [r7, #13]
 80055d8:	4909      	ldr	r1, [pc, #36]	; (8005600 <UARTEx_SetNbDataToProcess+0x94>)
 80055da:	5c8a      	ldrb	r2, [r1, r2]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055e0:	7b7a      	ldrb	r2, [r7, #13]
 80055e2:	4908      	ldr	r1, [pc, #32]	; (8005604 <UARTEx_SetNbDataToProcess+0x98>)
 80055e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	08006b64 	.word	0x08006b64
 8005604:	08006b6c 	.word	0x08006b6c

08005608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005610:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005614:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	b29b      	uxth	r3, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	b29b      	uxth	r3, r3
 8005626:	4013      	ands	r3, r2
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800563e:	b084      	sub	sp, #16
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	f107 0014 	add.w	r0, r7, #20
 800564c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	b004      	add	sp, #16
 800567e:	4770      	bx	lr

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000014 	.word	0x20000014

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4d0d      	ldr	r5, [pc, #52]	; (80056c4 <__libc_init_array+0x38>)
 8005690:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005692:	1b64      	subs	r4, r4, r5
 8005694:	10a4      	asrs	r4, r4, #2
 8005696:	2600      	movs	r6, #0
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	4d0b      	ldr	r5, [pc, #44]	; (80056cc <__libc_init_array+0x40>)
 800569e:	4c0c      	ldr	r4, [pc, #48]	; (80056d0 <__libc_init_array+0x44>)
 80056a0:	f001 f98a 	bl	80069b8 <_init>
 80056a4:	1b64      	subs	r4, r4, r5
 80056a6:	10a4      	asrs	r4, r4, #2
 80056a8:	2600      	movs	r6, #0
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08006c14 	.word	0x08006c14
 80056c8:	08006c14 	.word	0x08006c14
 80056cc:	08006c14 	.word	0x08006c14
 80056d0:	08006c18 	.word	0x08006c18

080056d4 <memset>:
 80056d4:	4402      	add	r2, r0
 80056d6:	4603      	mov	r3, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <iprintf>:
 80056e4:	b40f      	push	{r0, r1, r2, r3}
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <iprintf+0x2c>)
 80056e8:	b513      	push	{r0, r1, r4, lr}
 80056ea:	681c      	ldr	r4, [r3, #0]
 80056ec:	b124      	cbz	r4, 80056f8 <iprintf+0x14>
 80056ee:	69a3      	ldr	r3, [r4, #24]
 80056f0:	b913      	cbnz	r3, 80056f8 <iprintf+0x14>
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f886 	bl	8005804 <__sinit>
 80056f8:	ab05      	add	r3, sp, #20
 80056fa:	9a04      	ldr	r2, [sp, #16]
 80056fc:	68a1      	ldr	r1, [r4, #8]
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fb39 	bl	8005d78 <_vfiprintf_r>
 8005706:	b002      	add	sp, #8
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570c:	b004      	add	sp, #16
 800570e:	4770      	bx	lr
 8005710:	20000014 	.word	0x20000014

08005714 <siprintf>:
 8005714:	b40e      	push	{r1, r2, r3}
 8005716:	b500      	push	{lr}
 8005718:	b09c      	sub	sp, #112	; 0x70
 800571a:	ab1d      	add	r3, sp, #116	; 0x74
 800571c:	9002      	str	r0, [sp, #8]
 800571e:	9006      	str	r0, [sp, #24]
 8005720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005724:	4809      	ldr	r0, [pc, #36]	; (800574c <siprintf+0x38>)
 8005726:	9107      	str	r1, [sp, #28]
 8005728:	9104      	str	r1, [sp, #16]
 800572a:	4909      	ldr	r1, [pc, #36]	; (8005750 <siprintf+0x3c>)
 800572c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	6800      	ldr	r0, [r0, #0]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	a902      	add	r1, sp, #8
 8005738:	f000 f9f4 	bl	8005b24 <_svfiprintf_r>
 800573c:	9b02      	ldr	r3, [sp, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	b01c      	add	sp, #112	; 0x70
 8005744:	f85d eb04 	ldr.w	lr, [sp], #4
 8005748:	b003      	add	sp, #12
 800574a:	4770      	bx	lr
 800574c:	20000014 	.word	0x20000014
 8005750:	ffff0208 	.word	0xffff0208

08005754 <std>:
 8005754:	2300      	movs	r3, #0
 8005756:	b510      	push	{r4, lr}
 8005758:	4604      	mov	r4, r0
 800575a:	e9c0 3300 	strd	r3, r3, [r0]
 800575e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005762:	6083      	str	r3, [r0, #8]
 8005764:	8181      	strh	r1, [r0, #12]
 8005766:	6643      	str	r3, [r0, #100]	; 0x64
 8005768:	81c2      	strh	r2, [r0, #14]
 800576a:	6183      	str	r3, [r0, #24]
 800576c:	4619      	mov	r1, r3
 800576e:	2208      	movs	r2, #8
 8005770:	305c      	adds	r0, #92	; 0x5c
 8005772:	f7ff ffaf 	bl	80056d4 <memset>
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <std+0x38>)
 8005778:	6263      	str	r3, [r4, #36]	; 0x24
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <std+0x3c>)
 800577c:	62a3      	str	r3, [r4, #40]	; 0x28
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <std+0x40>)
 8005780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <std+0x44>)
 8005784:	6224      	str	r4, [r4, #32]
 8005786:	6323      	str	r3, [r4, #48]	; 0x30
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	08006321 	.word	0x08006321
 8005790:	08006343 	.word	0x08006343
 8005794:	0800637b 	.word	0x0800637b
 8005798:	0800639f 	.word	0x0800639f

0800579c <_cleanup_r>:
 800579c:	4901      	ldr	r1, [pc, #4]	; (80057a4 <_cleanup_r+0x8>)
 800579e:	f000 b8af 	b.w	8005900 <_fwalk_reent>
 80057a2:	bf00      	nop
 80057a4:	08006679 	.word	0x08006679

080057a8 <__sfmoreglue>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	2268      	movs	r2, #104	; 0x68
 80057ac:	1e4d      	subs	r5, r1, #1
 80057ae:	4355      	muls	r5, r2
 80057b0:	460e      	mov	r6, r1
 80057b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057b6:	f000 f8e5 	bl	8005984 <_malloc_r>
 80057ba:	4604      	mov	r4, r0
 80057bc:	b140      	cbz	r0, 80057d0 <__sfmoreglue+0x28>
 80057be:	2100      	movs	r1, #0
 80057c0:	e9c0 1600 	strd	r1, r6, [r0]
 80057c4:	300c      	adds	r0, #12
 80057c6:	60a0      	str	r0, [r4, #8]
 80057c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057cc:	f7ff ff82 	bl	80056d4 <memset>
 80057d0:	4620      	mov	r0, r4
 80057d2:	bd70      	pop	{r4, r5, r6, pc}

080057d4 <__sfp_lock_acquire>:
 80057d4:	4801      	ldr	r0, [pc, #4]	; (80057dc <__sfp_lock_acquire+0x8>)
 80057d6:	f000 b8b3 	b.w	8005940 <__retarget_lock_acquire_recursive>
 80057da:	bf00      	nop
 80057dc:	2000048d 	.word	0x2000048d

080057e0 <__sfp_lock_release>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__sfp_lock_release+0x8>)
 80057e2:	f000 b8ae 	b.w	8005942 <__retarget_lock_release_recursive>
 80057e6:	bf00      	nop
 80057e8:	2000048d 	.word	0x2000048d

080057ec <__sinit_lock_acquire>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__sinit_lock_acquire+0x8>)
 80057ee:	f000 b8a7 	b.w	8005940 <__retarget_lock_acquire_recursive>
 80057f2:	bf00      	nop
 80057f4:	2000048e 	.word	0x2000048e

080057f8 <__sinit_lock_release>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__sinit_lock_release+0x8>)
 80057fa:	f000 b8a2 	b.w	8005942 <__retarget_lock_release_recursive>
 80057fe:	bf00      	nop
 8005800:	2000048e 	.word	0x2000048e

08005804 <__sinit>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4604      	mov	r4, r0
 8005808:	f7ff fff0 	bl	80057ec <__sinit_lock_acquire>
 800580c:	69a3      	ldr	r3, [r4, #24]
 800580e:	b11b      	cbz	r3, 8005818 <__sinit+0x14>
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	f7ff bff0 	b.w	80057f8 <__sinit_lock_release>
 8005818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800581c:	6523      	str	r3, [r4, #80]	; 0x50
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <__sinit+0x68>)
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <__sinit+0x6c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	62a2      	str	r2, [r4, #40]	; 0x28
 8005826:	42a3      	cmp	r3, r4
 8005828:	bf04      	itt	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	61a3      	streq	r3, [r4, #24]
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f820 	bl	8005874 <__sfp>
 8005834:	6060      	str	r0, [r4, #4]
 8005836:	4620      	mov	r0, r4
 8005838:	f000 f81c 	bl	8005874 <__sfp>
 800583c:	60a0      	str	r0, [r4, #8]
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f818 	bl	8005874 <__sfp>
 8005844:	2200      	movs	r2, #0
 8005846:	60e0      	str	r0, [r4, #12]
 8005848:	2104      	movs	r1, #4
 800584a:	6860      	ldr	r0, [r4, #4]
 800584c:	f7ff ff82 	bl	8005754 <std>
 8005850:	68a0      	ldr	r0, [r4, #8]
 8005852:	2201      	movs	r2, #1
 8005854:	2109      	movs	r1, #9
 8005856:	f7ff ff7d 	bl	8005754 <std>
 800585a:	68e0      	ldr	r0, [r4, #12]
 800585c:	2202      	movs	r2, #2
 800585e:	2112      	movs	r1, #18
 8005860:	f7ff ff78 	bl	8005754 <std>
 8005864:	2301      	movs	r3, #1
 8005866:	61a3      	str	r3, [r4, #24]
 8005868:	e7d2      	b.n	8005810 <__sinit+0xc>
 800586a:	bf00      	nop
 800586c:	08006b74 	.word	0x08006b74
 8005870:	0800579d 	.word	0x0800579d

08005874 <__sfp>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	4607      	mov	r7, r0
 8005878:	f7ff ffac 	bl	80057d4 <__sfp_lock_acquire>
 800587c:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <__sfp+0x84>)
 800587e:	681e      	ldr	r6, [r3, #0]
 8005880:	69b3      	ldr	r3, [r6, #24]
 8005882:	b913      	cbnz	r3, 800588a <__sfp+0x16>
 8005884:	4630      	mov	r0, r6
 8005886:	f7ff ffbd 	bl	8005804 <__sinit>
 800588a:	3648      	adds	r6, #72	; 0x48
 800588c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005890:	3b01      	subs	r3, #1
 8005892:	d503      	bpl.n	800589c <__sfp+0x28>
 8005894:	6833      	ldr	r3, [r6, #0]
 8005896:	b30b      	cbz	r3, 80058dc <__sfp+0x68>
 8005898:	6836      	ldr	r6, [r6, #0]
 800589a:	e7f7      	b.n	800588c <__sfp+0x18>
 800589c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058a0:	b9d5      	cbnz	r5, 80058d8 <__sfp+0x64>
 80058a2:	4b16      	ldr	r3, [pc, #88]	; (80058fc <__sfp+0x88>)
 80058a4:	60e3      	str	r3, [r4, #12]
 80058a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058aa:	6665      	str	r5, [r4, #100]	; 0x64
 80058ac:	f000 f847 	bl	800593e <__retarget_lock_init_recursive>
 80058b0:	f7ff ff96 	bl	80057e0 <__sfp_lock_release>
 80058b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058bc:	6025      	str	r5, [r4, #0]
 80058be:	61a5      	str	r5, [r4, #24]
 80058c0:	2208      	movs	r2, #8
 80058c2:	4629      	mov	r1, r5
 80058c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058c8:	f7ff ff04 	bl	80056d4 <memset>
 80058cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058d4:	4620      	mov	r0, r4
 80058d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d8:	3468      	adds	r4, #104	; 0x68
 80058da:	e7d9      	b.n	8005890 <__sfp+0x1c>
 80058dc:	2104      	movs	r1, #4
 80058de:	4638      	mov	r0, r7
 80058e0:	f7ff ff62 	bl	80057a8 <__sfmoreglue>
 80058e4:	4604      	mov	r4, r0
 80058e6:	6030      	str	r0, [r6, #0]
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d1d5      	bne.n	8005898 <__sfp+0x24>
 80058ec:	f7ff ff78 	bl	80057e0 <__sfp_lock_release>
 80058f0:	230c      	movs	r3, #12
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	e7ee      	b.n	80058d4 <__sfp+0x60>
 80058f6:	bf00      	nop
 80058f8:	08006b74 	.word	0x08006b74
 80058fc:	ffff0001 	.word	0xffff0001

08005900 <_fwalk_reent>:
 8005900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005904:	4606      	mov	r6, r0
 8005906:	4688      	mov	r8, r1
 8005908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800590c:	2700      	movs	r7, #0
 800590e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005912:	f1b9 0901 	subs.w	r9, r9, #1
 8005916:	d505      	bpl.n	8005924 <_fwalk_reent+0x24>
 8005918:	6824      	ldr	r4, [r4, #0]
 800591a:	2c00      	cmp	r4, #0
 800591c:	d1f7      	bne.n	800590e <_fwalk_reent+0xe>
 800591e:	4638      	mov	r0, r7
 8005920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005924:	89ab      	ldrh	r3, [r5, #12]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d907      	bls.n	800593a <_fwalk_reent+0x3a>
 800592a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800592e:	3301      	adds	r3, #1
 8005930:	d003      	beq.n	800593a <_fwalk_reent+0x3a>
 8005932:	4629      	mov	r1, r5
 8005934:	4630      	mov	r0, r6
 8005936:	47c0      	blx	r8
 8005938:	4307      	orrs	r7, r0
 800593a:	3568      	adds	r5, #104	; 0x68
 800593c:	e7e9      	b.n	8005912 <_fwalk_reent+0x12>

0800593e <__retarget_lock_init_recursive>:
 800593e:	4770      	bx	lr

08005940 <__retarget_lock_acquire_recursive>:
 8005940:	4770      	bx	lr

08005942 <__retarget_lock_release_recursive>:
 8005942:	4770      	bx	lr

08005944 <sbrk_aligned>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4e0e      	ldr	r6, [pc, #56]	; (8005980 <sbrk_aligned+0x3c>)
 8005948:	460c      	mov	r4, r1
 800594a:	6831      	ldr	r1, [r6, #0]
 800594c:	4605      	mov	r5, r0
 800594e:	b911      	cbnz	r1, 8005956 <sbrk_aligned+0x12>
 8005950:	f000 fcd6 	bl	8006300 <_sbrk_r>
 8005954:	6030      	str	r0, [r6, #0]
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 fcd1 	bl	8006300 <_sbrk_r>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d00a      	beq.n	8005978 <sbrk_aligned+0x34>
 8005962:	1cc4      	adds	r4, r0, #3
 8005964:	f024 0403 	bic.w	r4, r4, #3
 8005968:	42a0      	cmp	r0, r4
 800596a:	d007      	beq.n	800597c <sbrk_aligned+0x38>
 800596c:	1a21      	subs	r1, r4, r0
 800596e:	4628      	mov	r0, r5
 8005970:	f000 fcc6 	bl	8006300 <_sbrk_r>
 8005974:	3001      	adds	r0, #1
 8005976:	d101      	bne.n	800597c <sbrk_aligned+0x38>
 8005978:	f04f 34ff 	mov.w	r4, #4294967295
 800597c:	4620      	mov	r0, r4
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	20000494 	.word	0x20000494

08005984 <_malloc_r>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	1ccd      	adds	r5, r1, #3
 800598a:	f025 0503 	bic.w	r5, r5, #3
 800598e:	3508      	adds	r5, #8
 8005990:	2d0c      	cmp	r5, #12
 8005992:	bf38      	it	cc
 8005994:	250c      	movcc	r5, #12
 8005996:	2d00      	cmp	r5, #0
 8005998:	4607      	mov	r7, r0
 800599a:	db01      	blt.n	80059a0 <_malloc_r+0x1c>
 800599c:	42a9      	cmp	r1, r5
 800599e:	d905      	bls.n	80059ac <_malloc_r+0x28>
 80059a0:	230c      	movs	r3, #12
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	2600      	movs	r6, #0
 80059a6:	4630      	mov	r0, r6
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ac:	4e2e      	ldr	r6, [pc, #184]	; (8005a68 <_malloc_r+0xe4>)
 80059ae:	f000 ff3f 	bl	8006830 <__malloc_lock>
 80059b2:	6833      	ldr	r3, [r6, #0]
 80059b4:	461c      	mov	r4, r3
 80059b6:	bb34      	cbnz	r4, 8005a06 <_malloc_r+0x82>
 80059b8:	4629      	mov	r1, r5
 80059ba:	4638      	mov	r0, r7
 80059bc:	f7ff ffc2 	bl	8005944 <sbrk_aligned>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	4604      	mov	r4, r0
 80059c4:	d14d      	bne.n	8005a62 <_malloc_r+0xde>
 80059c6:	6834      	ldr	r4, [r6, #0]
 80059c8:	4626      	mov	r6, r4
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	d140      	bne.n	8005a50 <_malloc_r+0xcc>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	4631      	mov	r1, r6
 80059d2:	4638      	mov	r0, r7
 80059d4:	eb04 0803 	add.w	r8, r4, r3
 80059d8:	f000 fc92 	bl	8006300 <_sbrk_r>
 80059dc:	4580      	cmp	r8, r0
 80059de:	d13a      	bne.n	8005a56 <_malloc_r+0xd2>
 80059e0:	6821      	ldr	r1, [r4, #0]
 80059e2:	3503      	adds	r5, #3
 80059e4:	1a6d      	subs	r5, r5, r1
 80059e6:	f025 0503 	bic.w	r5, r5, #3
 80059ea:	3508      	adds	r5, #8
 80059ec:	2d0c      	cmp	r5, #12
 80059ee:	bf38      	it	cc
 80059f0:	250c      	movcc	r5, #12
 80059f2:	4629      	mov	r1, r5
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff ffa5 	bl	8005944 <sbrk_aligned>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d02b      	beq.n	8005a56 <_malloc_r+0xd2>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	442b      	add	r3, r5
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	e00e      	b.n	8005a24 <_malloc_r+0xa0>
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	1b52      	subs	r2, r2, r5
 8005a0a:	d41e      	bmi.n	8005a4a <_malloc_r+0xc6>
 8005a0c:	2a0b      	cmp	r2, #11
 8005a0e:	d916      	bls.n	8005a3e <_malloc_r+0xba>
 8005a10:	1961      	adds	r1, r4, r5
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	6025      	str	r5, [r4, #0]
 8005a16:	bf18      	it	ne
 8005a18:	6059      	strne	r1, [r3, #4]
 8005a1a:	6863      	ldr	r3, [r4, #4]
 8005a1c:	bf08      	it	eq
 8005a1e:	6031      	streq	r1, [r6, #0]
 8005a20:	5162      	str	r2, [r4, r5]
 8005a22:	604b      	str	r3, [r1, #4]
 8005a24:	4638      	mov	r0, r7
 8005a26:	f104 060b 	add.w	r6, r4, #11
 8005a2a:	f000 ff07 	bl	800683c <__malloc_unlock>
 8005a2e:	f026 0607 	bic.w	r6, r6, #7
 8005a32:	1d23      	adds	r3, r4, #4
 8005a34:	1af2      	subs	r2, r6, r3
 8005a36:	d0b6      	beq.n	80059a6 <_malloc_r+0x22>
 8005a38:	1b9b      	subs	r3, r3, r6
 8005a3a:	50a3      	str	r3, [r4, r2]
 8005a3c:	e7b3      	b.n	80059a6 <_malloc_r+0x22>
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	bf0c      	ite	eq
 8005a44:	6032      	streq	r2, [r6, #0]
 8005a46:	605a      	strne	r2, [r3, #4]
 8005a48:	e7ec      	b.n	8005a24 <_malloc_r+0xa0>
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	6864      	ldr	r4, [r4, #4]
 8005a4e:	e7b2      	b.n	80059b6 <_malloc_r+0x32>
 8005a50:	4634      	mov	r4, r6
 8005a52:	6876      	ldr	r6, [r6, #4]
 8005a54:	e7b9      	b.n	80059ca <_malloc_r+0x46>
 8005a56:	230c      	movs	r3, #12
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f000 feee 	bl	800683c <__malloc_unlock>
 8005a60:	e7a1      	b.n	80059a6 <_malloc_r+0x22>
 8005a62:	6025      	str	r5, [r4, #0]
 8005a64:	e7de      	b.n	8005a24 <_malloc_r+0xa0>
 8005a66:	bf00      	nop
 8005a68:	20000490 	.word	0x20000490

08005a6c <__ssputs_r>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	688e      	ldr	r6, [r1, #8]
 8005a72:	429e      	cmp	r6, r3
 8005a74:	4682      	mov	sl, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	4690      	mov	r8, r2
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	d838      	bhi.n	8005af0 <__ssputs_r+0x84>
 8005a7e:	898a      	ldrh	r2, [r1, #12]
 8005a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a84:	d032      	beq.n	8005aec <__ssputs_r+0x80>
 8005a86:	6825      	ldr	r5, [r4, #0]
 8005a88:	6909      	ldr	r1, [r1, #16]
 8005a8a:	eba5 0901 	sub.w	r9, r5, r1
 8005a8e:	6965      	ldr	r5, [r4, #20]
 8005a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a98:	3301      	adds	r3, #1
 8005a9a:	444b      	add	r3, r9
 8005a9c:	106d      	asrs	r5, r5, #1
 8005a9e:	429d      	cmp	r5, r3
 8005aa0:	bf38      	it	cc
 8005aa2:	461d      	movcc	r5, r3
 8005aa4:	0553      	lsls	r3, r2, #21
 8005aa6:	d531      	bpl.n	8005b0c <__ssputs_r+0xa0>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	f7ff ff6b 	bl	8005984 <_malloc_r>
 8005aae:	4606      	mov	r6, r0
 8005ab0:	b950      	cbnz	r0, 8005ac8 <__ssputs_r+0x5c>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	f8ca 3000 	str.w	r3, [sl]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	6921      	ldr	r1, [r4, #16]
 8005aca:	464a      	mov	r2, r9
 8005acc:	f000 fe88 	bl	80067e0 <memcpy>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	6126      	str	r6, [r4, #16]
 8005ade:	6165      	str	r5, [r4, #20]
 8005ae0:	444e      	add	r6, r9
 8005ae2:	eba5 0509 	sub.w	r5, r5, r9
 8005ae6:	6026      	str	r6, [r4, #0]
 8005ae8:	60a5      	str	r5, [r4, #8]
 8005aea:	463e      	mov	r6, r7
 8005aec:	42be      	cmp	r6, r7
 8005aee:	d900      	bls.n	8005af2 <__ssputs_r+0x86>
 8005af0:	463e      	mov	r6, r7
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	4632      	mov	r2, r6
 8005af6:	4641      	mov	r1, r8
 8005af8:	f000 fe80 	bl	80067fc <memmove>
 8005afc:	68a3      	ldr	r3, [r4, #8]
 8005afe:	1b9b      	subs	r3, r3, r6
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	4433      	add	r3, r6
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7db      	b.n	8005ac4 <__ssputs_r+0x58>
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	f000 fee7 	bl	80068e0 <_realloc_r>
 8005b12:	4606      	mov	r6, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d1e1      	bne.n	8005adc <__ssputs_r+0x70>
 8005b18:	6921      	ldr	r1, [r4, #16]
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f000 fe94 	bl	8006848 <_free_r>
 8005b20:	e7c7      	b.n	8005ab2 <__ssputs_r+0x46>
	...

08005b24 <_svfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4698      	mov	r8, r3
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	b09d      	sub	sp, #116	; 0x74
 8005b30:	4607      	mov	r7, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	d50e      	bpl.n	8005b56 <_svfiprintf_r+0x32>
 8005b38:	690b      	ldr	r3, [r1, #16]
 8005b3a:	b963      	cbnz	r3, 8005b56 <_svfiprintf_r+0x32>
 8005b3c:	2140      	movs	r1, #64	; 0x40
 8005b3e:	f7ff ff21 	bl	8005984 <_malloc_r>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	6128      	str	r0, [r5, #16]
 8005b46:	b920      	cbnz	r0, 8005b52 <_svfiprintf_r+0x2e>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	e0d1      	b.n	8005cf6 <_svfiprintf_r+0x1d2>
 8005b52:	2340      	movs	r3, #64	; 0x40
 8005b54:	616b      	str	r3, [r5, #20]
 8005b56:	2300      	movs	r3, #0
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	2320      	movs	r3, #32
 8005b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b64:	2330      	movs	r3, #48	; 0x30
 8005b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d10 <_svfiprintf_r+0x1ec>
 8005b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b6e:	f04f 0901 	mov.w	r9, #1
 8005b72:	4623      	mov	r3, r4
 8005b74:	469a      	mov	sl, r3
 8005b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7a:	b10a      	cbz	r2, 8005b80 <_svfiprintf_r+0x5c>
 8005b7c:	2a25      	cmp	r2, #37	; 0x25
 8005b7e:	d1f9      	bne.n	8005b74 <_svfiprintf_r+0x50>
 8005b80:	ebba 0b04 	subs.w	fp, sl, r4
 8005b84:	d00b      	beq.n	8005b9e <_svfiprintf_r+0x7a>
 8005b86:	465b      	mov	r3, fp
 8005b88:	4622      	mov	r2, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f7ff ff6d 	bl	8005a6c <__ssputs_r>
 8005b92:	3001      	adds	r0, #1
 8005b94:	f000 80aa 	beq.w	8005cec <_svfiprintf_r+0x1c8>
 8005b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b9a:	445a      	add	r2, fp
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80a2 	beq.w	8005cec <_svfiprintf_r+0x1c8>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb2:	f10a 0a01 	add.w	sl, sl, #1
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	9307      	str	r3, [sp, #28]
 8005bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8005bc0:	4654      	mov	r4, sl
 8005bc2:	2205      	movs	r2, #5
 8005bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc8:	4851      	ldr	r0, [pc, #324]	; (8005d10 <_svfiprintf_r+0x1ec>)
 8005bca:	f7fa fae1 	bl	8000190 <memchr>
 8005bce:	9a04      	ldr	r2, [sp, #16]
 8005bd0:	b9d8      	cbnz	r0, 8005c0a <_svfiprintf_r+0xe6>
 8005bd2:	06d0      	lsls	r0, r2, #27
 8005bd4:	bf44      	itt	mi
 8005bd6:	2320      	movmi	r3, #32
 8005bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bdc:	0711      	lsls	r1, r2, #28
 8005bde:	bf44      	itt	mi
 8005be0:	232b      	movmi	r3, #43	; 0x2b
 8005be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bea:	2b2a      	cmp	r3, #42	; 0x2a
 8005bec:	d015      	beq.n	8005c1a <_svfiprintf_r+0xf6>
 8005bee:	9a07      	ldr	r2, [sp, #28]
 8005bf0:	4654      	mov	r4, sl
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f04f 0c0a 	mov.w	ip, #10
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bfe:	3b30      	subs	r3, #48	; 0x30
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d94e      	bls.n	8005ca2 <_svfiprintf_r+0x17e>
 8005c04:	b1b0      	cbz	r0, 8005c34 <_svfiprintf_r+0x110>
 8005c06:	9207      	str	r2, [sp, #28]
 8005c08:	e014      	b.n	8005c34 <_svfiprintf_r+0x110>
 8005c0a:	eba0 0308 	sub.w	r3, r0, r8
 8005c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	46a2      	mov	sl, r4
 8005c18:	e7d2      	b.n	8005bc0 <_svfiprintf_r+0x9c>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	1d19      	adds	r1, r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	9103      	str	r1, [sp, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfbb      	ittet	lt
 8005c26:	425b      	neglt	r3, r3
 8005c28:	f042 0202 	orrlt.w	r2, r2, #2
 8005c2c:	9307      	strge	r3, [sp, #28]
 8005c2e:	9307      	strlt	r3, [sp, #28]
 8005c30:	bfb8      	it	lt
 8005c32:	9204      	strlt	r2, [sp, #16]
 8005c34:	7823      	ldrb	r3, [r4, #0]
 8005c36:	2b2e      	cmp	r3, #46	; 0x2e
 8005c38:	d10c      	bne.n	8005c54 <_svfiprintf_r+0x130>
 8005c3a:	7863      	ldrb	r3, [r4, #1]
 8005c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3e:	d135      	bne.n	8005cac <_svfiprintf_r+0x188>
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfb8      	it	lt
 8005c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c50:	3402      	adds	r4, #2
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d20 <_svfiprintf_r+0x1fc>
 8005c58:	7821      	ldrb	r1, [r4, #0]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f7fa fa97 	bl	8000190 <memchr>
 8005c62:	b140      	cbz	r0, 8005c76 <_svfiprintf_r+0x152>
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	eba0 000a 	sub.w	r0, r0, sl
 8005c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c6e:	9b04      	ldr	r3, [sp, #16]
 8005c70:	4303      	orrs	r3, r0
 8005c72:	3401      	adds	r4, #1
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7a:	4826      	ldr	r0, [pc, #152]	; (8005d14 <_svfiprintf_r+0x1f0>)
 8005c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c80:	2206      	movs	r2, #6
 8005c82:	f7fa fa85 	bl	8000190 <memchr>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d038      	beq.n	8005cfc <_svfiprintf_r+0x1d8>
 8005c8a:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <_svfiprintf_r+0x1f4>)
 8005c8c:	bb1b      	cbnz	r3, 8005cd6 <_svfiprintf_r+0x1b2>
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	3307      	adds	r3, #7
 8005c92:	f023 0307 	bic.w	r3, r3, #7
 8005c96:	3308      	adds	r3, #8
 8005c98:	9303      	str	r3, [sp, #12]
 8005c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9c:	4433      	add	r3, r6
 8005c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca0:	e767      	b.n	8005b72 <_svfiprintf_r+0x4e>
 8005ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e7a5      	b.n	8005bf8 <_svfiprintf_r+0xd4>
 8005cac:	2300      	movs	r3, #0
 8005cae:	3401      	adds	r4, #1
 8005cb0:	9305      	str	r3, [sp, #20]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f04f 0c0a 	mov.w	ip, #10
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbe:	3a30      	subs	r2, #48	; 0x30
 8005cc0:	2a09      	cmp	r2, #9
 8005cc2:	d903      	bls.n	8005ccc <_svfiprintf_r+0x1a8>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0c5      	beq.n	8005c54 <_svfiprintf_r+0x130>
 8005cc8:	9105      	str	r1, [sp, #20]
 8005cca:	e7c3      	b.n	8005c54 <_svfiprintf_r+0x130>
 8005ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e7f0      	b.n	8005cb8 <_svfiprintf_r+0x194>
 8005cd6:	ab03      	add	r3, sp, #12
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <_svfiprintf_r+0x1f8>)
 8005cde:	a904      	add	r1, sp, #16
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f3af 8000 	nop.w
 8005ce6:	1c42      	adds	r2, r0, #1
 8005ce8:	4606      	mov	r6, r0
 8005cea:	d1d6      	bne.n	8005c9a <_svfiprintf_r+0x176>
 8005cec:	89ab      	ldrh	r3, [r5, #12]
 8005cee:	065b      	lsls	r3, r3, #25
 8005cf0:	f53f af2c 	bmi.w	8005b4c <_svfiprintf_r+0x28>
 8005cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cf6:	b01d      	add	sp, #116	; 0x74
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	ab03      	add	r3, sp, #12
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	462a      	mov	r2, r5
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <_svfiprintf_r+0x1f8>)
 8005d04:	a904      	add	r1, sp, #16
 8005d06:	4638      	mov	r0, r7
 8005d08:	f000 f9d4 	bl	80060b4 <_printf_i>
 8005d0c:	e7eb      	b.n	8005ce6 <_svfiprintf_r+0x1c2>
 8005d0e:	bf00      	nop
 8005d10:	08006bd8 	.word	0x08006bd8
 8005d14:	08006be2 	.word	0x08006be2
 8005d18:	00000000 	.word	0x00000000
 8005d1c:	08005a6d 	.word	0x08005a6d
 8005d20:	08006bde 	.word	0x08006bde

08005d24 <__sfputc_r>:
 8005d24:	6893      	ldr	r3, [r2, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	b410      	push	{r4}
 8005d2c:	6093      	str	r3, [r2, #8]
 8005d2e:	da08      	bge.n	8005d42 <__sfputc_r+0x1e>
 8005d30:	6994      	ldr	r4, [r2, #24]
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	db01      	blt.n	8005d3a <__sfputc_r+0x16>
 8005d36:	290a      	cmp	r1, #10
 8005d38:	d103      	bne.n	8005d42 <__sfputc_r+0x1e>
 8005d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3e:	f000 bb33 	b.w	80063a8 <__swbuf_r>
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	1c58      	adds	r0, r3, #1
 8005d46:	6010      	str	r0, [r2, #0]
 8005d48:	7019      	strb	r1, [r3, #0]
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <__sfputs_r>:
 8005d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	18d5      	adds	r5, r2, r3
 8005d5c:	42ac      	cmp	r4, r5
 8005d5e:	d101      	bne.n	8005d64 <__sfputs_r+0x12>
 8005d60:	2000      	movs	r0, #0
 8005d62:	e007      	b.n	8005d74 <__sfputs_r+0x22>
 8005d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d68:	463a      	mov	r2, r7
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ffda 	bl	8005d24 <__sfputc_r>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d1f3      	bne.n	8005d5c <__sfputs_r+0xa>
 8005d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d78 <_vfiprintf_r>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	b09d      	sub	sp, #116	; 0x74
 8005d80:	4614      	mov	r4, r2
 8005d82:	4698      	mov	r8, r3
 8005d84:	4606      	mov	r6, r0
 8005d86:	b118      	cbz	r0, 8005d90 <_vfiprintf_r+0x18>
 8005d88:	6983      	ldr	r3, [r0, #24]
 8005d8a:	b90b      	cbnz	r3, 8005d90 <_vfiprintf_r+0x18>
 8005d8c:	f7ff fd3a 	bl	8005804 <__sinit>
 8005d90:	4b89      	ldr	r3, [pc, #548]	; (8005fb8 <_vfiprintf_r+0x240>)
 8005d92:	429d      	cmp	r5, r3
 8005d94:	d11b      	bne.n	8005dce <_vfiprintf_r+0x56>
 8005d96:	6875      	ldr	r5, [r6, #4]
 8005d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d9a:	07d9      	lsls	r1, r3, #31
 8005d9c:	d405      	bmi.n	8005daa <_vfiprintf_r+0x32>
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	059a      	lsls	r2, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_vfiprintf_r+0x32>
 8005da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da6:	f7ff fdcb 	bl	8005940 <__retarget_lock_acquire_recursive>
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	071b      	lsls	r3, r3, #28
 8005dae:	d501      	bpl.n	8005db4 <_vfiprintf_r+0x3c>
 8005db0:	692b      	ldr	r3, [r5, #16]
 8005db2:	b9eb      	cbnz	r3, 8005df0 <_vfiprintf_r+0x78>
 8005db4:	4629      	mov	r1, r5
 8005db6:	4630      	mov	r0, r6
 8005db8:	f000 fb5a 	bl	8006470 <__swsetup_r>
 8005dbc:	b1c0      	cbz	r0, 8005df0 <_vfiprintf_r+0x78>
 8005dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc0:	07dc      	lsls	r4, r3, #31
 8005dc2:	d50e      	bpl.n	8005de2 <_vfiprintf_r+0x6a>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	b01d      	add	sp, #116	; 0x74
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	4b7b      	ldr	r3, [pc, #492]	; (8005fbc <_vfiprintf_r+0x244>)
 8005dd0:	429d      	cmp	r5, r3
 8005dd2:	d101      	bne.n	8005dd8 <_vfiprintf_r+0x60>
 8005dd4:	68b5      	ldr	r5, [r6, #8]
 8005dd6:	e7df      	b.n	8005d98 <_vfiprintf_r+0x20>
 8005dd8:	4b79      	ldr	r3, [pc, #484]	; (8005fc0 <_vfiprintf_r+0x248>)
 8005dda:	429d      	cmp	r5, r3
 8005ddc:	bf08      	it	eq
 8005dde:	68f5      	ldreq	r5, [r6, #12]
 8005de0:	e7da      	b.n	8005d98 <_vfiprintf_r+0x20>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	0598      	lsls	r0, r3, #22
 8005de6:	d4ed      	bmi.n	8005dc4 <_vfiprintf_r+0x4c>
 8005de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dea:	f7ff fdaa 	bl	8005942 <__retarget_lock_release_recursive>
 8005dee:	e7e9      	b.n	8005dc4 <_vfiprintf_r+0x4c>
 8005df0:	2300      	movs	r3, #0
 8005df2:	9309      	str	r3, [sp, #36]	; 0x24
 8005df4:	2320      	movs	r3, #32
 8005df6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dfe:	2330      	movs	r3, #48	; 0x30
 8005e00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fc4 <_vfiprintf_r+0x24c>
 8005e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e08:	f04f 0901 	mov.w	r9, #1
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	469a      	mov	sl, r3
 8005e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e14:	b10a      	cbz	r2, 8005e1a <_vfiprintf_r+0xa2>
 8005e16:	2a25      	cmp	r2, #37	; 0x25
 8005e18:	d1f9      	bne.n	8005e0e <_vfiprintf_r+0x96>
 8005e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e1e:	d00b      	beq.n	8005e38 <_vfiprintf_r+0xc0>
 8005e20:	465b      	mov	r3, fp
 8005e22:	4622      	mov	r2, r4
 8005e24:	4629      	mov	r1, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ff93 	bl	8005d52 <__sfputs_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f000 80aa 	beq.w	8005f86 <_vfiprintf_r+0x20e>
 8005e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e34:	445a      	add	r2, fp
 8005e36:	9209      	str	r2, [sp, #36]	; 0x24
 8005e38:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80a2 	beq.w	8005f86 <_vfiprintf_r+0x20e>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e4c:	f10a 0a01 	add.w	sl, sl, #1
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	9307      	str	r3, [sp, #28]
 8005e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e58:	931a      	str	r3, [sp, #104]	; 0x68
 8005e5a:	4654      	mov	r4, sl
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e62:	4858      	ldr	r0, [pc, #352]	; (8005fc4 <_vfiprintf_r+0x24c>)
 8005e64:	f7fa f994 	bl	8000190 <memchr>
 8005e68:	9a04      	ldr	r2, [sp, #16]
 8005e6a:	b9d8      	cbnz	r0, 8005ea4 <_vfiprintf_r+0x12c>
 8005e6c:	06d1      	lsls	r1, r2, #27
 8005e6e:	bf44      	itt	mi
 8005e70:	2320      	movmi	r3, #32
 8005e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e76:	0713      	lsls	r3, r2, #28
 8005e78:	bf44      	itt	mi
 8005e7a:	232b      	movmi	r3, #43	; 0x2b
 8005e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e80:	f89a 3000 	ldrb.w	r3, [sl]
 8005e84:	2b2a      	cmp	r3, #42	; 0x2a
 8005e86:	d015      	beq.n	8005eb4 <_vfiprintf_r+0x13c>
 8005e88:	9a07      	ldr	r2, [sp, #28]
 8005e8a:	4654      	mov	r4, sl
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f04f 0c0a 	mov.w	ip, #10
 8005e92:	4621      	mov	r1, r4
 8005e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e98:	3b30      	subs	r3, #48	; 0x30
 8005e9a:	2b09      	cmp	r3, #9
 8005e9c:	d94e      	bls.n	8005f3c <_vfiprintf_r+0x1c4>
 8005e9e:	b1b0      	cbz	r0, 8005ece <_vfiprintf_r+0x156>
 8005ea0:	9207      	str	r2, [sp, #28]
 8005ea2:	e014      	b.n	8005ece <_vfiprintf_r+0x156>
 8005ea4:	eba0 0308 	sub.w	r3, r0, r8
 8005ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8005eac:	4313      	orrs	r3, r2
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	46a2      	mov	sl, r4
 8005eb2:	e7d2      	b.n	8005e5a <_vfiprintf_r+0xe2>
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	1d19      	adds	r1, r3, #4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	9103      	str	r1, [sp, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfbb      	ittet	lt
 8005ec0:	425b      	neglt	r3, r3
 8005ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec6:	9307      	strge	r3, [sp, #28]
 8005ec8:	9307      	strlt	r3, [sp, #28]
 8005eca:	bfb8      	it	lt
 8005ecc:	9204      	strlt	r2, [sp, #16]
 8005ece:	7823      	ldrb	r3, [r4, #0]
 8005ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed2:	d10c      	bne.n	8005eee <_vfiprintf_r+0x176>
 8005ed4:	7863      	ldrb	r3, [r4, #1]
 8005ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed8:	d135      	bne.n	8005f46 <_vfiprintf_r+0x1ce>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	1d1a      	adds	r2, r3, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	9203      	str	r2, [sp, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfb8      	it	lt
 8005ee6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eea:	3402      	adds	r4, #2
 8005eec:	9305      	str	r3, [sp, #20]
 8005eee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fd4 <_vfiprintf_r+0x25c>
 8005ef2:	7821      	ldrb	r1, [r4, #0]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	f7fa f94a 	bl	8000190 <memchr>
 8005efc:	b140      	cbz	r0, 8005f10 <_vfiprintf_r+0x198>
 8005efe:	2340      	movs	r3, #64	; 0x40
 8005f00:	eba0 000a 	sub.w	r0, r0, sl
 8005f04:	fa03 f000 	lsl.w	r0, r3, r0
 8005f08:	9b04      	ldr	r3, [sp, #16]
 8005f0a:	4303      	orrs	r3, r0
 8005f0c:	3401      	adds	r4, #1
 8005f0e:	9304      	str	r3, [sp, #16]
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	482c      	ldr	r0, [pc, #176]	; (8005fc8 <_vfiprintf_r+0x250>)
 8005f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f1a:	2206      	movs	r2, #6
 8005f1c:	f7fa f938 	bl	8000190 <memchr>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d03f      	beq.n	8005fa4 <_vfiprintf_r+0x22c>
 8005f24:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <_vfiprintf_r+0x254>)
 8005f26:	bb1b      	cbnz	r3, 8005f70 <_vfiprintf_r+0x1f8>
 8005f28:	9b03      	ldr	r3, [sp, #12]
 8005f2a:	3307      	adds	r3, #7
 8005f2c:	f023 0307 	bic.w	r3, r3, #7
 8005f30:	3308      	adds	r3, #8
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f36:	443b      	add	r3, r7
 8005f38:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3a:	e767      	b.n	8005e0c <_vfiprintf_r+0x94>
 8005f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f40:	460c      	mov	r4, r1
 8005f42:	2001      	movs	r0, #1
 8005f44:	e7a5      	b.n	8005e92 <_vfiprintf_r+0x11a>
 8005f46:	2300      	movs	r3, #0
 8005f48:	3401      	adds	r4, #1
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f04f 0c0a 	mov.w	ip, #10
 8005f52:	4620      	mov	r0, r4
 8005f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f58:	3a30      	subs	r2, #48	; 0x30
 8005f5a:	2a09      	cmp	r2, #9
 8005f5c:	d903      	bls.n	8005f66 <_vfiprintf_r+0x1ee>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0c5      	beq.n	8005eee <_vfiprintf_r+0x176>
 8005f62:	9105      	str	r1, [sp, #20]
 8005f64:	e7c3      	b.n	8005eee <_vfiprintf_r+0x176>
 8005f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e7f0      	b.n	8005f52 <_vfiprintf_r+0x1da>
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	462a      	mov	r2, r5
 8005f76:	4b16      	ldr	r3, [pc, #88]	; (8005fd0 <_vfiprintf_r+0x258>)
 8005f78:	a904      	add	r1, sp, #16
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f3af 8000 	nop.w
 8005f80:	4607      	mov	r7, r0
 8005f82:	1c78      	adds	r0, r7, #1
 8005f84:	d1d6      	bne.n	8005f34 <_vfiprintf_r+0x1bc>
 8005f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f88:	07d9      	lsls	r1, r3, #31
 8005f8a:	d405      	bmi.n	8005f98 <_vfiprintf_r+0x220>
 8005f8c:	89ab      	ldrh	r3, [r5, #12]
 8005f8e:	059a      	lsls	r2, r3, #22
 8005f90:	d402      	bmi.n	8005f98 <_vfiprintf_r+0x220>
 8005f92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f94:	f7ff fcd5 	bl	8005942 <__retarget_lock_release_recursive>
 8005f98:	89ab      	ldrh	r3, [r5, #12]
 8005f9a:	065b      	lsls	r3, r3, #25
 8005f9c:	f53f af12 	bmi.w	8005dc4 <_vfiprintf_r+0x4c>
 8005fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa2:	e711      	b.n	8005dc8 <_vfiprintf_r+0x50>
 8005fa4:	ab03      	add	r3, sp, #12
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	462a      	mov	r2, r5
 8005faa:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <_vfiprintf_r+0x258>)
 8005fac:	a904      	add	r1, sp, #16
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f000 f880 	bl	80060b4 <_printf_i>
 8005fb4:	e7e4      	b.n	8005f80 <_vfiprintf_r+0x208>
 8005fb6:	bf00      	nop
 8005fb8:	08006b98 	.word	0x08006b98
 8005fbc:	08006bb8 	.word	0x08006bb8
 8005fc0:	08006b78 	.word	0x08006b78
 8005fc4:	08006bd8 	.word	0x08006bd8
 8005fc8:	08006be2 	.word	0x08006be2
 8005fcc:	00000000 	.word	0x00000000
 8005fd0:	08005d53 	.word	0x08005d53
 8005fd4:	08006bde 	.word	0x08006bde

08005fd8 <_printf_common>:
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	4616      	mov	r6, r2
 8005fde:	4699      	mov	r9, r3
 8005fe0:	688a      	ldr	r2, [r1, #8]
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	bfb8      	it	lt
 8005fec:	4613      	movlt	r3, r2
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	b10a      	cbz	r2, 8005ffe <_printf_common+0x26>
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	0699      	lsls	r1, r3, #26
 8006002:	bf42      	ittt	mi
 8006004:	6833      	ldrmi	r3, [r6, #0]
 8006006:	3302      	addmi	r3, #2
 8006008:	6033      	strmi	r3, [r6, #0]
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	f015 0506 	ands.w	r5, r5, #6
 8006010:	d106      	bne.n	8006020 <_printf_common+0x48>
 8006012:	f104 0a19 	add.w	sl, r4, #25
 8006016:	68e3      	ldr	r3, [r4, #12]
 8006018:	6832      	ldr	r2, [r6, #0]
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	42ab      	cmp	r3, r5
 800601e:	dc26      	bgt.n	800606e <_printf_common+0x96>
 8006020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006024:	1e13      	subs	r3, r2, #0
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	bf18      	it	ne
 800602a:	2301      	movne	r3, #1
 800602c:	0692      	lsls	r2, r2, #26
 800602e:	d42b      	bmi.n	8006088 <_printf_common+0xb0>
 8006030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006034:	4649      	mov	r1, r9
 8006036:	4638      	mov	r0, r7
 8006038:	47c0      	blx	r8
 800603a:	3001      	adds	r0, #1
 800603c:	d01e      	beq.n	800607c <_printf_common+0xa4>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	68e5      	ldr	r5, [r4, #12]
 8006042:	6832      	ldr	r2, [r6, #0]
 8006044:	f003 0306 	and.w	r3, r3, #6
 8006048:	2b04      	cmp	r3, #4
 800604a:	bf08      	it	eq
 800604c:	1aad      	subeq	r5, r5, r2
 800604e:	68a3      	ldr	r3, [r4, #8]
 8006050:	6922      	ldr	r2, [r4, #16]
 8006052:	bf0c      	ite	eq
 8006054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006058:	2500      	movne	r5, #0
 800605a:	4293      	cmp	r3, r2
 800605c:	bfc4      	itt	gt
 800605e:	1a9b      	subgt	r3, r3, r2
 8006060:	18ed      	addgt	r5, r5, r3
 8006062:	2600      	movs	r6, #0
 8006064:	341a      	adds	r4, #26
 8006066:	42b5      	cmp	r5, r6
 8006068:	d11a      	bne.n	80060a0 <_printf_common+0xc8>
 800606a:	2000      	movs	r0, #0
 800606c:	e008      	b.n	8006080 <_printf_common+0xa8>
 800606e:	2301      	movs	r3, #1
 8006070:	4652      	mov	r2, sl
 8006072:	4649      	mov	r1, r9
 8006074:	4638      	mov	r0, r7
 8006076:	47c0      	blx	r8
 8006078:	3001      	adds	r0, #1
 800607a:	d103      	bne.n	8006084 <_printf_common+0xac>
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006084:	3501      	adds	r5, #1
 8006086:	e7c6      	b.n	8006016 <_printf_common+0x3e>
 8006088:	18e1      	adds	r1, r4, r3
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	2030      	movs	r0, #48	; 0x30
 800608e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006092:	4422      	add	r2, r4
 8006094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800609c:	3302      	adds	r3, #2
 800609e:	e7c7      	b.n	8006030 <_printf_common+0x58>
 80060a0:	2301      	movs	r3, #1
 80060a2:	4622      	mov	r2, r4
 80060a4:	4649      	mov	r1, r9
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c0      	blx	r8
 80060aa:	3001      	adds	r0, #1
 80060ac:	d0e6      	beq.n	800607c <_printf_common+0xa4>
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7d9      	b.n	8006066 <_printf_common+0x8e>
	...

080060b4 <_printf_i>:
 80060b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	7e0f      	ldrb	r7, [r1, #24]
 80060ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060bc:	2f78      	cmp	r7, #120	; 0x78
 80060be:	4691      	mov	r9, r2
 80060c0:	4680      	mov	r8, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	469a      	mov	sl, r3
 80060c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060ca:	d807      	bhi.n	80060dc <_printf_i+0x28>
 80060cc:	2f62      	cmp	r7, #98	; 0x62
 80060ce:	d80a      	bhi.n	80060e6 <_printf_i+0x32>
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	f000 80d8 	beq.w	8006286 <_printf_i+0x1d2>
 80060d6:	2f58      	cmp	r7, #88	; 0x58
 80060d8:	f000 80a3 	beq.w	8006222 <_printf_i+0x16e>
 80060dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060e4:	e03a      	b.n	800615c <_printf_i+0xa8>
 80060e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060ea:	2b15      	cmp	r3, #21
 80060ec:	d8f6      	bhi.n	80060dc <_printf_i+0x28>
 80060ee:	a101      	add	r1, pc, #4	; (adr r1, 80060f4 <_printf_i+0x40>)
 80060f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	08006161 	.word	0x08006161
 80060fc:	080060dd 	.word	0x080060dd
 8006100:	080060dd 	.word	0x080060dd
 8006104:	080060dd 	.word	0x080060dd
 8006108:	080060dd 	.word	0x080060dd
 800610c:	08006161 	.word	0x08006161
 8006110:	080060dd 	.word	0x080060dd
 8006114:	080060dd 	.word	0x080060dd
 8006118:	080060dd 	.word	0x080060dd
 800611c:	080060dd 	.word	0x080060dd
 8006120:	0800626d 	.word	0x0800626d
 8006124:	08006191 	.word	0x08006191
 8006128:	0800624f 	.word	0x0800624f
 800612c:	080060dd 	.word	0x080060dd
 8006130:	080060dd 	.word	0x080060dd
 8006134:	0800628f 	.word	0x0800628f
 8006138:	080060dd 	.word	0x080060dd
 800613c:	08006191 	.word	0x08006191
 8006140:	080060dd 	.word	0x080060dd
 8006144:	080060dd 	.word	0x080060dd
 8006148:	08006257 	.word	0x08006257
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	602a      	str	r2, [r5, #0]
 8006154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800615c:	2301      	movs	r3, #1
 800615e:	e0a3      	b.n	80062a8 <_printf_i+0x1f4>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	6829      	ldr	r1, [r5, #0]
 8006164:	0606      	lsls	r6, r0, #24
 8006166:	f101 0304 	add.w	r3, r1, #4
 800616a:	d50a      	bpl.n	8006182 <_printf_i+0xce>
 800616c:	680e      	ldr	r6, [r1, #0]
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	2e00      	cmp	r6, #0
 8006172:	da03      	bge.n	800617c <_printf_i+0xc8>
 8006174:	232d      	movs	r3, #45	; 0x2d
 8006176:	4276      	negs	r6, r6
 8006178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617c:	485e      	ldr	r0, [pc, #376]	; (80062f8 <_printf_i+0x244>)
 800617e:	230a      	movs	r3, #10
 8006180:	e019      	b.n	80061b6 <_printf_i+0x102>
 8006182:	680e      	ldr	r6, [r1, #0]
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	f010 0f40 	tst.w	r0, #64	; 0x40
 800618a:	bf18      	it	ne
 800618c:	b236      	sxthne	r6, r6
 800618e:	e7ef      	b.n	8006170 <_printf_i+0xbc>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	1d19      	adds	r1, r3, #4
 8006196:	6029      	str	r1, [r5, #0]
 8006198:	0601      	lsls	r1, r0, #24
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0xec>
 800619c:	681e      	ldr	r6, [r3, #0]
 800619e:	e002      	b.n	80061a6 <_printf_i+0xf2>
 80061a0:	0646      	lsls	r6, r0, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0xe8>
 80061a4:	881e      	ldrh	r6, [r3, #0]
 80061a6:	4854      	ldr	r0, [pc, #336]	; (80062f8 <_printf_i+0x244>)
 80061a8:	2f6f      	cmp	r7, #111	; 0x6f
 80061aa:	bf0c      	ite	eq
 80061ac:	2308      	moveq	r3, #8
 80061ae:	230a      	movne	r3, #10
 80061b0:	2100      	movs	r1, #0
 80061b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061b6:	6865      	ldr	r5, [r4, #4]
 80061b8:	60a5      	str	r5, [r4, #8]
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	bfa2      	ittt	ge
 80061be:	6821      	ldrge	r1, [r4, #0]
 80061c0:	f021 0104 	bicge.w	r1, r1, #4
 80061c4:	6021      	strge	r1, [r4, #0]
 80061c6:	b90e      	cbnz	r6, 80061cc <_printf_i+0x118>
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	d04d      	beq.n	8006268 <_printf_i+0x1b4>
 80061cc:	4615      	mov	r5, r2
 80061ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80061d2:	fb03 6711 	mls	r7, r3, r1, r6
 80061d6:	5dc7      	ldrb	r7, [r0, r7]
 80061d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061dc:	4637      	mov	r7, r6
 80061de:	42bb      	cmp	r3, r7
 80061e0:	460e      	mov	r6, r1
 80061e2:	d9f4      	bls.n	80061ce <_printf_i+0x11a>
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d10b      	bne.n	8006200 <_printf_i+0x14c>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	07de      	lsls	r6, r3, #31
 80061ec:	d508      	bpl.n	8006200 <_printf_i+0x14c>
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	6861      	ldr	r1, [r4, #4]
 80061f2:	4299      	cmp	r1, r3
 80061f4:	bfde      	ittt	le
 80061f6:	2330      	movle	r3, #48	; 0x30
 80061f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006200:	1b52      	subs	r2, r2, r5
 8006202:	6122      	str	r2, [r4, #16]
 8006204:	f8cd a000 	str.w	sl, [sp]
 8006208:	464b      	mov	r3, r9
 800620a:	aa03      	add	r2, sp, #12
 800620c:	4621      	mov	r1, r4
 800620e:	4640      	mov	r0, r8
 8006210:	f7ff fee2 	bl	8005fd8 <_printf_common>
 8006214:	3001      	adds	r0, #1
 8006216:	d14c      	bne.n	80062b2 <_printf_i+0x1fe>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	b004      	add	sp, #16
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	4835      	ldr	r0, [pc, #212]	; (80062f8 <_printf_i+0x244>)
 8006224:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006228:	6829      	ldr	r1, [r5, #0]
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006230:	6029      	str	r1, [r5, #0]
 8006232:	061d      	lsls	r5, r3, #24
 8006234:	d514      	bpl.n	8006260 <_printf_i+0x1ac>
 8006236:	07df      	lsls	r7, r3, #31
 8006238:	bf44      	itt	mi
 800623a:	f043 0320 	orrmi.w	r3, r3, #32
 800623e:	6023      	strmi	r3, [r4, #0]
 8006240:	b91e      	cbnz	r6, 800624a <_printf_i+0x196>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	f023 0320 	bic.w	r3, r3, #32
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	2310      	movs	r3, #16
 800624c:	e7b0      	b.n	80061b0 <_printf_i+0xfc>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	f043 0320 	orr.w	r3, r3, #32
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	2378      	movs	r3, #120	; 0x78
 8006258:	4828      	ldr	r0, [pc, #160]	; (80062fc <_printf_i+0x248>)
 800625a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800625e:	e7e3      	b.n	8006228 <_printf_i+0x174>
 8006260:	0659      	lsls	r1, r3, #25
 8006262:	bf48      	it	mi
 8006264:	b2b6      	uxthmi	r6, r6
 8006266:	e7e6      	b.n	8006236 <_printf_i+0x182>
 8006268:	4615      	mov	r5, r2
 800626a:	e7bb      	b.n	80061e4 <_printf_i+0x130>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	6826      	ldr	r6, [r4, #0]
 8006270:	6961      	ldr	r1, [r4, #20]
 8006272:	1d18      	adds	r0, r3, #4
 8006274:	6028      	str	r0, [r5, #0]
 8006276:	0635      	lsls	r5, r6, #24
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	d501      	bpl.n	8006280 <_printf_i+0x1cc>
 800627c:	6019      	str	r1, [r3, #0]
 800627e:	e002      	b.n	8006286 <_printf_i+0x1d2>
 8006280:	0670      	lsls	r0, r6, #25
 8006282:	d5fb      	bpl.n	800627c <_printf_i+0x1c8>
 8006284:	8019      	strh	r1, [r3, #0]
 8006286:	2300      	movs	r3, #0
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	4615      	mov	r5, r2
 800628c:	e7ba      	b.n	8006204 <_printf_i+0x150>
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	1d1a      	adds	r2, r3, #4
 8006292:	602a      	str	r2, [r5, #0]
 8006294:	681d      	ldr	r5, [r3, #0]
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	2100      	movs	r1, #0
 800629a:	4628      	mov	r0, r5
 800629c:	f7f9 ff78 	bl	8000190 <memchr>
 80062a0:	b108      	cbz	r0, 80062a6 <_printf_i+0x1f2>
 80062a2:	1b40      	subs	r0, r0, r5
 80062a4:	6060      	str	r0, [r4, #4]
 80062a6:	6863      	ldr	r3, [r4, #4]
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	2300      	movs	r3, #0
 80062ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b0:	e7a8      	b.n	8006204 <_printf_i+0x150>
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	462a      	mov	r2, r5
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	47d0      	blx	sl
 80062bc:	3001      	adds	r0, #1
 80062be:	d0ab      	beq.n	8006218 <_printf_i+0x164>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	079b      	lsls	r3, r3, #30
 80062c4:	d413      	bmi.n	80062ee <_printf_i+0x23a>
 80062c6:	68e0      	ldr	r0, [r4, #12]
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	4298      	cmp	r0, r3
 80062cc:	bfb8      	it	lt
 80062ce:	4618      	movlt	r0, r3
 80062d0:	e7a4      	b.n	800621c <_printf_i+0x168>
 80062d2:	2301      	movs	r3, #1
 80062d4:	4632      	mov	r2, r6
 80062d6:	4649      	mov	r1, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	47d0      	blx	sl
 80062dc:	3001      	adds	r0, #1
 80062de:	d09b      	beq.n	8006218 <_printf_i+0x164>
 80062e0:	3501      	adds	r5, #1
 80062e2:	68e3      	ldr	r3, [r4, #12]
 80062e4:	9903      	ldr	r1, [sp, #12]
 80062e6:	1a5b      	subs	r3, r3, r1
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	dcf2      	bgt.n	80062d2 <_printf_i+0x21e>
 80062ec:	e7eb      	b.n	80062c6 <_printf_i+0x212>
 80062ee:	2500      	movs	r5, #0
 80062f0:	f104 0619 	add.w	r6, r4, #25
 80062f4:	e7f5      	b.n	80062e2 <_printf_i+0x22e>
 80062f6:	bf00      	nop
 80062f8:	08006be9 	.word	0x08006be9
 80062fc:	08006bfa 	.word	0x08006bfa

08006300 <_sbrk_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4d06      	ldr	r5, [pc, #24]	; (800631c <_sbrk_r+0x1c>)
 8006304:	2300      	movs	r3, #0
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	602b      	str	r3, [r5, #0]
 800630c:	f7fb f8ee 	bl	80014ec <_sbrk>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_sbrk_r+0x1a>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_sbrk_r+0x1a>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20000498 	.word	0x20000498

08006320 <__sread>:
 8006320:	b510      	push	{r4, lr}
 8006322:	460c      	mov	r4, r1
 8006324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006328:	f000 fb0a 	bl	8006940 <_read_r>
 800632c:	2800      	cmp	r0, #0
 800632e:	bfab      	itete	ge
 8006330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006332:	89a3      	ldrhlt	r3, [r4, #12]
 8006334:	181b      	addge	r3, r3, r0
 8006336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800633a:	bfac      	ite	ge
 800633c:	6563      	strge	r3, [r4, #84]	; 0x54
 800633e:	81a3      	strhlt	r3, [r4, #12]
 8006340:	bd10      	pop	{r4, pc}

08006342 <__swrite>:
 8006342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006346:	461f      	mov	r7, r3
 8006348:	898b      	ldrh	r3, [r1, #12]
 800634a:	05db      	lsls	r3, r3, #23
 800634c:	4605      	mov	r5, r0
 800634e:	460c      	mov	r4, r1
 8006350:	4616      	mov	r6, r2
 8006352:	d505      	bpl.n	8006360 <__swrite+0x1e>
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	2302      	movs	r3, #2
 800635a:	2200      	movs	r2, #0
 800635c:	f000 f9c8 	bl	80066f0 <_lseek_r>
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	4632      	mov	r2, r6
 800636e:	463b      	mov	r3, r7
 8006370:	4628      	mov	r0, r5
 8006372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006376:	f000 b869 	b.w	800644c <_write_r>

0800637a <__sseek>:
 800637a:	b510      	push	{r4, lr}
 800637c:	460c      	mov	r4, r1
 800637e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006382:	f000 f9b5 	bl	80066f0 <_lseek_r>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	bf15      	itete	ne
 800638c:	6560      	strne	r0, [r4, #84]	; 0x54
 800638e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006396:	81a3      	strheq	r3, [r4, #12]
 8006398:	bf18      	it	ne
 800639a:	81a3      	strhne	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__sclose>:
 800639e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a2:	f000 b8d3 	b.w	800654c <_close_r>
	...

080063a8 <__swbuf_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	460e      	mov	r6, r1
 80063ac:	4614      	mov	r4, r2
 80063ae:	4605      	mov	r5, r0
 80063b0:	b118      	cbz	r0, 80063ba <__swbuf_r+0x12>
 80063b2:	6983      	ldr	r3, [r0, #24]
 80063b4:	b90b      	cbnz	r3, 80063ba <__swbuf_r+0x12>
 80063b6:	f7ff fa25 	bl	8005804 <__sinit>
 80063ba:	4b21      	ldr	r3, [pc, #132]	; (8006440 <__swbuf_r+0x98>)
 80063bc:	429c      	cmp	r4, r3
 80063be:	d12b      	bne.n	8006418 <__swbuf_r+0x70>
 80063c0:	686c      	ldr	r4, [r5, #4]
 80063c2:	69a3      	ldr	r3, [r4, #24]
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	071a      	lsls	r2, r3, #28
 80063ca:	d52f      	bpl.n	800642c <__swbuf_r+0x84>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	b36b      	cbz	r3, 800642c <__swbuf_r+0x84>
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	6820      	ldr	r0, [r4, #0]
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	6963      	ldr	r3, [r4, #20]
 80063d8:	b2f6      	uxtb	r6, r6
 80063da:	4283      	cmp	r3, r0
 80063dc:	4637      	mov	r7, r6
 80063de:	dc04      	bgt.n	80063ea <__swbuf_r+0x42>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 f948 	bl	8006678 <_fflush_r>
 80063e8:	bb30      	cbnz	r0, 8006438 <__swbuf_r+0x90>
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	60a3      	str	r3, [r4, #8]
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	6022      	str	r2, [r4, #0]
 80063f6:	701e      	strb	r6, [r3, #0]
 80063f8:	6963      	ldr	r3, [r4, #20]
 80063fa:	3001      	adds	r0, #1
 80063fc:	4283      	cmp	r3, r0
 80063fe:	d004      	beq.n	800640a <__swbuf_r+0x62>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	07db      	lsls	r3, r3, #31
 8006404:	d506      	bpl.n	8006414 <__swbuf_r+0x6c>
 8006406:	2e0a      	cmp	r6, #10
 8006408:	d104      	bne.n	8006414 <__swbuf_r+0x6c>
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 f933 	bl	8006678 <_fflush_r>
 8006412:	b988      	cbnz	r0, 8006438 <__swbuf_r+0x90>
 8006414:	4638      	mov	r0, r7
 8006416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <__swbuf_r+0x9c>)
 800641a:	429c      	cmp	r4, r3
 800641c:	d101      	bne.n	8006422 <__swbuf_r+0x7a>
 800641e:	68ac      	ldr	r4, [r5, #8]
 8006420:	e7cf      	b.n	80063c2 <__swbuf_r+0x1a>
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <__swbuf_r+0xa0>)
 8006424:	429c      	cmp	r4, r3
 8006426:	bf08      	it	eq
 8006428:	68ec      	ldreq	r4, [r5, #12]
 800642a:	e7ca      	b.n	80063c2 <__swbuf_r+0x1a>
 800642c:	4621      	mov	r1, r4
 800642e:	4628      	mov	r0, r5
 8006430:	f000 f81e 	bl	8006470 <__swsetup_r>
 8006434:	2800      	cmp	r0, #0
 8006436:	d0cb      	beq.n	80063d0 <__swbuf_r+0x28>
 8006438:	f04f 37ff 	mov.w	r7, #4294967295
 800643c:	e7ea      	b.n	8006414 <__swbuf_r+0x6c>
 800643e:	bf00      	nop
 8006440:	08006b98 	.word	0x08006b98
 8006444:	08006bb8 	.word	0x08006bb8
 8006448:	08006b78 	.word	0x08006b78

0800644c <_write_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d07      	ldr	r5, [pc, #28]	; (800646c <_write_r+0x20>)
 8006450:	4604      	mov	r4, r0
 8006452:	4608      	mov	r0, r1
 8006454:	4611      	mov	r1, r2
 8006456:	2200      	movs	r2, #0
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	f7fa fff5 	bl	800144a <_write>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_write_r+0x1e>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_write_r+0x1e>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000498 	.word	0x20000498

08006470 <__swsetup_r>:
 8006470:	4b32      	ldr	r3, [pc, #200]	; (800653c <__swsetup_r+0xcc>)
 8006472:	b570      	push	{r4, r5, r6, lr}
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	4606      	mov	r6, r0
 8006478:	460c      	mov	r4, r1
 800647a:	b125      	cbz	r5, 8006486 <__swsetup_r+0x16>
 800647c:	69ab      	ldr	r3, [r5, #24]
 800647e:	b913      	cbnz	r3, 8006486 <__swsetup_r+0x16>
 8006480:	4628      	mov	r0, r5
 8006482:	f7ff f9bf 	bl	8005804 <__sinit>
 8006486:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <__swsetup_r+0xd0>)
 8006488:	429c      	cmp	r4, r3
 800648a:	d10f      	bne.n	80064ac <__swsetup_r+0x3c>
 800648c:	686c      	ldr	r4, [r5, #4]
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006494:	0719      	lsls	r1, r3, #28
 8006496:	d42c      	bmi.n	80064f2 <__swsetup_r+0x82>
 8006498:	06dd      	lsls	r5, r3, #27
 800649a:	d411      	bmi.n	80064c0 <__swsetup_r+0x50>
 800649c:	2309      	movs	r3, #9
 800649e:	6033      	str	r3, [r6, #0]
 80064a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	e03e      	b.n	800652a <__swsetup_r+0xba>
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <__swsetup_r+0xd4>)
 80064ae:	429c      	cmp	r4, r3
 80064b0:	d101      	bne.n	80064b6 <__swsetup_r+0x46>
 80064b2:	68ac      	ldr	r4, [r5, #8]
 80064b4:	e7eb      	b.n	800648e <__swsetup_r+0x1e>
 80064b6:	4b24      	ldr	r3, [pc, #144]	; (8006548 <__swsetup_r+0xd8>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	bf08      	it	eq
 80064bc:	68ec      	ldreq	r4, [r5, #12]
 80064be:	e7e6      	b.n	800648e <__swsetup_r+0x1e>
 80064c0:	0758      	lsls	r0, r3, #29
 80064c2:	d512      	bpl.n	80064ea <__swsetup_r+0x7a>
 80064c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c6:	b141      	cbz	r1, 80064da <__swsetup_r+0x6a>
 80064c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__swsetup_r+0x66>
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 f9b9 	bl	8006848 <_free_r>
 80064d6:	2300      	movs	r3, #0
 80064d8:	6363      	str	r3, [r4, #52]	; 0x34
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	2300      	movs	r3, #0
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0308 	orr.w	r3, r3, #8
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	b94b      	cbnz	r3, 800650a <__swsetup_r+0x9a>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d003      	beq.n	800650a <__swsetup_r+0x9a>
 8006502:	4621      	mov	r1, r4
 8006504:	4630      	mov	r0, r6
 8006506:	f000 f92b 	bl	8006760 <__smakebuf_r>
 800650a:	89a0      	ldrh	r0, [r4, #12]
 800650c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006510:	f010 0301 	ands.w	r3, r0, #1
 8006514:	d00a      	beq.n	800652c <__swsetup_r+0xbc>
 8006516:	2300      	movs	r3, #0
 8006518:	60a3      	str	r3, [r4, #8]
 800651a:	6963      	ldr	r3, [r4, #20]
 800651c:	425b      	negs	r3, r3
 800651e:	61a3      	str	r3, [r4, #24]
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	b943      	cbnz	r3, 8006536 <__swsetup_r+0xc6>
 8006524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006528:	d1ba      	bne.n	80064a0 <__swsetup_r+0x30>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	0781      	lsls	r1, r0, #30
 800652e:	bf58      	it	pl
 8006530:	6963      	ldrpl	r3, [r4, #20]
 8006532:	60a3      	str	r3, [r4, #8]
 8006534:	e7f4      	b.n	8006520 <__swsetup_r+0xb0>
 8006536:	2000      	movs	r0, #0
 8006538:	e7f7      	b.n	800652a <__swsetup_r+0xba>
 800653a:	bf00      	nop
 800653c:	20000014 	.word	0x20000014
 8006540:	08006b98 	.word	0x08006b98
 8006544:	08006bb8 	.word	0x08006bb8
 8006548:	08006b78 	.word	0x08006b78

0800654c <_close_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d06      	ldr	r5, [pc, #24]	; (8006568 <_close_r+0x1c>)
 8006550:	2300      	movs	r3, #0
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fa ff93 	bl	8001482 <_close>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_close_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_close_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	20000498 	.word	0x20000498

0800656c <__sflush_r>:
 800656c:	898a      	ldrh	r2, [r1, #12]
 800656e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	4605      	mov	r5, r0
 8006574:	0710      	lsls	r0, r2, #28
 8006576:	460c      	mov	r4, r1
 8006578:	d458      	bmi.n	800662c <__sflush_r+0xc0>
 800657a:	684b      	ldr	r3, [r1, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	dc05      	bgt.n	800658c <__sflush_r+0x20>
 8006580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	dc02      	bgt.n	800658c <__sflush_r+0x20>
 8006586:	2000      	movs	r0, #0
 8006588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800658c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800658e:	2e00      	cmp	r6, #0
 8006590:	d0f9      	beq.n	8006586 <__sflush_r+0x1a>
 8006592:	2300      	movs	r3, #0
 8006594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006598:	682f      	ldr	r7, [r5, #0]
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	d032      	beq.n	8006604 <__sflush_r+0x98>
 800659e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	075a      	lsls	r2, r3, #29
 80065a4:	d505      	bpl.n	80065b2 <__sflush_r+0x46>
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	1ac0      	subs	r0, r0, r3
 80065aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065ac:	b10b      	cbz	r3, 80065b2 <__sflush_r+0x46>
 80065ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065b0:	1ac0      	subs	r0, r0, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	4602      	mov	r2, r0
 80065b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065b8:	6a21      	ldr	r1, [r4, #32]
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b0      	blx	r6
 80065be:	1c43      	adds	r3, r0, #1
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	d106      	bne.n	80065d2 <__sflush_r+0x66>
 80065c4:	6829      	ldr	r1, [r5, #0]
 80065c6:	291d      	cmp	r1, #29
 80065c8:	d82c      	bhi.n	8006624 <__sflush_r+0xb8>
 80065ca:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <__sflush_r+0x108>)
 80065cc:	40ca      	lsrs	r2, r1
 80065ce:	07d6      	lsls	r6, r2, #31
 80065d0:	d528      	bpl.n	8006624 <__sflush_r+0xb8>
 80065d2:	2200      	movs	r2, #0
 80065d4:	6062      	str	r2, [r4, #4]
 80065d6:	04d9      	lsls	r1, r3, #19
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	d504      	bpl.n	80065e8 <__sflush_r+0x7c>
 80065de:	1c42      	adds	r2, r0, #1
 80065e0:	d101      	bne.n	80065e6 <__sflush_r+0x7a>
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	b903      	cbnz	r3, 80065e8 <__sflush_r+0x7c>
 80065e6:	6560      	str	r0, [r4, #84]	; 0x54
 80065e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ea:	602f      	str	r7, [r5, #0]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d0ca      	beq.n	8006586 <__sflush_r+0x1a>
 80065f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065f4:	4299      	cmp	r1, r3
 80065f6:	d002      	beq.n	80065fe <__sflush_r+0x92>
 80065f8:	4628      	mov	r0, r5
 80065fa:	f000 f925 	bl	8006848 <_free_r>
 80065fe:	2000      	movs	r0, #0
 8006600:	6360      	str	r0, [r4, #52]	; 0x34
 8006602:	e7c1      	b.n	8006588 <__sflush_r+0x1c>
 8006604:	6a21      	ldr	r1, [r4, #32]
 8006606:	2301      	movs	r3, #1
 8006608:	4628      	mov	r0, r5
 800660a:	47b0      	blx	r6
 800660c:	1c41      	adds	r1, r0, #1
 800660e:	d1c7      	bne.n	80065a0 <__sflush_r+0x34>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0c4      	beq.n	80065a0 <__sflush_r+0x34>
 8006616:	2b1d      	cmp	r3, #29
 8006618:	d001      	beq.n	800661e <__sflush_r+0xb2>
 800661a:	2b16      	cmp	r3, #22
 800661c:	d101      	bne.n	8006622 <__sflush_r+0xb6>
 800661e:	602f      	str	r7, [r5, #0]
 8006620:	e7b1      	b.n	8006586 <__sflush_r+0x1a>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	e7ad      	b.n	8006588 <__sflush_r+0x1c>
 800662c:	690f      	ldr	r7, [r1, #16]
 800662e:	2f00      	cmp	r7, #0
 8006630:	d0a9      	beq.n	8006586 <__sflush_r+0x1a>
 8006632:	0793      	lsls	r3, r2, #30
 8006634:	680e      	ldr	r6, [r1, #0]
 8006636:	bf08      	it	eq
 8006638:	694b      	ldreq	r3, [r1, #20]
 800663a:	600f      	str	r7, [r1, #0]
 800663c:	bf18      	it	ne
 800663e:	2300      	movne	r3, #0
 8006640:	eba6 0807 	sub.w	r8, r6, r7
 8006644:	608b      	str	r3, [r1, #8]
 8006646:	f1b8 0f00 	cmp.w	r8, #0
 800664a:	dd9c      	ble.n	8006586 <__sflush_r+0x1a>
 800664c:	6a21      	ldr	r1, [r4, #32]
 800664e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006650:	4643      	mov	r3, r8
 8006652:	463a      	mov	r2, r7
 8006654:	4628      	mov	r0, r5
 8006656:	47b0      	blx	r6
 8006658:	2800      	cmp	r0, #0
 800665a:	dc06      	bgt.n	800666a <__sflush_r+0xfe>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006662:	81a3      	strh	r3, [r4, #12]
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	e78e      	b.n	8006588 <__sflush_r+0x1c>
 800666a:	4407      	add	r7, r0
 800666c:	eba8 0800 	sub.w	r8, r8, r0
 8006670:	e7e9      	b.n	8006646 <__sflush_r+0xda>
 8006672:	bf00      	nop
 8006674:	20400001 	.word	0x20400001

08006678 <_fflush_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	690b      	ldr	r3, [r1, #16]
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	b913      	cbnz	r3, 8006688 <_fflush_r+0x10>
 8006682:	2500      	movs	r5, #0
 8006684:	4628      	mov	r0, r5
 8006686:	bd38      	pop	{r3, r4, r5, pc}
 8006688:	b118      	cbz	r0, 8006692 <_fflush_r+0x1a>
 800668a:	6983      	ldr	r3, [r0, #24]
 800668c:	b90b      	cbnz	r3, 8006692 <_fflush_r+0x1a>
 800668e:	f7ff f8b9 	bl	8005804 <__sinit>
 8006692:	4b14      	ldr	r3, [pc, #80]	; (80066e4 <_fflush_r+0x6c>)
 8006694:	429c      	cmp	r4, r3
 8006696:	d11b      	bne.n	80066d0 <_fflush_r+0x58>
 8006698:	686c      	ldr	r4, [r5, #4]
 800669a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0ef      	beq.n	8006682 <_fflush_r+0xa>
 80066a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066a4:	07d0      	lsls	r0, r2, #31
 80066a6:	d404      	bmi.n	80066b2 <_fflush_r+0x3a>
 80066a8:	0599      	lsls	r1, r3, #22
 80066aa:	d402      	bmi.n	80066b2 <_fflush_r+0x3a>
 80066ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ae:	f7ff f947 	bl	8005940 <__retarget_lock_acquire_recursive>
 80066b2:	4628      	mov	r0, r5
 80066b4:	4621      	mov	r1, r4
 80066b6:	f7ff ff59 	bl	800656c <__sflush_r>
 80066ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066bc:	07da      	lsls	r2, r3, #31
 80066be:	4605      	mov	r5, r0
 80066c0:	d4e0      	bmi.n	8006684 <_fflush_r+0xc>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	059b      	lsls	r3, r3, #22
 80066c6:	d4dd      	bmi.n	8006684 <_fflush_r+0xc>
 80066c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ca:	f7ff f93a 	bl	8005942 <__retarget_lock_release_recursive>
 80066ce:	e7d9      	b.n	8006684 <_fflush_r+0xc>
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <_fflush_r+0x70>)
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d101      	bne.n	80066da <_fflush_r+0x62>
 80066d6:	68ac      	ldr	r4, [r5, #8]
 80066d8:	e7df      	b.n	800669a <_fflush_r+0x22>
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <_fflush_r+0x74>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	bf08      	it	eq
 80066e0:	68ec      	ldreq	r4, [r5, #12]
 80066e2:	e7da      	b.n	800669a <_fflush_r+0x22>
 80066e4:	08006b98 	.word	0x08006b98
 80066e8:	08006bb8 	.word	0x08006bb8
 80066ec:	08006b78 	.word	0x08006b78

080066f0 <_lseek_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_lseek_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fa fee6 	bl	80014d0 <_lseek>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_lseek_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_lseek_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000498 	.word	0x20000498

08006714 <__swhatbuf_r>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	460e      	mov	r6, r1
 8006718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671c:	2900      	cmp	r1, #0
 800671e:	b096      	sub	sp, #88	; 0x58
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	da08      	bge.n	8006738 <__swhatbuf_r+0x24>
 8006726:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	061a      	lsls	r2, r3, #24
 8006730:	d410      	bmi.n	8006754 <__swhatbuf_r+0x40>
 8006732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006736:	e00e      	b.n	8006756 <__swhatbuf_r+0x42>
 8006738:	466a      	mov	r2, sp
 800673a:	f000 f913 	bl	8006964 <_fstat_r>
 800673e:	2800      	cmp	r0, #0
 8006740:	dbf1      	blt.n	8006726 <__swhatbuf_r+0x12>
 8006742:	9a01      	ldr	r2, [sp, #4]
 8006744:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006748:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800674c:	425a      	negs	r2, r3
 800674e:	415a      	adcs	r2, r3
 8006750:	602a      	str	r2, [r5, #0]
 8006752:	e7ee      	b.n	8006732 <__swhatbuf_r+0x1e>
 8006754:	2340      	movs	r3, #64	; 0x40
 8006756:	2000      	movs	r0, #0
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	b016      	add	sp, #88	; 0x58
 800675c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006760 <__smakebuf_r>:
 8006760:	898b      	ldrh	r3, [r1, #12]
 8006762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006764:	079d      	lsls	r5, r3, #30
 8006766:	4606      	mov	r6, r0
 8006768:	460c      	mov	r4, r1
 800676a:	d507      	bpl.n	800677c <__smakebuf_r+0x1c>
 800676c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	2301      	movs	r3, #1
 8006776:	6163      	str	r3, [r4, #20]
 8006778:	b002      	add	sp, #8
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	ab01      	add	r3, sp, #4
 800677e:	466a      	mov	r2, sp
 8006780:	f7ff ffc8 	bl	8006714 <__swhatbuf_r>
 8006784:	9900      	ldr	r1, [sp, #0]
 8006786:	4605      	mov	r5, r0
 8006788:	4630      	mov	r0, r6
 800678a:	f7ff f8fb 	bl	8005984 <_malloc_r>
 800678e:	b948      	cbnz	r0, 80067a4 <__smakebuf_r+0x44>
 8006790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006794:	059a      	lsls	r2, r3, #22
 8006796:	d4ef      	bmi.n	8006778 <__smakebuf_r+0x18>
 8006798:	f023 0303 	bic.w	r3, r3, #3
 800679c:	f043 0302 	orr.w	r3, r3, #2
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	e7e3      	b.n	800676c <__smakebuf_r+0xc>
 80067a4:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <__smakebuf_r+0x7c>)
 80067a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	6020      	str	r0, [r4, #0]
 80067ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	9b00      	ldr	r3, [sp, #0]
 80067b4:	6163      	str	r3, [r4, #20]
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	6120      	str	r0, [r4, #16]
 80067ba:	b15b      	cbz	r3, 80067d4 <__smakebuf_r+0x74>
 80067bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 f8e1 	bl	8006988 <_isatty_r>
 80067c6:	b128      	cbz	r0, 80067d4 <__smakebuf_r+0x74>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	89a0      	ldrh	r0, [r4, #12]
 80067d6:	4305      	orrs	r5, r0
 80067d8:	81a5      	strh	r5, [r4, #12]
 80067da:	e7cd      	b.n	8006778 <__smakebuf_r+0x18>
 80067dc:	0800579d 	.word	0x0800579d

080067e0 <memcpy>:
 80067e0:	440a      	add	r2, r1
 80067e2:	4291      	cmp	r1, r2
 80067e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e8:	d100      	bne.n	80067ec <memcpy+0xc>
 80067ea:	4770      	bx	lr
 80067ec:	b510      	push	{r4, lr}
 80067ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f6:	4291      	cmp	r1, r2
 80067f8:	d1f9      	bne.n	80067ee <memcpy+0xe>
 80067fa:	bd10      	pop	{r4, pc}

080067fc <memmove>:
 80067fc:	4288      	cmp	r0, r1
 80067fe:	b510      	push	{r4, lr}
 8006800:	eb01 0402 	add.w	r4, r1, r2
 8006804:	d902      	bls.n	800680c <memmove+0x10>
 8006806:	4284      	cmp	r4, r0
 8006808:	4623      	mov	r3, r4
 800680a:	d807      	bhi.n	800681c <memmove+0x20>
 800680c:	1e43      	subs	r3, r0, #1
 800680e:	42a1      	cmp	r1, r4
 8006810:	d008      	beq.n	8006824 <memmove+0x28>
 8006812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800681a:	e7f8      	b.n	800680e <memmove+0x12>
 800681c:	4402      	add	r2, r0
 800681e:	4601      	mov	r1, r0
 8006820:	428a      	cmp	r2, r1
 8006822:	d100      	bne.n	8006826 <memmove+0x2a>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800682a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800682e:	e7f7      	b.n	8006820 <memmove+0x24>

08006830 <__malloc_lock>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__malloc_lock+0x8>)
 8006832:	f7ff b885 	b.w	8005940 <__retarget_lock_acquire_recursive>
 8006836:	bf00      	nop
 8006838:	2000048c 	.word	0x2000048c

0800683c <__malloc_unlock>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__malloc_unlock+0x8>)
 800683e:	f7ff b880 	b.w	8005942 <__retarget_lock_release_recursive>
 8006842:	bf00      	nop
 8006844:	2000048c 	.word	0x2000048c

08006848 <_free_r>:
 8006848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800684a:	2900      	cmp	r1, #0
 800684c:	d044      	beq.n	80068d8 <_free_r+0x90>
 800684e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006852:	9001      	str	r0, [sp, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f1a1 0404 	sub.w	r4, r1, #4
 800685a:	bfb8      	it	lt
 800685c:	18e4      	addlt	r4, r4, r3
 800685e:	f7ff ffe7 	bl	8006830 <__malloc_lock>
 8006862:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <_free_r+0x94>)
 8006864:	9801      	ldr	r0, [sp, #4]
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	b933      	cbnz	r3, 8006878 <_free_r+0x30>
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	6014      	str	r4, [r2, #0]
 800686e:	b003      	add	sp, #12
 8006870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006874:	f7ff bfe2 	b.w	800683c <__malloc_unlock>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d908      	bls.n	800688e <_free_r+0x46>
 800687c:	6825      	ldr	r5, [r4, #0]
 800687e:	1961      	adds	r1, r4, r5
 8006880:	428b      	cmp	r3, r1
 8006882:	bf01      	itttt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	1949      	addeq	r1, r1, r5
 800688a:	6021      	streq	r1, [r4, #0]
 800688c:	e7ed      	b.n	800686a <_free_r+0x22>
 800688e:	461a      	mov	r2, r3
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	b10b      	cbz	r3, 8006898 <_free_r+0x50>
 8006894:	42a3      	cmp	r3, r4
 8006896:	d9fa      	bls.n	800688e <_free_r+0x46>
 8006898:	6811      	ldr	r1, [r2, #0]
 800689a:	1855      	adds	r5, r2, r1
 800689c:	42a5      	cmp	r5, r4
 800689e:	d10b      	bne.n	80068b8 <_free_r+0x70>
 80068a0:	6824      	ldr	r4, [r4, #0]
 80068a2:	4421      	add	r1, r4
 80068a4:	1854      	adds	r4, r2, r1
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	6011      	str	r1, [r2, #0]
 80068aa:	d1e0      	bne.n	800686e <_free_r+0x26>
 80068ac:	681c      	ldr	r4, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	6053      	str	r3, [r2, #4]
 80068b2:	4421      	add	r1, r4
 80068b4:	6011      	str	r1, [r2, #0]
 80068b6:	e7da      	b.n	800686e <_free_r+0x26>
 80068b8:	d902      	bls.n	80068c0 <_free_r+0x78>
 80068ba:	230c      	movs	r3, #12
 80068bc:	6003      	str	r3, [r0, #0]
 80068be:	e7d6      	b.n	800686e <_free_r+0x26>
 80068c0:	6825      	ldr	r5, [r4, #0]
 80068c2:	1961      	adds	r1, r4, r5
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf04      	itt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	6063      	str	r3, [r4, #4]
 80068ce:	bf04      	itt	eq
 80068d0:	1949      	addeq	r1, r1, r5
 80068d2:	6021      	streq	r1, [r4, #0]
 80068d4:	6054      	str	r4, [r2, #4]
 80068d6:	e7ca      	b.n	800686e <_free_r+0x26>
 80068d8:	b003      	add	sp, #12
 80068da:	bd30      	pop	{r4, r5, pc}
 80068dc:	20000490 	.word	0x20000490

080068e0 <_realloc_r>:
 80068e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e4:	4680      	mov	r8, r0
 80068e6:	4614      	mov	r4, r2
 80068e8:	460e      	mov	r6, r1
 80068ea:	b921      	cbnz	r1, 80068f6 <_realloc_r+0x16>
 80068ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f0:	4611      	mov	r1, r2
 80068f2:	f7ff b847 	b.w	8005984 <_malloc_r>
 80068f6:	b92a      	cbnz	r2, 8006904 <_realloc_r+0x24>
 80068f8:	f7ff ffa6 	bl	8006848 <_free_r>
 80068fc:	4625      	mov	r5, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006904:	f000 f850 	bl	80069a8 <_malloc_usable_size_r>
 8006908:	4284      	cmp	r4, r0
 800690a:	4607      	mov	r7, r0
 800690c:	d802      	bhi.n	8006914 <_realloc_r+0x34>
 800690e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006912:	d812      	bhi.n	800693a <_realloc_r+0x5a>
 8006914:	4621      	mov	r1, r4
 8006916:	4640      	mov	r0, r8
 8006918:	f7ff f834 	bl	8005984 <_malloc_r>
 800691c:	4605      	mov	r5, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	d0ed      	beq.n	80068fe <_realloc_r+0x1e>
 8006922:	42bc      	cmp	r4, r7
 8006924:	4622      	mov	r2, r4
 8006926:	4631      	mov	r1, r6
 8006928:	bf28      	it	cs
 800692a:	463a      	movcs	r2, r7
 800692c:	f7ff ff58 	bl	80067e0 <memcpy>
 8006930:	4631      	mov	r1, r6
 8006932:	4640      	mov	r0, r8
 8006934:	f7ff ff88 	bl	8006848 <_free_r>
 8006938:	e7e1      	b.n	80068fe <_realloc_r+0x1e>
 800693a:	4635      	mov	r5, r6
 800693c:	e7df      	b.n	80068fe <_realloc_r+0x1e>
	...

08006940 <_read_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d07      	ldr	r5, [pc, #28]	; (8006960 <_read_r+0x20>)
 8006944:	4604      	mov	r4, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	2200      	movs	r2, #0
 800694c:	602a      	str	r2, [r5, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f7fa fd5e 	bl	8001410 <_read>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_read_r+0x1e>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_read_r+0x1e>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000498 	.word	0x20000498

08006964 <_fstat_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d07      	ldr	r5, [pc, #28]	; (8006984 <_fstat_r+0x20>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	f7fa fd92 	bl	800149a <_fstat>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d102      	bne.n	8006980 <_fstat_r+0x1c>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b103      	cbz	r3, 8006980 <_fstat_r+0x1c>
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	bf00      	nop
 8006984:	20000498 	.word	0x20000498

08006988 <_isatty_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_isatty_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fa fd91 	bl	80014ba <_isatty>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_isatty_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_isatty_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20000498 	.word	0x20000498

080069a8 <_malloc_usable_size_r>:
 80069a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ac:	1f18      	subs	r0, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfbc      	itt	lt
 80069b2:	580b      	ldrlt	r3, [r1, r0]
 80069b4:	18c0      	addlt	r0, r0, r3
 80069b6:	4770      	bx	lr

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
