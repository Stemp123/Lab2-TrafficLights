
Lab2-TrafficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d48  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08003f88  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ac  20000014  08003f94  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003c0  08003f94  000203c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001402c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027b4  00000000  00000000  00034070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001418  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001340  00000000  00000000  00037c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021019  00000000  00000000  00038f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000113f7  00000000  00000000  00059f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d4ee5  00000000  00000000  0006b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00140275  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005428  00000000  00000000  001402c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003e6c 	.word	0x08003e6c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003e6c 	.word	0x08003e6c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <reset_traffic_lights>:
	ev_none,
	ev_button_push,
	ev_state_timeout
};

void reset_traffic_lights(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <reset_traffic_lights+0x3c>)
 80004ea:	f000 ffa5 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2102      	movs	r1, #2
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <reset_traffic_lights+0x3c>)
 80004f4:	f000 ffa0 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <reset_traffic_lights+0x3c>)
 80004fe:	f000 ff9b 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2108      	movs	r1, #8
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <reset_traffic_lights+0x3c>)
 8000508:	f000 ff96 	bl	8001438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <reset_traffic_lights+0x3c>)
 8000512:	f000 ff91 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	48000800 	.word	0x48000800

08000520 <set_traffic_lights>:

void set_traffic_lights(enum traffic_light_state state) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	3b06      	subs	r3, #6
 800052e:	2b19      	cmp	r3, #25
 8000530:	f200 80ac 	bhi.w	800068c <set_traffic_lights+0x16c>
 8000534:	a201      	add	r2, pc, #4	; (adr r2, 800053c <set_traffic_lights+0x1c>)
 8000536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053a:	bf00      	nop
 800053c:	0800062f 	.word	0x0800062f
 8000540:	0800068d 	.word	0x0800068d
 8000544:	0800068d 	.word	0x0800068d
 8000548:	0800068d 	.word	0x0800068d
 800054c:	080005ef 	.word	0x080005ef
 8000550:	0800068d 	.word	0x0800068d
 8000554:	0800068d 	.word	0x0800068d
 8000558:	0800068d 	.word	0x0800068d
 800055c:	0800068d 	.word	0x0800068d
 8000560:	0800068d 	.word	0x0800068d
 8000564:	0800068d 	.word	0x0800068d
 8000568:	0800060f 	.word	0x0800060f
 800056c:	080005a5 	.word	0x080005a5
 8000570:	0800068d 	.word	0x0800068d
 8000574:	0800068d 	.word	0x0800068d
 8000578:	0800068d 	.word	0x0800068d
 800057c:	0800068d 	.word	0x0800068d
 8000580:	0800068d 	.word	0x0800068d
 8000584:	0800068d 	.word	0x0800068d
 8000588:	0800068d 	.word	0x0800068d
 800058c:	080005c5 	.word	0x080005c5
 8000590:	0800068d 	.word	0x0800068d
 8000594:	0800068d 	.word	0x0800068d
 8000598:	0800068d 	.word	0x0800068d
 800059c:	0800068d 	.word	0x0800068d
 80005a0:	0800064f 	.word	0x0800064f
		case s_CarsRed_PedestrianRed:
			reset_traffic_lights();
 80005a4:	f7ff ff9c 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianRed;
 80005a8:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <set_traffic_lights+0x174>)
 80005aa:	2212      	movs	r2, #18
 80005ac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4839      	ldr	r0, [pc, #228]	; (8000698 <set_traffic_lights+0x178>)
 80005b4:	f000 ff40 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4836      	ldr	r0, [pc, #216]	; (8000698 <set_traffic_lights+0x178>)
 80005be:	f000 ff3b 	bl	8001438 <HAL_GPIO_WritePin>
			break;
 80005c2:	e063      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsRedYellow_PedestrianRed:
			reset_traffic_lights();
 80005c4:	f7ff ff8c 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsRedYellow_PedestrianRed;
 80005c8:	4b32      	ldr	r3, [pc, #200]	; (8000694 <set_traffic_lights+0x174>)
 80005ca:	221a      	movs	r2, #26
 80005cc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2101      	movs	r1, #1
 80005d2:	4831      	ldr	r0, [pc, #196]	; (8000698 <set_traffic_lights+0x178>)
 80005d4:	f000 ff30 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	482e      	ldr	r0, [pc, #184]	; (8000698 <set_traffic_lights+0x178>)
 80005de:	f000 ff2b 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2108      	movs	r1, #8
 80005e6:	482c      	ldr	r0, [pc, #176]	; (8000698 <set_traffic_lights+0x178>)
 80005e8:	f000 ff26 	bl	8001438 <HAL_GPIO_WritePin>
			break;
 80005ec:	e04e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsYellow_PedestrianRed:
			reset_traffic_lights();
 80005ee:	f7ff ff77 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsYellow_PedestrianRed;
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <set_traffic_lights+0x174>)
 80005f4:	220a      	movs	r2, #10
 80005f6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2102      	movs	r1, #2
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <set_traffic_lights+0x178>)
 80005fe:	f000 ff1b 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	4824      	ldr	r0, [pc, #144]	; (8000698 <set_traffic_lights+0x178>)
 8000608:	f000 ff16 	bl	8001438 <HAL_GPIO_WritePin>
			break;
 800060c:	e03e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsRed_PedestrianGreen:
			reset_traffic_lights();
 800060e:	f7ff ff67 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianGreen;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <set_traffic_lights+0x174>)
 8000614:	2211      	movs	r2, #17
 8000616:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <set_traffic_lights+0x178>)
 800061e:	f000 ff0b 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <set_traffic_lights+0x178>)
 8000628:	f000 ff06 	bl	8001438 <HAL_GPIO_WritePin>
			break;
 800062c:	e02e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsGreen_PedestrianRed:
			reset_traffic_lights();
 800062e:	f7ff ff57 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsGreen_PedestrianRed;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <set_traffic_lights+0x174>)
 8000634:	2206      	movs	r2, #6
 8000636:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2104      	movs	r1, #4
 800063c:	4816      	ldr	r0, [pc, #88]	; (8000698 <set_traffic_lights+0x178>)
 800063e:	f000 fefb 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2108      	movs	r1, #8
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <set_traffic_lights+0x178>)
 8000648:	f000 fef6 	bl	8001438 <HAL_GPIO_WritePin>
			break;
 800064c:	e01e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_init:
			reset_traffic_lights();
 800064e:	f7ff ff47 	bl	80004e0 <reset_traffic_lights>
			currentState = s_init;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <set_traffic_lights+0x174>)
 8000654:	221f      	movs	r2, #31
 8000656:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <set_traffic_lights+0x178>)
 800065e:	f000 feeb 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2102      	movs	r1, #2
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <set_traffic_lights+0x178>)
 8000668:	f000 fee6 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2104      	movs	r1, #4
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <set_traffic_lights+0x178>)
 8000672:	f000 fee1 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <set_traffic_lights+0x178>)
 800067c:	f000 fedc 	bl	8001438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <set_traffic_lights+0x178>)
 8000686:	f000 fed7 	bl	8001438 <HAL_GPIO_WritePin>
			break;
 800068a:	bf00      	nop
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200003b8 	.word	0x200003b8
 8000698:	48000800 	.word	0x48000800

0800069c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a2:	f000 fbcb 	bl	8000e3c <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a6:	f000 f8af 	bl	8000808 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006aa:	f000 f923 	bl	80008f4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ae:	f000 f9b5 	bl	8000a1c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80006b2:	f000 f93d 	bl	8000930 <MX_USART1_UART_Init>
	MX_USB_PCD_Init();
 80006b6:	f000 f989 	bl	80009cc <MX_USB_PCD_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	set_traffic_lights(s_init);
 80006ba:	201f      	movs	r0, #31
 80006bc:	f7ff ff30 	bl	8000520 <set_traffic_lights>
	enum event currentEvent;
	int ticks_left_in_state = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]

	while (1)
	{
	    uint32_t buttonPressed = GPIOB->IDR & BTN_Pin;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <main+0x164>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	607b      	str	r3, [r7, #4]

	    if (buttonPressed && (currentState == s_init || currentState == s_CarsGreen_PedestrianRed))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <main+0x4c>
 80006d4:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <main+0x168>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b1f      	cmp	r3, #31
 80006da:	d003      	beq.n	80006e4 <main+0x48>
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <main+0x168>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d101      	bne.n	80006e8 <main+0x4c>
	        currentEvent = ev_button_push;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]

			if (ticks_left_in_state == 0){
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d17a      	bne.n	80007e4 <main+0x148>
				switch (currentState){
 80006ee:	4b45      	ldr	r3, [pc, #276]	; (8000804 <main+0x168>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b06      	subs	r3, #6
 80006f4:	2b19      	cmp	r3, #25
 80006f6:	d87e      	bhi.n	80007f6 <main+0x15a>
 80006f8:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <main+0x64>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	08000769 	.word	0x08000769
 8000704:	080007f7 	.word	0x080007f7
 8000708:	080007f7 	.word	0x080007f7
 800070c:	080007f7 	.word	0x080007f7
 8000710:	08000783 	.word	0x08000783
 8000714:	080007f7 	.word	0x080007f7
 8000718:	080007f7 	.word	0x080007f7
 800071c:	080007f7 	.word	0x080007f7
 8000720:	080007f7 	.word	0x080007f7
 8000724:	080007f7 	.word	0x080007f7
 8000728:	080007f7 	.word	0x080007f7
 800072c:	080007bf 	.word	0x080007bf
 8000730:	0800078f 	.word	0x0800078f
 8000734:	080007f7 	.word	0x080007f7
 8000738:	080007f7 	.word	0x080007f7
 800073c:	080007f7 	.word	0x080007f7
 8000740:	080007f7 	.word	0x080007f7
 8000744:	080007f7 	.word	0x080007f7
 8000748:	080007f7 	.word	0x080007f7
 800074c:	080007f7 	.word	0x080007f7
 8000750:	080007b3 	.word	0x080007b3
 8000754:	080007f7 	.word	0x080007f7
 8000758:	080007f7 	.word	0x080007f7
 800075c:	080007f7 	.word	0x080007f7
 8000760:	080007f7 	.word	0x080007f7
 8000764:	080007cf 	.word	0x080007cf
					case s_CarsGreen_PedestrianRed:
						if (currentEvent == ev_button_push){
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d13e      	bne.n	80007ec <main+0x150>
							HAL_Delay(2000);
 800076e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000772:	f000 fbe9 	bl	8000f48 <HAL_Delay>
							set_traffic_lights(s_CarsYellow_PedestrianRed);
 8000776:	200a      	movs	r0, #10
 8000778:	f7ff fed2 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 25;
 800077c:	2319      	movs	r3, #25
 800077e:	60bb      	str	r3, [r7, #8]
						}
						break;
 8000780:	e034      	b.n	80007ec <main+0x150>
					case s_CarsYellow_PedestrianRed:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 8000782:	2012      	movs	r0, #18
 8000784:	f7ff fecc 	bl	8000520 <set_traffic_lights>
						ticks_left_in_state = 15;
 8000788:	230f      	movs	r3, #15
 800078a:	60bb      	str	r3, [r7, #8]
						break;
 800078c:	e033      	b.n	80007f6 <main+0x15a>
					case s_CarsRed_PedestrianRed:
						if(currentEvent == ev_button_push) {
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d105      	bne.n	80007a0 <main+0x104>
							set_traffic_lights(s_CarsRed_PedestrianGreen);
 8000794:	2011      	movs	r0, #17
 8000796:	f7ff fec3 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 50;
 800079a:	2332      	movs	r3, #50	; 0x32
 800079c:	60bb      	str	r3, [r7, #8]
						} else if (currentEvent == ev_state_timeout){
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
							ticks_left_in_state = 20;
						}
						break;
 800079e:	e027      	b.n	80007f0 <main+0x154>
						} else if (currentEvent == ev_state_timeout){
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d124      	bne.n	80007f0 <main+0x154>
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
 80007a6:	201a      	movs	r0, #26
 80007a8:	f7ff feba 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 20;
 80007ac:	2314      	movs	r3, #20
 80007ae:	60bb      	str	r3, [r7, #8]
						break;
 80007b0:	e01e      	b.n	80007f0 <main+0x154>
					case s_CarsRedYellow_PedestrianRed:
						set_traffic_lights(s_CarsGreen_PedestrianRed);
 80007b2:	2006      	movs	r0, #6
 80007b4:	f7ff feb4 	bl	8000520 <set_traffic_lights>
						ticks_left_in_state = 15;
 80007b8:	230f      	movs	r3, #15
 80007ba:	60bb      	str	r3, [r7, #8]
						break;
 80007bc:	e01b      	b.n	80007f6 <main+0x15a>
					case s_CarsRed_PedestrianGreen:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 80007be:	2012      	movs	r0, #18
 80007c0:	f7ff feae 	bl	8000520 <set_traffic_lights>
						ticks_left_in_state = 10;
 80007c4:	230a      	movs	r3, #10
 80007c6:	60bb      	str	r3, [r7, #8]
						currentEvent = ev_state_timeout;
 80007c8:	2302      	movs	r3, #2
 80007ca:	73fb      	strb	r3, [r7, #15]
						break;
 80007cc:	e013      	b.n	80007f6 <main+0x15a>
					case s_init:
						if (currentEvent == ev_button_push){
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10f      	bne.n	80007f4 <main+0x158>
							currentEvent = ev_none;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
							set_traffic_lights(s_CarsGreen_PedestrianRed);
 80007d8:	2006      	movs	r0, #6
 80007da:	f7ff fea1 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 20;
 80007de:	2314      	movs	r3, #20
 80007e0:	60bb      	str	r3, [r7, #8]
						}
						break;
 80007e2:	e007      	b.n	80007f4 <main+0x158>
				}
			} else {
				ticks_left_in_state--;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e004      	b.n	80007f6 <main+0x15a>
						break;
 80007ec:	bf00      	nop
 80007ee:	e002      	b.n	80007f6 <main+0x15a>
						break;
 80007f0:	bf00      	nop
 80007f2:	e000      	b.n	80007f6 <main+0x15a>
						break;
 80007f4:	bf00      	nop
			}
			HAL_Delay(100);
 80007f6:	2064      	movs	r0, #100	; 0x64
 80007f8:	f000 fba6 	bl	8000f48 <HAL_Delay>
	{
 80007fc:	e762      	b.n	80006c4 <main+0x28>
 80007fe:	bf00      	nop
 8000800:	48000400 	.word	0x48000400
 8000804:	200003b8 	.word	0x200003b8

08000808 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	; 0x68
 800080c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2248      	movs	r2, #72	; 0x48
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fb20 	bl	8003e5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	619a      	str	r2, [r3, #24]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800082e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800083c:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800083e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	f023 0303 	bic.w	r3, r3, #3
 8000848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000852:	f000 ff0d 	bl	8001670 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fe12 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xe8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <SystemClock_Config+0xe8>)
 8000866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <SystemClock_Config+0xe8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000878:	2327      	movs	r3, #39	; 0x27
 800087a:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000894:	2300      	movs	r3, #0
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000898:	2360      	movs	r3, #96	; 0x60
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089c:	2300      	movs	r3, #0
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fa77 	bl	8001d98 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xac>
	{
		Error_Handler();
 80008b0:	f000 f91a 	bl	8000ae8 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008b4:	236f      	movs	r3, #111	; 0x6f
 80008b6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008b8:	2302      	movs	r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fdd3 	bl	8002480 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xdc>
	{
		Error_Handler();
 80008e0:	f000 f902 	bl	8000ae8 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80008e4:	f002 fb8e 	bl	8003004 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e8:	bf00      	nop
 80008ea:	3768      	adds	r7, #104	; 0x68
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	58000400 	.word	0x58000400

080008f4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2250      	movs	r2, #80	; 0x50
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 faab 	bl	8003e5c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000910:	2300      	movs	r3, #0
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f002 f9fe 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 8000922:	f000 f8e1 	bl	8000ae8 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	; 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000936:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <MX_USART1_UART_Init+0x98>)
 8000938:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000948:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000958:	220c      	movs	r2, #12
 800095a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4812      	ldr	r0, [pc, #72]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800097c:	f002 fc79 	bl	8003272 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x5a>
	{
		Error_Handler();
 8000986:	f000 f8af 	bl	8000ae8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800098e:	f003 f93b 	bl	8003c08 <HAL_UARTEx_SetTxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART1_UART_Init+0x6c>
	{
		Error_Handler();
 8000998:	f000 f8a6 	bl	8000ae8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 80009a0:	f003 f970 	bl	8003c84 <HAL_UARTEx_SetRxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART1_UART_Init+0x7e>
	{
		Error_Handler();
 80009aa:	f000 f89d 	bl	8000ae8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 80009b0:	f003 f8f1 	bl	8003b96 <HAL_UARTEx_DisableFifoMode>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x8e>
	{
		Error_Handler();
 80009ba:	f000 f895 	bl	8000ae8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000030 	.word	0x20000030
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <MX_USB_PCD_Init+0x4c>)
 80009d4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009d8:	2208      	movs	r2, #8
 80009da:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009de:	2202      	movs	r2, #2
 80009e0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 8000a02:	f000 fd31 	bl	8001468 <HAL_PCD_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USB_PCD_Init+0x44>
	{
		Error_Handler();
 8000a0c:	f000 f86c 	bl	8000ae8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000c4 	.word	0x200000c4
 8000a18:	40006800 	.word	0x40006800

08000a1c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff fd3b 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fd38 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff fd35 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2008      	movs	r0, #8
 8000a44:	f7ff fd32 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8000a48:	2200      	movs	r2, #0
 8000a4a:	212f      	movs	r1, #47	; 0x2f
 8000a4c:	4823      	ldr	r0, [pc, #140]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a4e:	f000 fcf3 	bl	8001438 <HAL_GPIO_WritePin>
			|PED_GREEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2123      	movs	r1, #35	; 0x23
 8000a56:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <MX_GPIO_Init+0xc4>)
 8000a58:	f000 fcee 	bl	8001438 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CARS_RED_Pin CARS_YELLOW_Pin CARS_GREEN_Pin PED_RED_Pin
                           PED_GREEN_Pin */
	GPIO_InitStruct.Pin = CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8000a5c:	232f      	movs	r3, #47	; 0x2f
 8000a5e:	607b      	str	r3, [r7, #4]
			|PED_GREEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481a      	ldr	r0, [pc, #104]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a72:	f000 fb71 	bl	8001158 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	2310      	movs	r3, #16
 8000a78:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a88:	f000 fb66 	bl	8001158 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_Pin */
	GPIO_InitStruct.Pin = BTN_Pin;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <MX_GPIO_Init+0xc4>)
 8000a9e:	f000 fb5b 	bl	8001158 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000aa2:	2323      	movs	r3, #35	; 0x23
 8000aa4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <MX_GPIO_Init+0xc4>)
 8000ab8:	f000 fb4e 	bl	8001158 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000abc:	2303      	movs	r3, #3
 8000abe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0xc8>)
 8000ace:	f000 fb43 	bl	8001158 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48000c00 	.word	0x48000c00

08000ae8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>

08000af2 <LL_AHB2_GRP1_EnableClock>:
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09c      	sub	sp, #112	; 0x70
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2250      	movs	r2, #80	; 0x50
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 f94f 	bl	8003e5c <memset>
  if(huart->Instance==USART1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d124      	bne.n	8000c12 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 f89f 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be0:	f7ff ff82 	bl	8000ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000be8:	f7ff ffb5 	bl	8000b56 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff ff80 	bl	8000af2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bf2:	23c0      	movs	r3, #192	; 0xc0
 8000bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c02:	2307      	movs	r3, #7
 8000c04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000c0e:	f000 faa3 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3770      	adds	r7, #112	; 0x70
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	; 0x70
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2250      	movs	r2, #80	; 0x50
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f909 	bl	8003e5c <memset>
  if(hpcd->Instance==USB)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_PCD_MspInit+0xa8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d136      	bne.n	8000cc2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c5a:	2318      	movs	r3, #24
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c7a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f849 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c8c:	f7ff ff2c 	bl	8000ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff ff2e 	bl	8000af2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ca8:	230a      	movs	r3, #10
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 fa4f 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cbe:	f7ff ff31 	bl	8000b24 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3770      	adds	r7, #112	; 0x70
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40006800 	.word	0x40006800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8e8 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <SystemInit+0x98>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <SystemInit+0x98>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <SystemInit+0x9c>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d6e:	f023 0305 	bic.w	r3, r3, #5
 8000d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <SystemInit+0xa0>)
 8000d90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <SystemInit+0xa0>)
 8000d98:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	faf6fefb 	.word	0xfaf6fefb
 8000dc4:	22041000 	.word	0x22041000

08000dc8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000dc8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dcc:	3304      	adds	r3, #4

08000dce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000dd2:	d3f9      	bcc.n	8000dc8 <CopyDataInit>
  bx lr
 8000dd4:	4770      	bx	lr

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dd6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000dd8:	3004      	adds	r0, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dda:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>
  bx lr
 8000dde:	4770      	bx	lr

08000de0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de4:	f7ff ff9e 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <LoopForever+0x6>)
 8000dea:	490c      	ldr	r1, [pc, #48]	; (8000e1c <LoopForever+0xa>)
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <LoopForever+0xe>)
 8000dee:	2300      	movs	r3, #0
 8000df0:	f7ff ffed 	bl	8000dce <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <LoopForever+0x12>)
 8000df6:	490c      	ldr	r1, [pc, #48]	; (8000e28 <LoopForever+0x16>)
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <LoopForever+0x1a>)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f7ff ffe7 	bl	8000dce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopForever+0x1e>)
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <LoopForever+0x22>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	f7ff ffe8 	bl	8000dda <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0a:	f003 f803 	bl	8003e14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e0e:	f7ff fc45 	bl	800069c <main>

08000e12 <LoopForever>:

LoopForever:
  b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000014 	.word	0x20000014
 8000e20:	08003f88 	.word	0x08003f88
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e24:	20030000 	.word	0x20030000
 8000e28:	20030000 	.word	0x20030000
 8000e2c:	08003f94 	.word	0x08003f94
  INIT_BSS _sbss, _ebss
 8000e30:	20000014 	.word	0x20000014
 8000e34:	200003c0 	.word	0x200003c0

08000e38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_Init+0x3c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_Init+0x3c>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f94e 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 f80f 	bl	8000e7c <HAL_InitTick>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	e001      	b.n	8000e6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6a:	f7ff fe8d 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58004000 	.word	0x58004000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d024      	beq.n	8000eda <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e90:	f001 fca2 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 8000e94:	4602      	mov	r2, r0
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f948 	bl	800113e <HAL_SYSTICK_Config>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10f      	bne.n	8000ed4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d809      	bhi.n	8000ece <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec2:	f000 f922 	bl	800110a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <HAL_InitTick+0x70>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e004      	b.n	8000ede <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	2000000c 	.word	0x2000000c

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000010 	.word	0x20000010
 8000f14:	200003bc 	.word	0x200003bc

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200003bc 	.word	0x200003bc

08000f30 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTickPrio+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffe2 	bl	8000f18 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffd2 	bl	8000f18 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000010 	.word	0x20000010

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff47 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb2 	bl	80010b0 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e14c      	b.n	8001402 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 813e 	beq.w	80013fc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x40>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f003 0201 	and.w	r2, r3, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d017      	beq.n	8001236 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8098 	beq.w	80013fc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012cc:	4a54      	ldr	r2, [pc, #336]	; (8001420 <HAL_GPIO_Init+0x2c8>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f6:	d019      	beq.n	800132c <HAL_GPIO_Init+0x1d4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2cc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_GPIO_Init+0x1d0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a49      	ldr	r2, [pc, #292]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_GPIO_Init+0x1cc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2d4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x1c8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a47      	ldr	r2, [pc, #284]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_GPIO_Init+0x1c4>
 8001318:	2304      	movs	r3, #4
 800131a:	e008      	b.n	800132e <HAL_GPIO_Init+0x1d6>
 800131c:	2307      	movs	r3, #7
 800131e:	e006      	b.n	800132e <HAL_GPIO_Init+0x1d6>
 8001320:	2303      	movs	r3, #3
 8001322:	e004      	b.n	800132e <HAL_GPIO_Init+0x1d6>
 8001324:	2302      	movs	r3, #2
 8001326:	e002      	b.n	800132e <HAL_GPIO_Init+0x1d6>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_GPIO_Init+0x1d6>
 800132c:	2300      	movs	r3, #0
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	f002 0203 	and.w	r2, r2, #3
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	4093      	lsls	r3, r2
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800133e:	4938      	ldr	r1, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x2c8>)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001370:	4a30      	ldr	r2, [pc, #192]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139a:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 80013a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 80013d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f47f aeab 	bne.w	8001168 <HAL_GPIO_Init+0x10>
  }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	58000800 	.word	0x58000800

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af06      	add	r7, sp, #24
 800146e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0cb      	b.n	8001612 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fbc8 	bl	8000c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fc7b 	bl	8003d9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e040      	b.n	800152e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3301      	adds	r3, #1
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3303      	adds	r3, #3
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	3338      	adds	r3, #56	; 0x38
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	333c      	adds	r3, #60	; 0x3c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	3340      	adds	r3, #64	; 0x40
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3b9      	bcc.n	80014ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e044      	b.n	80015c8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3301      	adds	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d3b5      	bcc.n	800153e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	687e      	ldr	r6, [r7, #4]
 80015da:	466d      	mov	r5, sp
 80015dc:	f106 0410 	add.w	r4, r6, #16
 80015e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	602b      	str	r3, [r5, #0]
 80015e8:	1d33      	adds	r3, r6, #4
 80015ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f002 fbf0 	bl	8003dd2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f805 	bl	800161a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800161a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800163e:	b29b      	uxth	r3, r3
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001652:	b29b      	uxth	r3, r3
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	58000400 	.word	0x58000400

08001690 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	58000400 	.word	0x58000400

080016ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016be:	d101      	bne.n	80016c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_RCC_HSE_Enable>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_HSE_Disable>:
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_RCC_HSE_IsReady>:
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800171e:	d101      	bne.n	8001724 <LL_RCC_HSE_IsReady+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_RCC_HSE_IsReady+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_RCC_HSI_Enable>:
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RCC_HSI_Disable>:
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_RCC_HSI_IsReady>:
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177e:	d101      	bne.n	8001784 <LL_RCC_HSI_IsReady+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_RCC_HSI_IsReady+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_RCC_HSI48_Enable>:
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_RCC_HSI48_Disable>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_RCC_HSI48_IsReady>:
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	d101      	bne.n	8001816 <LL_RCC_HSI48_IsReady+0x18>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <LL_RCC_HSI48_IsReady+0x1a>
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_RCC_LSE_Enable>:
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_RCC_LSE_Disable>:
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_RCC_LSE_EnableBypass>:
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_RCC_LSE_DisableBypass>:
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d101      	bne.n	80018c2 <LL_RCC_LSE_IsReady+0x18>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_RCC_LSE_IsReady+0x1a>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d101      	bne.n	800192a <LL_RCC_LSI1_IsReady+0x18>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <LL_RCC_LSI1_IsReady+0x1a>
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b08      	cmp	r3, #8
 800198c:	d101      	bne.n	8001992 <LL_RCC_LSI2_IsReady+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_LSI2_IsReady+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d101      	bne.n	8001a1e <LL_RCC_MSI_IsReady+0x16>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_RCC_MSI_IsReady+0x18>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a62:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2bb0      	cmp	r3, #176	; 0xb0
 8001a68:	d901      	bls.n	8001a6e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001a6a:	23b0      	movs	r3, #176	; 0xb0
 8001a6c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 0203 	bic.w	r2, r3, #3
 8001ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b4a:	f023 020f 	bic.w	r2, r3, #15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c6a:	d101      	bne.n	8001c70 <LL_RCC_PLL_IsReady+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_RCC_PLL_IsReady+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d101      	bne.n	8001cf6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d101      	bne.n	8001d42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d60:	d101      	bne.n	8001d66 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d84:	d101      	bne.n	8001d8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b08d      	sub	sp, #52	; 0x34
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e363      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 808d 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db8:	f7ff fe89 	bl	8001ace <LL_RCC_GetSysClkSource>
 8001dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dbe:	f7ff ff82 	bl	8001cc6 <LL_RCC_PLL_GetMainSource>
 8001dc2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x3e>
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d147      	bne.n	8001e60 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d144      	bne.n	8001e60 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e347      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001de6:	f7ff fe34 	bl	8001a52 <LL_RCC_MSI_GetRange>
 8001dea:	4603      	mov	r3, r0
 8001dec:	429c      	cmp	r4, r3
 8001dee:	d914      	bls.n	8001e1a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fd2f 	bl	8002858 <RCC_SetFlashLatencyFromMSIRange>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e336      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe0e 	bl	8001a2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fe32 	bl	8001a7c <LL_RCC_MSI_SetCalibTrimming>
 8001e18:	e013      	b.n	8001e42 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe03 	bl	8001a2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fe27 	bl	8001a7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fd10 	bl	8002858 <RCC_SetFlashLatencyFromMSIRange>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e317      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e42:	f000 fcc9 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4aa4      	ldr	r2, [pc, #656]	; (80020dc <HAL_RCC_OscConfig+0x344>)
 8001e4a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e4c:	4ba4      	ldr	r3, [pc, #656]	; (80020e0 <HAL_RCC_OscConfig+0x348>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f813 	bl	8000e7c <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d039      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e308      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01e      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e68:	f7ff fdb0 	bl	80019cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f854 	bl	8000f18 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e74:	f7ff f850 	bl	8000f18 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e2f5      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e86:	f7ff fdbf 	bl	8001a08 <LL_RCC_MSI_IsReady>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f1      	beq.n	8001e74 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fdc8 	bl	8001a2a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fdec 	bl	8001a7c <LL_RCC_MSI_SetCalibTrimming>
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ea6:	f7ff fda0 	bl	80019ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f835 	bl	8000f18 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f831 	bl	8000f18 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e2d6      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ec4:	f7ff fda0 	bl	8001a08 <LL_RCC_MSI_IsReady>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f1      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x11a>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ed0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d047      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	f7ff fdf6 	bl	8001ace <LL_RCC_GetSysClkSource>
 8001ee2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	f7ff feef 	bl	8001cc6 <LL_RCC_PLL_GetMainSource>
 8001ee8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x164>
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d134      	bne.n	8001f6e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e2b4      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_OscConfig+0x180>
 8001f12:	f7ff fbdd 	bl	80016d0 <LL_RCC_HSE_Enable>
 8001f16:	e001      	b.n	8001f1c <HAL_RCC_OscConfig+0x184>
 8001f18:	f7ff fbe9 	bl	80016ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7fe fff8 	bl	8000f18 <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fff4 	bl	8000f18 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e299      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f3e:	f7ff fbe5 	bl	800170c <LL_RCC_HSE_IsReady>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f1      	beq.n	8001f2c <HAL_RCC_OscConfig+0x194>
 8001f48:	e011      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe ffe5 	bl	8000f18 <HAL_GetTick>
 8001f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f52:	f7fe ffe1 	bl	8000f18 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e286      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f64:	f7ff fbd2 	bl	800170c <LL_RCC_HSE_IsReady>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f1      	bne.n	8001f52 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04c      	beq.n	8002014 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	f7ff fda8 	bl	8001ace <LL_RCC_GetSysClkSource>
 8001f7e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f80:	f7ff fea1 	bl	8001cc6 <LL_RCC_PLL_GetMainSource>
 8001f84:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x200>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d10e      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e266      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fbf1 	bl	8001790 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fae:	e031      	b.n	8002014 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d019      	beq.n	8001fec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	f7ff fbba 	bl	8001730 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ffac 	bl	8000f18 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7fe ffa8 	bl	8000f18 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e24d      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fd6:	f7ff fbc9 	bl	800176c <LL_RCC_HSI_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f1      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fbd3 	bl	8001790 <LL_RCC_HSI_SetCalibTrimming>
 8001fea:	e013      	b.n	8002014 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fec:	f7ff fbaf 	bl	800174e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ff92 	bl	8000f18 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7fe ff8e 	bl	8000f18 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e233      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800200a:	f7ff fbaf 	bl	800176c <LL_RCC_HSI_IsReady>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f1      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a3 	beq.w	8002174 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d076      	beq.n	8002124 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d046      	beq.n	80020d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002042:	f7ff fc66 	bl	8001912 <LL_RCC_LSI1_IsReady>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d113      	bne.n	8002074 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800204c:	f7ff fc3f 	bl	80018ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002050:	f7fe ff62 	bl	8000f18 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002058:	f7fe ff5e 	bl	8000f18 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e203      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800206a:	f7ff fc52 	bl	8001912 <LL_RCC_LSI1_IsReady>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f1      	beq.n	8002058 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002074:	f7ff fc5f 	bl	8001936 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe ff4e 	bl	8000f18 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002080:	f7fe ff4a 	bl	8000f18 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b03      	cmp	r3, #3
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1ef      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002092:	f7ff fc72 	bl	800197a <LL_RCC_LSI2_IsReady>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f1      	beq.n	8002080 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fc7c 	bl	800199e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80020a6:	f7ff fc23 	bl	80018f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe ff35 	bl	8000f18 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020b2:	f7fe ff31 	bl	8000f18 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1d6      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80020c4:	f7ff fc25 	bl	8001912 <LL_RCC_LSI1_IsReady>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f1      	bne.n	80020b2 <HAL_RCC_OscConfig+0x31a>
 80020ce:	e051      	b.n	8002174 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80020d0:	f7ff fbfd 	bl	80018ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe ff20 	bl	8000f18 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80020da:	e00c      	b.n	80020f6 <HAL_RCC_OscConfig+0x35e>
 80020dc:	20000008 	.word	0x20000008
 80020e0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020e4:	f7fe ff18 	bl	8000f18 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1bd      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80020f6:	f7ff fc0c 	bl	8001912 <LL_RCC_LSI1_IsReady>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f1      	beq.n	80020e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002100:	f7ff fc2a 	bl	8001958 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002106:	f7fe ff07 	bl	8000f18 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1ac      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002118:	f7ff fc2f 	bl	800197a <LL_RCC_LSI2_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f1      	bne.n	8002106 <HAL_RCC_OscConfig+0x36e>
 8002122:	e027      	b.n	8002174 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002124:	f7ff fc18 	bl	8001958 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fef6 	bl	8000f18 <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002130:	f7fe fef2 	bl	8000f18 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b03      	cmp	r3, #3
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e197      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002142:	f7ff fc1a 	bl	800197a <LL_RCC_LSI2_IsReady>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f1      	bne.n	8002130 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800214c:	f7ff fbd0 	bl	80018f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe fee2 	bl	8000f18 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002158:	f7fe fede 	bl	8000f18 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e183      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800216a:	f7ff fbd2 	bl	8001912 <LL_RCC_LSI1_IsReady>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f1      	bne.n	8002158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05b      	beq.n	8002238 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002180:	4ba7      	ldr	r3, [pc, #668]	; (8002420 <HAL_RCC_OscConfig+0x688>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d114      	bne.n	80021b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800218c:	f7ff fa70 	bl	8001670 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7fe fec2 	bl	8000f18 <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe febe 	bl	8000f18 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e163      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021aa:	4b9d      	ldr	r3, [pc, #628]	; (8002420 <HAL_RCC_OscConfig+0x688>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x42c>
 80021be:	f7ff fb30 	bl	8001822 <LL_RCC_LSE_Enable>
 80021c2:	e00c      	b.n	80021de <HAL_RCC_OscConfig+0x446>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d104      	bne.n	80021d6 <HAL_RCC_OscConfig+0x43e>
 80021cc:	f7ff fb4b 	bl	8001866 <LL_RCC_LSE_EnableBypass>
 80021d0:	f7ff fb27 	bl	8001822 <LL_RCC_LSE_Enable>
 80021d4:	e003      	b.n	80021de <HAL_RCC_OscConfig+0x446>
 80021d6:	f7ff fb35 	bl	8001844 <LL_RCC_LSE_Disable>
 80021da:	f7ff fb55 	bl	8001888 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d014      	beq.n	8002210 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe fe97 	bl	8000f18 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fe93 	bl	8000f18 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e136      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002204:	f7ff fb51 	bl	80018aa <LL_RCC_LSE_IsReady>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ef      	beq.n	80021ee <HAL_RCC_OscConfig+0x456>
 800220e:	e013      	b.n	8002238 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe fe82 	bl	8000f18 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe fe7e 	bl	8000f18 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e121      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800222e:	f7ff fb3c 	bl	80018aa <LL_RCC_LSE_IsReady>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ef      	bne.n	8002218 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d02c      	beq.n	800229e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d014      	beq.n	8002276 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800224c:	f7ff fab5 	bl	80017ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7fe fe62 	bl	8000f18 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002258:	f7fe fe5e 	bl	8000f18 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e103      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800226a:	f7ff fac8 	bl	80017fe <LL_RCC_HSI48_IsReady>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f1      	beq.n	8002258 <HAL_RCC_OscConfig+0x4c0>
 8002274:	e013      	b.n	800229e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002276:	f7ff fab1 	bl	80017dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fe4d 	bl	8000f18 <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002282:	f7fe fe49 	bl	8000f18 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0ee      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002294:	f7ff fab3 	bl	80017fe <LL_RCC_HSI48_IsReady>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f1      	bne.n	8002282 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80e4 	beq.w	8002470 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a8:	f7ff fc11 	bl	8001ace <LL_RCC_GetSysClkSource>
 80022ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	f040 80b4 	bne.w	8002428 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d123      	bne.n	8002316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d11c      	bne.n	8002316 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d114      	bne.n	8002316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10d      	bne.n	8002316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d05d      	beq.n	80023d2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d058      	beq.n	80023ce <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0a1      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800232e:	f7ff fc84 	bl	8001c3a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002332:	f7fe fdf1 	bl	8000f18 <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fded 	bl	8000f18 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e092      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x68c>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002386:	430a      	orrs	r2, r1
 8002388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002390:	f7ff fc44 	bl	8001c1c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a4:	f7fe fdb8 	bl	8000f18 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fdb4 	bl	8000f18 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e059      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ef      	beq.n	80023ac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	e050      	b.n	8002470 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e04f      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d147      	bne.n	8002470 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023e0:	f7ff fc1c 	bl	8001c1c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f4:	f7fe fd90 	bl	8000f18 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fd8c 	bl	8000f18 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e031      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x664>
 800241c:	e028      	b.n	8002470 <HAL_RCC_OscConfig+0x6d8>
 800241e:	bf00      	nop
 8002420:	58000400 	.word	0x58000400
 8002424:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d01e      	beq.n	800246c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	f7ff fc04 	bl	8001c3a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe fd71 	bl	8000f18 <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fd6d 	bl	8000f18 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e012      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ef      	bne.n	800243a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_OscConfig+0x6e4>)
 8002466:	4013      	ands	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]
 800246a:	e001      	b.n	8002470 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3734      	adds	r7, #52	; 0x34
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}
 800247a:	bf00      	nop
 800247c:	eefefffc 	.word	0xeefefffc

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e12d      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b98      	ldr	r3, [pc, #608]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d91b      	bls.n	80024da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b95      	ldr	r3, [pc, #596]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4993      	ldr	r1, [pc, #588]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b2:	f7fe fd31 	bl	8000f18 <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024ba:	f7fe fd2d 	bl	8000f18 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e111      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024cc:	4b8a      	ldr	r3, [pc, #552]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d1ef      	bne.n	80024ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fafb 	bl	8001ae6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024f0:	f7fe fd12 	bl	8000f18 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024f8:	f7fe fd0e 	bl	8000f18 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0f2      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800250a:	f7ff fbe8 	bl	8001cde <LL_RCC_IsActiveFlag_HPRE>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f1      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d016      	beq.n	800254e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff faf2 	bl	8001b0e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800252a:	f7fe fcf5 	bl	8000f18 <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002532:	f7fe fcf1 	bl	8000f18 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0d5      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002544:	f7ff fbdd 	bl	8001d02 <LL_RCC_IsActiveFlag_C2HPRE>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f1      	beq.n	8002532 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff faeb 	bl	8001b3a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002564:	f7fe fcd8 	bl	8000f18 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800256c:	f7fe fcd4 	bl	8000f18 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0b8      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800257e:	f7ff fbd3 	bl	8001d28 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f1      	beq.n	800256c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d016      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fae5 	bl	8001b68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800259e:	f7fe fcbb 	bl	8000f18 <HAL_GetTick>
 80025a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025a6:	f7fe fcb7 	bl	8000f18 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e09b      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025b8:	f7ff fbc9 	bl	8001d4e <LL_RCC_IsActiveFlag_PPRE1>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f1      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d017      	beq.n	80025fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fadb 	bl	8001b90 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025da:	f7fe fc9d 	bl	8000f18 <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025e2:	f7fe fc99 	bl	8000f18 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e07d      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80025f4:	f7ff fbbd 	bl	8001d72 <LL_RCC_IsActiveFlag_PPRE2>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f1      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d043      	beq.n	8002692 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d106      	bne.n	8002620 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002612:	f7ff f87b 	bl	800170c <LL_RCC_HSE_IsReady>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d11e      	bne.n	800265a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e067      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d106      	bne.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002628:	f7ff fb16 	bl	8001c58 <LL_RCC_PLL_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d113      	bne.n	800265a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e05c      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800263e:	f7ff f9e3 	bl	8001a08 <LL_RCC_MSI_IsReady>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d108      	bne.n	800265a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e051      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800264c:	f7ff f88e 	bl	800176c <LL_RCC_HSI_IsReady>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e04a      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fa21 	bl	8001aa6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fc58 	bl	8000f18 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7fe fc54 	bl	8000f18 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e036      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	f7ff fa24 	bl	8001ace <LL_RCC_GetSysClkSource>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	429a      	cmp	r2, r3
 8002690:	d1ec      	bne.n	800266c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d21b      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 0207 	bic.w	r2, r3, #7
 80026a8:	4913      	ldr	r1, [pc, #76]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fc32 	bl	8000f18 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026b8:	f7fe fc2e 	bl	8000f18 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e012      	b.n	80026f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1ef      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026d8:	f000 f87e 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_RCC_ClockConfig+0x27c>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80026e2:	f7fe fc25 	bl	8000f30 <HAL_GetTickPrio>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fbc7 	bl	8000e7c <HAL_InitTick>
 80026ee:	4603      	mov	r3, r0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	58004000 	.word	0x58004000
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002706:	f7ff f9e2 	bl	8001ace <LL_RCC_GetSysClkSource>
 800270a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002712:	f7ff f99e 	bl	8001a52 <LL_RCC_MSI_GetRange>
 8002716:	4603      	mov	r3, r0
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e04b      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d102      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e045      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d10a      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800273a:	f7fe ffb7 	bl	80016ac <LL_RCC_HSE_IsEnabledDiv2>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e03a      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e037      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002750:	f7ff fab9 	bl	8001cc6 <LL_RCC_PLL_GetMainSource>
 8002754:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d003      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x64>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x6a>
 8002762:	e00d      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002766:	60bb      	str	r3, [r7, #8]
        break;
 8002768:	e015      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800276a:	f7fe ff9f 	bl	80016ac <LL_RCC_HSE_IsEnabledDiv2>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002776:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002778:	e00d      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800277c:	60bb      	str	r3, [r7, #8]
        break;
 800277e:	e00a      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002780:	f7ff f967 	bl	8001a52 <LL_RCC_MSI_GetRange>
 8002784:	4603      	mov	r3, r0
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	60bb      	str	r3, [r7, #8]
        break;
 8002794:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002796:	f7ff fa71 	bl	8001c7c <LL_RCC_PLL_GetN>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	fb03 f402 	mul.w	r4, r3, r2
 80027a2:	f7ff fa84 	bl	8001cae <LL_RCC_PLL_GetDivider>
 80027a6:	4603      	mov	r3, r0
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	3301      	adds	r3, #1
 80027ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80027b0:	f7ff fa71 	bl	8001c96 <LL_RCC_PLL_GetR>
 80027b4:	4603      	mov	r3, r0
 80027b6:	0f5b      	lsrs	r3, r3, #29
 80027b8:	3301      	adds	r3, #1
 80027ba:	fbb4 f3f3 	udiv	r3, r4, r3
 80027be:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80027c0:	68fb      	ldr	r3, [r7, #12]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08003f10 	.word	0x08003f10
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	01e84800 	.word	0x01e84800

080027d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d8:	b598      	push	{r3, r4, r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80027dc:	f7ff ff90 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80027e0:	4604      	mov	r4, r0
 80027e2:	f7ff f9e9 	bl	8001bb8 <LL_RCC_GetAHBPrescaler>
 80027e6:	4603      	mov	r3, r0
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	4a03      	ldr	r2, [pc, #12]	; (80027fc <HAL_RCC_GetHCLKFreq+0x24>)
 80027f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd98      	pop	{r3, r4, r7, pc}
 80027fc:	08003eb0 	.word	0x08003eb0

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002800:	b598      	push	{r3, r4, r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002804:	f7ff ffe8 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 8002808:	4604      	mov	r4, r0
 800280a:	f7ff f9ef 	bl	8001bec <LL_RCC_GetAPB1Prescaler>
 800280e:	4603      	mov	r3, r0
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd98      	pop	{r3, r4, r7, pc}
 8002828:	08003ef0 	.word	0x08003ef0

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b598      	push	{r3, r4, r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002830:	f7ff ffd2 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 8002834:	4604      	mov	r4, r0
 8002836:	f7ff f9e5 	bl	8001c04 <LL_RCC_GetAPB2Prescaler>
 800283a:	4603      	mov	r3, r0
 800283c:	0adb      	lsrs	r3, r3, #11
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd98      	pop	{r3, r4, r7, pc}
 8002854:	08003ef0 	.word	0x08003ef0

08002858 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2bb0      	cmp	r3, #176	; 0xb0
 8002864:	d903      	bls.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e007      	b.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800287e:	f7ff f9a7 	bl	8001bd0 <LL_RCC_GetAHB4Prescaler>
 8002882:	4603      	mov	r3, r0
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9c      	lsrs	r4, r3, #18
 80028a2:	f7fe fef5 	bl	8001690 <HAL_PWREx_GetVoltageRange>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4619      	mov	r1, r3
 80028aa:	4620      	mov	r0, r4
 80028ac:	f000 f80c 	bl	80028c8 <RCC_SetFlashLatency>
 80028b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	08003f10 	.word	0x08003f10
 80028c0:	08003eb0 	.word	0x08003eb0
 80028c4:	431bde83 	.word	0x431bde83

080028c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b093      	sub	sp, #76	; 0x4c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <RCC_SetFlashLatency+0xe8>)
 80028d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80028de:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <RCC_SetFlashLatency+0xec>)
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80028ea:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <RCC_SetFlashLatency+0xf0>)
 80028ec:	f107 040c 	add.w	r4, r7, #12
 80028f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80028f6:	2300      	movs	r3, #0
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d11a      	bne.n	8002938 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002902:	2300      	movs	r3, #0
 8002904:	643b      	str	r3, [r7, #64]	; 0x40
 8002906:	e013      	b.n	8002930 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	3348      	adds	r3, #72	; 0x48
 800290e:	443b      	add	r3, r7
 8002910:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d807      	bhi.n	800292a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800291a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	3348      	adds	r3, #72	; 0x48
 8002920:	443b      	add	r3, r7
 8002922:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002928:	e020      	b.n	800296c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	3301      	adds	r3, #1
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
 8002930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002932:	2b03      	cmp	r3, #3
 8002934:	d9e8      	bls.n	8002908 <RCC_SetFlashLatency+0x40>
 8002936:	e019      	b.n	800296c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002938:	2300      	movs	r3, #0
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293c:	e013      	b.n	8002966 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	3348      	adds	r3, #72	; 0x48
 8002944:	443b      	add	r3, r7
 8002946:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d807      	bhi.n	8002960 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	3348      	adds	r3, #72	; 0x48
 8002956:	443b      	add	r3, r7
 8002958:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800295c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800295e:	e005      	b.n	800296c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002962:	3301      	adds	r3, #1
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	2b02      	cmp	r3, #2
 800296a:	d9e8      	bls.n	800293e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <RCC_SetFlashLatency+0xf4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 0207 	bic.w	r2, r3, #7
 8002974:	4911      	ldr	r1, [pc, #68]	; (80029bc <RCC_SetFlashLatency+0xf4>)
 8002976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800297c:	f7fe facc 	bl	8000f18 <HAL_GetTick>
 8002980:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002982:	e008      	b.n	8002996 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002984:	f7fe fac8 	bl	8000f18 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e007      	b.n	80029a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <RCC_SetFlashLatency+0xf4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1ef      	bne.n	8002984 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	374c      	adds	r7, #76	; 0x4c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	08003e84 	.word	0x08003e84
 80029b4:	08003e94 	.word	0x08003e94
 80029b8:	08003ea0 	.word	0x08003ea0
 80029bc:	58004000 	.word	0x58004000

080029c0 <LL_RCC_LSE_IsEnabled>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <LL_RCC_LSE_IsEnabled+0x18>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <LL_RCC_LSE_IsEnabled+0x1a>
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_LSE_IsReady>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d101      	bne.n	80029fc <LL_RCC_LSE_IsReady+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_RCC_LSE_IsReady+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_MSI_EnablePLLMode>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_SetRFWKPClockSource>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_SetSMPSClockSource>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_SetSMPSPrescaler>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_SetUSARTClockSource>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_SetLPUARTClockSource>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_SetI2CClockSource>:
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b12:	43db      	mvns	r3, r3
 8002b14:	401a      	ands	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_RCC_SetLPTIMClockSource>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_SetSAIClockSource>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_SetRNGClockSource>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_SetCLK48ClockSource>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_SetUSBClockSource>:
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe3 	bl	8002bc0 <LL_RCC_SetCLK48ClockSource>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <LL_RCC_SetADCClockSource>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_SetRTCClockSource>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_GetRTCClockSource>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_ForceBackupDomainReset>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_PLLSAI1_Enable>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_PLLSAI1_Disable>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_RCC_PLLSAI1_IsReady>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d06:	d101      	bne.n	8002d0c <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d24:	2300      	movs	r3, #0
 8002d26:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d034      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d3c:	d021      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d42:	d81b      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d48:	d01d      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d4e:	d815      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d58:	d110      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d6a:	e00d      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f94d 	bl	8003010 <RCCEx_PLLSAI1_ConfigNP>
 8002d76:	4603      	mov	r3, r0
 8002d78:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d7a:	e005      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
        break;
 8002d80:	e002      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fee8 	bl	8002b68 <LL_RCC_SetSAIClockSource>
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d046      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002daa:	f7ff ff56 	bl	8002c5a <LL_RCC_GetRTCClockSource>
 8002dae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d03c      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dba:	f7fe fc59 	bl	8001670 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff30 	bl	8002c2e <LL_RCC_SetRTCClockSource>
 8002dce:	e02e      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002dda:	f7ff ff4b 	bl	8002c74 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002dde:	f7ff ff5a 	bl	8002c96 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002dfa:	f7ff fde1 	bl	80029c0 <LL_RCC_LSE_IsEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d114      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e04:	f7fe f888 	bl	8000f18 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f884 	bl	8000f18 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d902      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	77fb      	strb	r3, [r7, #31]
              break;
 8002e22:	e004      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e24:	f7ff fdde 	bl	80029e4 <LL_RCC_LSE_IsReady>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d1ee      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	77bb      	strb	r3, [r7, #30]
 8002e32:	e001      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fe2a 	bl	8002aa2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe35 	bl	8002ace <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fe5d 	bl	8002b34 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fe52 	bl	8002b34 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe2a 	bl	8002afa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fe1f 	bl	8002afa <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d022      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fe8d 	bl	8002bec <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eda:	d107      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef4:	d10b      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f8e3 	bl	80030c6 <RCCEx_PLLSAI1_ConfigNQ>
 8002f00:	4603      	mov	r3, r0
 8002f02:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
 8002f0c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02b      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d008      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fe2a 	bl	8002b94 <LL_RCC_SetRNGClockSource>
 8002f40:	e00a      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff fe21 	bl	8002b94 <LL_RCC_SetRNGClockSource>
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fe34 	bl	8002bc0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f60:	d107      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d022      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fe3d 	bl	8002c02 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f8e3 	bl	800317c <RCCEx_PLLSAI1_ConfigNR>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fba:	7ffb      	ldrb	r3, [r7, #31]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
 8002fc2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fd26 	bl	8002a26 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fd45 	bl	8002a7a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fd2c 	bl	8002a52 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ffa:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003008:	f7ff fcfe 	bl	8002a08 <LL_RCC_MSI_EnablePLLMode>
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}

08003010 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800301c:	f7ff fe5b 	bl	8002cd6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003020:	f7fd ff7a 	bl	8000f18 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003026:	e009      	b.n	800303c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003028:	f7fd ff76 	bl	8000f18 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	73fb      	strb	r3, [r7, #15]
      break;
 800303a:	e004      	b.n	8003046 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800303c:	f7ff fe5a 	bl	8002cf4 <LL_RCC_PLLSAI1_IsReady>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d137      	bne.n	80030bc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003060:	4313      	orrs	r3, r2
 8003062:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003076:	4313      	orrs	r3, r2
 8003078:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800307a:	f7ff fe1d 	bl	8002cb8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307e:	f7fd ff4b 	bl	8000f18 <HAL_GetTick>
 8003082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003084:	e009      	b.n	800309a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003086:	f7fd ff47 	bl	8000f18 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d902      	bls.n	800309a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	73fb      	strb	r3, [r7, #15]
        break;
 8003098:	e004      	b.n	80030a4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800309a:	f7ff fe2b 	bl	8002cf4 <LL_RCC_PLLSAI1_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1f0      	bne.n	8003086 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b8:	4313      	orrs	r3, r2
 80030ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030d2:	f7ff fe00 	bl	8002cd6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030d6:	f7fd ff1f 	bl	8000f18 <HAL_GetTick>
 80030da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030dc:	e009      	b.n	80030f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030de:	f7fd ff1b 	bl	8000f18 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e004      	b.n	80030fc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030f2:	f7ff fdff 	bl	8002cf4 <LL_RCC_PLLSAI1_IsReady>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d137      	bne.n	8003172 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003116:	4313      	orrs	r3, r2
 8003118:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003130:	f7ff fdc2 	bl	8002cb8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fd fef0 	bl	8000f18 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800313a:	e009      	b.n	8003150 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800313c:	f7fd feec 	bl	8000f18 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d902      	bls.n	8003150 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	73fb      	strb	r3, [r7, #15]
        break;
 800314e:	e004      	b.n	800315a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003150:	f7ff fdd0 	bl	8002cf4 <LL_RCC_PLLSAI1_IsReady>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1f0      	bne.n	800313c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316e:	4313      	orrs	r3, r2
 8003170:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003188:	f7ff fda5 	bl	8002cd6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800318c:	f7fd fec4 	bl	8000f18 <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003192:	e009      	b.n	80031a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003194:	f7fd fec0 	bl	8000f18 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	73fb      	strb	r3, [r7, #15]
      break;
 80031a6:	e004      	b.n	80031b2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031a8:	f7ff fda4 	bl	8002cf4 <LL_RCC_PLLSAI1_IsReady>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d137      	bne.n	8003228 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031cc:	4313      	orrs	r3, r2
 80031ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031e6:	f7ff fd67 	bl	8002cb8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ea:	f7fd fe95 	bl	8000f18 <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031f0:	e009      	b.n	8003206 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f2:	f7fd fe91 	bl	8000f18 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d902      	bls.n	8003206 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	73fb      	strb	r3, [r7, #15]
        break;
 8003204:	e004      	b.n	8003210 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003206:	f7ff fd75 	bl	8002cf4 <LL_RCC_PLLSAI1_IsReady>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d1f0      	bne.n	80031f2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003224:	4313      	orrs	r3, r2
 8003226:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <LL_RCC_GetUSARTClockSource>:
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4013      	ands	r3, r2
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_RCC_GetLPUARTClockSource>:
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4013      	ands	r3, r2
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e042      	b.n	800330a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fc7e 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f82d 	bl	8003314 <UART_SetConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e022      	b.n	800330a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fa49 	bl	8003764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fad0 	bl	80038a8 <UART_CheckIdleState>
 8003308:	4603      	mov	r3, r0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b08c      	sub	sp, #48	; 0x30
 800331a:	af00      	add	r7, sp, #0
 800331c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	431a      	orrs	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4313      	orrs	r3, r2
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4baf      	ldr	r3, [pc, #700]	; (8003600 <UART_SetConfig+0x2ec>)
 8003344:	4013      	ands	r3, r2
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800334c:	430b      	orrs	r3, r1
 800334e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4aa4      	ldr	r2, [pc, #656]	; (8003604 <UART_SetConfig+0x2f0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337c:	4313      	orrs	r3, r2
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800338a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003394:	430b      	orrs	r3, r1
 8003396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f023 010f 	bic.w	r1, r3, #15
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a95      	ldr	r2, [pc, #596]	; (8003608 <UART_SetConfig+0x2f4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d125      	bne.n	8003404 <UART_SetConfig+0xf0>
 80033b8:	2003      	movs	r0, #3
 80033ba:	f7ff ff3a 	bl	8003232 <LL_RCC_GetUSARTClockSource>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d81b      	bhi.n	80033fc <UART_SetConfig+0xe8>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0xb8>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033ed 	.word	0x080033ed
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f5 	.word	0x080033f5
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e2:	e042      	b.n	800346a <UART_SetConfig+0x156>
 80033e4:	2302      	movs	r3, #2
 80033e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ea:	e03e      	b.n	800346a <UART_SetConfig+0x156>
 80033ec:	2304      	movs	r3, #4
 80033ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f2:	e03a      	b.n	800346a <UART_SetConfig+0x156>
 80033f4:	2308      	movs	r3, #8
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fa:	e036      	b.n	800346a <UART_SetConfig+0x156>
 80033fc:	2310      	movs	r3, #16
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003402:	e032      	b.n	800346a <UART_SetConfig+0x156>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <UART_SetConfig+0x2f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d12a      	bne.n	8003464 <UART_SetConfig+0x150>
 800340e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003412:	f7ff ff1e 	bl	8003252 <LL_RCC_GetLPUARTClockSource>
 8003416:	4603      	mov	r3, r0
 8003418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800341c:	d01a      	beq.n	8003454 <UART_SetConfig+0x140>
 800341e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003422:	d81b      	bhi.n	800345c <UART_SetConfig+0x148>
 8003424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003428:	d00c      	beq.n	8003444 <UART_SetConfig+0x130>
 800342a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342e:	d815      	bhi.n	800345c <UART_SetConfig+0x148>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <UART_SetConfig+0x128>
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d008      	beq.n	800344c <UART_SetConfig+0x138>
 800343a:	e00f      	b.n	800345c <UART_SetConfig+0x148>
 800343c:	2300      	movs	r3, #0
 800343e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003442:	e012      	b.n	800346a <UART_SetConfig+0x156>
 8003444:	2302      	movs	r3, #2
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344a:	e00e      	b.n	800346a <UART_SetConfig+0x156>
 800344c:	2304      	movs	r3, #4
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003452:	e00a      	b.n	800346a <UART_SetConfig+0x156>
 8003454:	2308      	movs	r3, #8
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e006      	b.n	800346a <UART_SetConfig+0x156>
 800345c:	2310      	movs	r3, #16
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e002      	b.n	800346a <UART_SetConfig+0x156>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a65      	ldr	r2, [pc, #404]	; (8003604 <UART_SetConfig+0x2f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	f040 8097 	bne.w	80035a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800347a:	2b08      	cmp	r3, #8
 800347c:	d823      	bhi.n	80034c6 <UART_SetConfig+0x1b2>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0x170>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034c7 	.word	0x080034c7
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034c7 	.word	0x080034c7
 8003494:	080034b7 	.word	0x080034b7
 8003498:	080034c7 	.word	0x080034c7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034c7 	.word	0x080034c7
 80034a4:	080034bf 	.word	0x080034bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7ff f9aa 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ae:	e010      	b.n	80034d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <UART_SetConfig+0x2f8>)
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034b4:	e00d      	b.n	80034d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b6:	f7ff f923 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80034ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034bc:	e009      	b.n	80034d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034c4:	e005      	b.n	80034d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 812b 	beq.w	8003730 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	4a4c      	ldr	r2, [pc, #304]	; (8003610 <UART_SetConfig+0x2fc>)
 80034e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e4:	461a      	mov	r2, r3
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d305      	bcc.n	800350a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	429a      	cmp	r2, r3
 8003508:	d903      	bls.n	8003512 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003510:	e10e      	b.n	8003730 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	60fa      	str	r2, [r7, #12]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <UART_SetConfig+0x2fc>)
 8003520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003524:	b29b      	uxth	r3, r3
 8003526:	2200      	movs	r2, #0
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003534:	f7fc fe22 	bl	800017c <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	020b      	lsls	r3, r1, #8
 800354a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800354e:	0202      	lsls	r2, r0, #8
 8003550:	6979      	ldr	r1, [r7, #20]
 8003552:	6849      	ldr	r1, [r1, #4]
 8003554:	0849      	lsrs	r1, r1, #1
 8003556:	2000      	movs	r0, #0
 8003558:	460c      	mov	r4, r1
 800355a:	4605      	mov	r5, r0
 800355c:	eb12 0804 	adds.w	r8, r2, r4
 8003560:	eb43 0905 	adc.w	r9, r3, r5
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	469a      	mov	sl, r3
 800356c:	4693      	mov	fp, r2
 800356e:	4652      	mov	r2, sl
 8003570:	465b      	mov	r3, fp
 8003572:	4640      	mov	r0, r8
 8003574:	4649      	mov	r1, r9
 8003576:	f7fc fe01 	bl	800017c <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4613      	mov	r3, r2
 8003580:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003588:	d308      	bcc.n	800359c <UART_SetConfig+0x288>
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003590:	d204      	bcs.n	800359c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	e0c9      	b.n	8003730 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035a2:	e0c5      	b.n	8003730 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ac:	d16d      	bne.n	800368a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80035ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035b2:	3b01      	subs	r3, #1
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d82d      	bhi.n	8003614 <UART_SetConfig+0x300>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <UART_SetConfig+0x2ac>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035e1 	.word	0x080035e1
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	08003615 	.word	0x08003615
 80035cc:	080035ef 	.word	0x080035ef
 80035d0:	08003615 	.word	0x08003615
 80035d4:	08003615 	.word	0x08003615
 80035d8:	08003615 	.word	0x08003615
 80035dc:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7ff f924 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035e6:	e01b      	b.n	8003620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <UART_SetConfig+0x2f8>)
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035ec:	e018      	b.n	8003620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7ff f887 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80035f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035f4:	e014      	b.n	8003620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035fc:	e010      	b.n	8003620 <UART_SetConfig+0x30c>
 80035fe:	bf00      	nop
 8003600:	cfff69f3 	.word	0xcfff69f3
 8003604:	40008000 	.word	0x40008000
 8003608:	40013800 	.word	0x40013800
 800360c:	00f42400 	.word	0x00f42400
 8003610:	08003f50 	.word	0x08003f50
      default:
        pclk = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800361e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8084 	beq.w	8003730 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	4a4b      	ldr	r2, [pc, #300]	; (800375c <UART_SetConfig+0x448>)
 800362e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003632:	461a      	mov	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	fbb3 f3f2 	udiv	r3, r3, r2
 800363a:	005a      	lsls	r2, r3, #1
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	441a      	add	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d916      	bls.n	8003682 <UART_SetConfig+0x36e>
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d212      	bcs.n	8003682 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	b29a      	uxth	r2, r3
 8003672:	8bfb      	ldrh	r3, [r7, #30]
 8003674:	4313      	orrs	r3, r2
 8003676:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	8bfa      	ldrh	r2, [r7, #30]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	e056      	b.n	8003730 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003688:	e052      	b.n	8003730 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800368a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800368e:	3b01      	subs	r3, #1
 8003690:	2b07      	cmp	r3, #7
 8003692:	d822      	bhi.n	80036da <UART_SetConfig+0x3c6>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <UART_SetConfig+0x388>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036cb 	.word	0x080036cb
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036db 	.word	0x080036db
 80036b8:	080036d3 	.word	0x080036d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7ff f8b6 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036c2:	e010      	b.n	80036e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c4:	4b26      	ldr	r3, [pc, #152]	; (8003760 <UART_SetConfig+0x44c>)
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036c8:	e00d      	b.n	80036e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ca:	f7ff f819 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80036ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d0:	e009      	b.n	80036e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036d8:	e005      	b.n	80036e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036e4:	bf00      	nop
    }

    if (pclk != 0U)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d021      	beq.n	8003730 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <UART_SetConfig+0x448>)
 80036f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	441a      	add	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	d909      	bls.n	800372a <UART_SetConfig+0x416>
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371c:	d205      	bcs.n	800372a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	b29a      	uxth	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	e002      	b.n	8003730 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2201      	movs	r2, #1
 8003734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2201      	movs	r2, #1
 800373c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2200      	movs	r2, #0
 8003744:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800374c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003750:	4618      	mov	r0, r3
 8003752:	3730      	adds	r7, #48	; 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375a:	bf00      	nop
 800375c:	08003f50 	.word	0x08003f50
 8003760:	00f42400 	.word	0x00f42400

08003764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01a      	beq.n	800387a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003862:	d10a      	bne.n	800387a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b098      	sub	sp, #96	; 0x60
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b8:	f7fd fb2e 	bl	8000f18 <HAL_GetTick>
 80038bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d12f      	bne.n	800392c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d4:	2200      	movs	r2, #0
 80038d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f88e 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d022      	beq.n	800392c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fa:	653b      	str	r3, [r7, #80]	; 0x50
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
 8003906:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800390a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e6      	bne.n	80038e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e063      	b.n	80039f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d149      	bne.n	80039ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003942:	2200      	movs	r2, #0
 8003944:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f857 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03c      	beq.n	80039ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	623b      	str	r3, [r7, #32]
   return(result);
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
 8003974:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e6      	bne.n	8003954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	60fb      	str	r3, [r7, #12]
   return(result);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a6:	61fa      	str	r2, [r7, #28]
 80039a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	617b      	str	r3, [r7, #20]
   return(result);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e012      	b.n	80039f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3758      	adds	r7, #88	; 0x58
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0c:	e049      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d045      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fd fa7f 	bl	8000f18 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e048      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d031      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d110      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2208      	movs	r2, #8
 8003a52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f838 	bl	8003aca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e029      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7c:	d111      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f81e 	bl	8003aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0a6      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b095      	sub	sp, #84	; 0x54
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
 8003af2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e6      	bne.n	8003ad2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e3      	bne.n	8003b04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d118      	bne.n	8003b76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f023 0310 	bic.w	r3, r3, #16
 8003b58:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e6      	bne.n	8003b44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b8a:	bf00      	nop
 8003b8c:	3754      	adds	r7, #84	; 0x54
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UARTEx_DisableFifoMode+0x16>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e027      	b.n	8003bfc <HAL_UARTEx_DisableFifoMode+0x66>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	; 0x24
 8003bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e02d      	b.n	8003c7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f84f 	bl	8003d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e02d      	b.n	8003cf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f811 	bl	8003d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d20:	e031      	b.n	8003d86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d22:	2308      	movs	r3, #8
 8003d24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d26:	2308      	movs	r3, #8
 8003d28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	0e5b      	lsrs	r3, r3, #25
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	0f5b      	lsrs	r3, r3, #29
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	7b3a      	ldrb	r2, [r7, #12]
 8003d4e:	4911      	ldr	r1, [pc, #68]	; (8003d94 <UARTEx_SetNbDataToProcess+0x94>)
 8003d50:	5c8a      	ldrb	r2, [r1, r2]
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d56:	7b3a      	ldrb	r2, [r7, #12]
 8003d58:	490f      	ldr	r1, [pc, #60]	; (8003d98 <UARTEx_SetNbDataToProcess+0x98>)
 8003d5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	7b7a      	ldrb	r2, [r7, #13]
 8003d6c:	4909      	ldr	r1, [pc, #36]	; (8003d94 <UARTEx_SetNbDataToProcess+0x94>)
 8003d6e:	5c8a      	ldrb	r2, [r1, r2]
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d74:	7b7a      	ldrb	r2, [r7, #13]
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <UARTEx_SetNbDataToProcess+0x98>)
 8003d78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	08003f68 	.word	0x08003f68
 8003d98:	08003f70 	.word	0x08003f70

08003d9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003da4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003da8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	f107 0014 	add.w	r0, r7, #20
 8003de0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	b004      	add	sp, #16
 8003e12:	4770      	bx	lr

08003e14 <__libc_init_array>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4d0d      	ldr	r5, [pc, #52]	; (8003e4c <__libc_init_array+0x38>)
 8003e18:	4c0d      	ldr	r4, [pc, #52]	; (8003e50 <__libc_init_array+0x3c>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	2600      	movs	r6, #0
 8003e20:	42a6      	cmp	r6, r4
 8003e22:	d109      	bne.n	8003e38 <__libc_init_array+0x24>
 8003e24:	4d0b      	ldr	r5, [pc, #44]	; (8003e54 <__libc_init_array+0x40>)
 8003e26:	4c0c      	ldr	r4, [pc, #48]	; (8003e58 <__libc_init_array+0x44>)
 8003e28:	f000 f820 	bl	8003e6c <_init>
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	2600      	movs	r6, #0
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	d105      	bne.n	8003e42 <__libc_init_array+0x2e>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3c:	4798      	blx	r3
 8003e3e:	3601      	adds	r6, #1
 8003e40:	e7ee      	b.n	8003e20 <__libc_init_array+0xc>
 8003e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e46:	4798      	blx	r3
 8003e48:	3601      	adds	r6, #1
 8003e4a:	e7f2      	b.n	8003e32 <__libc_init_array+0x1e>
 8003e4c:	08003f80 	.word	0x08003f80
 8003e50:	08003f80 	.word	0x08003f80
 8003e54:	08003f80 	.word	0x08003f80
 8003e58:	08003f84 	.word	0x08003f84

08003e5c <memset>:
 8003e5c:	4402      	add	r2, r0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <_init>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	bf00      	nop
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr

08003e78 <_fini>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr
