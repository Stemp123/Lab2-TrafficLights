
Lab2-TrafficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08003f8c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ac  20000014  08003f98  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003c0  08003f98  000203c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014032  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027b4  00000000  00000000  00034076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001418  00000000  00000000  00036830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001340  00000000  00000000  00037c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021019  00000000  00000000  00038f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000113fa  00000000  00000000  00059fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d4ef5  00000000  00000000  0006b39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00140290  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005428  00000000  00000000  001402e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003e70 	.word	0x08003e70

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003e70 	.word	0x08003e70

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <reset_traffic_lights>:
	ev_button_push,
	ev_state_timeout,
	ev_return_state
};

void reset_traffic_lights(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <reset_traffic_lights+0x3c>)
 80004ea:	f000 ffa7 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2102      	movs	r1, #2
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <reset_traffic_lights+0x3c>)
 80004f4:	f000 ffa2 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <reset_traffic_lights+0x3c>)
 80004fe:	f000 ff9d 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2108      	movs	r1, #8
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <reset_traffic_lights+0x3c>)
 8000508:	f000 ff98 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <reset_traffic_lights+0x3c>)
 8000512:	f000 ff93 	bl	800143c <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	48000800 	.word	0x48000800

08000520 <set_traffic_lights>:

void set_traffic_lights(enum traffic_light_state state) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	3b06      	subs	r3, #6
 800052e:	2b19      	cmp	r3, #25
 8000530:	f200 80ac 	bhi.w	800068c <set_traffic_lights+0x16c>
 8000534:	a201      	add	r2, pc, #4	; (adr r2, 800053c <set_traffic_lights+0x1c>)
 8000536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053a:	bf00      	nop
 800053c:	0800062f 	.word	0x0800062f
 8000540:	0800068d 	.word	0x0800068d
 8000544:	0800068d 	.word	0x0800068d
 8000548:	0800068d 	.word	0x0800068d
 800054c:	080005ef 	.word	0x080005ef
 8000550:	0800068d 	.word	0x0800068d
 8000554:	0800068d 	.word	0x0800068d
 8000558:	0800068d 	.word	0x0800068d
 800055c:	0800068d 	.word	0x0800068d
 8000560:	0800068d 	.word	0x0800068d
 8000564:	0800068d 	.word	0x0800068d
 8000568:	0800060f 	.word	0x0800060f
 800056c:	080005a5 	.word	0x080005a5
 8000570:	0800068d 	.word	0x0800068d
 8000574:	0800068d 	.word	0x0800068d
 8000578:	0800068d 	.word	0x0800068d
 800057c:	0800068d 	.word	0x0800068d
 8000580:	0800068d 	.word	0x0800068d
 8000584:	0800068d 	.word	0x0800068d
 8000588:	0800068d 	.word	0x0800068d
 800058c:	080005c5 	.word	0x080005c5
 8000590:	0800068d 	.word	0x0800068d
 8000594:	0800068d 	.word	0x0800068d
 8000598:	0800068d 	.word	0x0800068d
 800059c:	0800068d 	.word	0x0800068d
 80005a0:	0800064f 	.word	0x0800064f
		case s_CarsRed_PedestrianRed:
			reset_traffic_lights();
 80005a4:	f7ff ff9c 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianRed;
 80005a8:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <set_traffic_lights+0x174>)
 80005aa:	2212      	movs	r2, #18
 80005ac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4839      	ldr	r0, [pc, #228]	; (8000698 <set_traffic_lights+0x178>)
 80005b4:	f000 ff42 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4836      	ldr	r0, [pc, #216]	; (8000698 <set_traffic_lights+0x178>)
 80005be:	f000 ff3d 	bl	800143c <HAL_GPIO_WritePin>
			break;
 80005c2:	e063      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsRedYellow_PedestrianRed:
			reset_traffic_lights();
 80005c4:	f7ff ff8c 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsRedYellow_PedestrianRed;
 80005c8:	4b32      	ldr	r3, [pc, #200]	; (8000694 <set_traffic_lights+0x174>)
 80005ca:	221a      	movs	r2, #26
 80005cc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2101      	movs	r1, #1
 80005d2:	4831      	ldr	r0, [pc, #196]	; (8000698 <set_traffic_lights+0x178>)
 80005d4:	f000 ff32 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	482e      	ldr	r0, [pc, #184]	; (8000698 <set_traffic_lights+0x178>)
 80005de:	f000 ff2d 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2108      	movs	r1, #8
 80005e6:	482c      	ldr	r0, [pc, #176]	; (8000698 <set_traffic_lights+0x178>)
 80005e8:	f000 ff28 	bl	800143c <HAL_GPIO_WritePin>
			break;
 80005ec:	e04e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsYellow_PedestrianRed:
			reset_traffic_lights();
 80005ee:	f7ff ff77 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsYellow_PedestrianRed;
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <set_traffic_lights+0x174>)
 80005f4:	220a      	movs	r2, #10
 80005f6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2102      	movs	r1, #2
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <set_traffic_lights+0x178>)
 80005fe:	f000 ff1d 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	4824      	ldr	r0, [pc, #144]	; (8000698 <set_traffic_lights+0x178>)
 8000608:	f000 ff18 	bl	800143c <HAL_GPIO_WritePin>
			break;
 800060c:	e03e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsRed_PedestrianGreen:
			reset_traffic_lights();
 800060e:	f7ff ff67 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianGreen;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <set_traffic_lights+0x174>)
 8000614:	2211      	movs	r2, #17
 8000616:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <set_traffic_lights+0x178>)
 800061e:	f000 ff0d 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <set_traffic_lights+0x178>)
 8000628:	f000 ff08 	bl	800143c <HAL_GPIO_WritePin>
			break;
 800062c:	e02e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_CarsGreen_PedestrianRed:
			reset_traffic_lights();
 800062e:	f7ff ff57 	bl	80004e0 <reset_traffic_lights>
			currentState = s_CarsGreen_PedestrianRed;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <set_traffic_lights+0x174>)
 8000634:	2206      	movs	r2, #6
 8000636:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2104      	movs	r1, #4
 800063c:	4816      	ldr	r0, [pc, #88]	; (8000698 <set_traffic_lights+0x178>)
 800063e:	f000 fefd 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2108      	movs	r1, #8
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <set_traffic_lights+0x178>)
 8000648:	f000 fef8 	bl	800143c <HAL_GPIO_WritePin>
			break;
 800064c:	e01e      	b.n	800068c <set_traffic_lights+0x16c>
		case s_init:
			reset_traffic_lights();
 800064e:	f7ff ff47 	bl	80004e0 <reset_traffic_lights>
			currentState = s_init;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <set_traffic_lights+0x174>)
 8000654:	221f      	movs	r2, #31
 8000656:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <set_traffic_lights+0x178>)
 800065e:	f000 feed 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2102      	movs	r1, #2
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <set_traffic_lights+0x178>)
 8000668:	f000 fee8 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2104      	movs	r1, #4
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <set_traffic_lights+0x178>)
 8000672:	f000 fee3 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <set_traffic_lights+0x178>)
 800067c:	f000 fede 	bl	800143c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <set_traffic_lights+0x178>)
 8000686:	f000 fed9 	bl	800143c <HAL_GPIO_WritePin>
			break;
 800068a:	bf00      	nop
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200003b8 	.word	0x200003b8
 8000698:	48000800 	.word	0x48000800

0800069c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a2:	f000 fbcd 	bl	8000e40 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a6:	f000 f8b1 	bl	800080c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006aa:	f000 f925 	bl	80008f8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ae:	f000 f9b7 	bl	8000a20 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80006b2:	f000 f93f 	bl	8000934 <MX_USART1_UART_Init>
	MX_USB_PCD_Init();
 80006b6:	f000 f98b 	bl	80009d0 <MX_USB_PCD_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	set_traffic_lights(s_init);
 80006ba:	201f      	movs	r0, #31
 80006bc:	f7ff ff30 	bl	8000520 <set_traffic_lights>
	enum event currentEvent;
	int ticks_left_in_state = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]

	while (1)
	{
	    uint32_t buttonPressed = GPIOB->IDR & BTN_Pin;
 80006c4:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <main+0x168>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	607b      	str	r3, [r7, #4]

	    if (buttonPressed && (currentState == s_init || currentState == s_CarsGreen_PedestrianRed))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <main+0x4c>
 80006d4:	4b4c      	ldr	r3, [pc, #304]	; (8000808 <main+0x16c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b1f      	cmp	r3, #31
 80006da:	d003      	beq.n	80006e4 <main+0x48>
 80006dc:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <main+0x16c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d101      	bne.n	80006e8 <main+0x4c>
	        currentEvent = ev_button_push;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]

			if (ticks_left_in_state == 0){
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d17c      	bne.n	80007e8 <main+0x14c>
				switch (currentState){
 80006ee:	4b46      	ldr	r3, [pc, #280]	; (8000808 <main+0x16c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b06      	subs	r3, #6
 80006f4:	2b19      	cmp	r3, #25
 80006f6:	f200 8080 	bhi.w	80007fa <main+0x15e>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <main+0x64>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000769 	.word	0x08000769
 8000704:	080007fb 	.word	0x080007fb
 8000708:	080007fb 	.word	0x080007fb
 800070c:	080007fb 	.word	0x080007fb
 8000710:	08000787 	.word	0x08000787
 8000714:	080007fb 	.word	0x080007fb
 8000718:	080007fb 	.word	0x080007fb
 800071c:	080007fb 	.word	0x080007fb
 8000720:	080007fb 	.word	0x080007fb
 8000724:	080007fb 	.word	0x080007fb
 8000728:	080007fb 	.word	0x080007fb
 800072c:	080007c3 	.word	0x080007c3
 8000730:	08000793 	.word	0x08000793
 8000734:	080007fb 	.word	0x080007fb
 8000738:	080007fb 	.word	0x080007fb
 800073c:	080007fb 	.word	0x080007fb
 8000740:	080007fb 	.word	0x080007fb
 8000744:	080007fb 	.word	0x080007fb
 8000748:	080007fb 	.word	0x080007fb
 800074c:	080007fb 	.word	0x080007fb
 8000750:	080007b7 	.word	0x080007b7
 8000754:	080007fb 	.word	0x080007fb
 8000758:	080007fb 	.word	0x080007fb
 800075c:	080007fb 	.word	0x080007fb
 8000760:	080007fb 	.word	0x080007fb
 8000764:	080007d3 	.word	0x080007d3
					case s_CarsGreen_PedestrianRed:
						if (currentEvent == ev_button_push){
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d140      	bne.n	80007f0 <main+0x154>
							HAL_Delay(2000);
 800076e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000772:	f000 fbeb 	bl	8000f4c <HAL_Delay>
							set_traffic_lights(s_CarsYellow_PedestrianRed);
 8000776:	200a      	movs	r0, #10
 8000778:	f7ff fed2 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 25;
 800077c:	2319      	movs	r3, #25
 800077e:	60bb      	str	r3, [r7, #8]
							currentEvent = ev_none;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
						}
						break;
 8000784:	e034      	b.n	80007f0 <main+0x154>
					case s_CarsYellow_PedestrianRed:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 8000786:	2012      	movs	r0, #18
 8000788:	f7ff feca 	bl	8000520 <set_traffic_lights>
						ticks_left_in_state = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	60bb      	str	r3, [r7, #8]
						break;
 8000790:	e033      	b.n	80007fa <main+0x15e>
					case s_CarsRed_PedestrianRed:
						if(currentEvent == ev_none) {
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <main+0x108>
							set_traffic_lights(s_CarsRed_PedestrianGreen);
 8000798:	2011      	movs	r0, #17
 800079a:	f7ff fec1 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 50;
 800079e:	2332      	movs	r3, #50	; 0x32
 80007a0:	60bb      	str	r3, [r7, #8]
						} else if (currentEvent == ev_return_state){
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
							ticks_left_in_state = 20;
						}
						break;
 80007a2:	e027      	b.n	80007f4 <main+0x158>
						} else if (currentEvent == ev_return_state){
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d124      	bne.n	80007f4 <main+0x158>
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
 80007aa:	201a      	movs	r0, #26
 80007ac:	f7ff feb8 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 20;
 80007b0:	2314      	movs	r3, #20
 80007b2:	60bb      	str	r3, [r7, #8]
						break;
 80007b4:	e01e      	b.n	80007f4 <main+0x158>
					case s_CarsRedYellow_PedestrianRed:
						set_traffic_lights(s_CarsGreen_PedestrianRed);
 80007b6:	2006      	movs	r0, #6
 80007b8:	f7ff feb2 	bl	8000520 <set_traffic_lights>
						ticks_left_in_state = 15;
 80007bc:	230f      	movs	r3, #15
 80007be:	60bb      	str	r3, [r7, #8]
						break;
 80007c0:	e01b      	b.n	80007fa <main+0x15e>
					case s_CarsRed_PedestrianGreen:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 80007c2:	2012      	movs	r0, #18
 80007c4:	f7ff feac 	bl	8000520 <set_traffic_lights>
						ticks_left_in_state = 10;
 80007c8:	230a      	movs	r3, #10
 80007ca:	60bb      	str	r3, [r7, #8]
						currentEvent = ev_return_state;
 80007cc:	2303      	movs	r3, #3
 80007ce:	73fb      	strb	r3, [r7, #15]
						break;
 80007d0:	e013      	b.n	80007fa <main+0x15e>
					case s_init:
						if (currentEvent == ev_button_push){
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d10f      	bne.n	80007f8 <main+0x15c>
							currentEvent = ev_none;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
							set_traffic_lights(s_CarsGreen_PedestrianRed);
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff fe9f 	bl	8000520 <set_traffic_lights>
							ticks_left_in_state = 20;
 80007e2:	2314      	movs	r3, #20
 80007e4:	60bb      	str	r3, [r7, #8]
						}
						break;
 80007e6:	e007      	b.n	80007f8 <main+0x15c>
				}
			} else {
				ticks_left_in_state--;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	e004      	b.n	80007fa <main+0x15e>
						break;
 80007f0:	bf00      	nop
 80007f2:	e002      	b.n	80007fa <main+0x15e>
						break;
 80007f4:	bf00      	nop
 80007f6:	e000      	b.n	80007fa <main+0x15e>
						break;
 80007f8:	bf00      	nop
			}
			HAL_Delay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 fba6 	bl	8000f4c <HAL_Delay>
	{
 8000800:	e760      	b.n	80006c4 <main+0x28>
 8000802:	bf00      	nop
 8000804:	48000400 	.word	0x48000400
 8000808:	200003b8 	.word	0x200003b8

0800080c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09a      	sub	sp, #104	; 0x68
 8000810:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2248      	movs	r2, #72	; 0x48
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fb20 	bl	8003e60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800083c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000840:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f023 0303 	bic.w	r3, r3, #3
 800084c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000856:	f000 ff0d 	bl	8001674 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe10 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <SystemClock_Config+0xe8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xe8>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xe8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800087c:	2327      	movs	r3, #39	; 0x27
 800087e:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fa77 	bl	8001d9c <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xac>
	{
		Error_Handler();
 80008b4:	f000 f91a 	bl	8000aec <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008b8:	236f      	movs	r3, #111	; 0x6f
 80008ba:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fdd3 	bl	8002484 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xdc>
	{
		Error_Handler();
 80008e4:	f000 f902 	bl	8000aec <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80008e8:	f002 fb8e 	bl	8003008 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008ec:	bf00      	nop
 80008ee:	3768      	adds	r7, #104	; 0x68
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58000400 	.word	0x58000400

080008f8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2250      	movs	r2, #80	; 0x50
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f003 faab 	bl	8003e60 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4618      	mov	r0, r3
 800091c:	f002 f9fe 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 8000926:	f000 f8e1 	bl	8000aec <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_USART1_UART_Init+0x98>)
 800093c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 800095c:	220c      	movs	r2, #12
 800095e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4812      	ldr	r0, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000980:	f002 fc79 	bl	8003276 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x5a>
	{
		Error_Handler();
 800098a:	f000 f8af 	bl	8000aec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 8000992:	f003 f93b 	bl	8003c0c <HAL_UARTEx_SetTxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART1_UART_Init+0x6c>
	{
		Error_Handler();
 800099c:	f000 f8a6 	bl	8000aec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 80009a4:	f003 f970 	bl	8003c88 <HAL_UARTEx_SetRxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART1_UART_Init+0x7e>
	{
		Error_Handler();
 80009ae:	f000 f89d 	bl	8000aec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART1_UART_Init+0x94>)
 80009b4:	f003 f8f1 	bl	8003b9a <HAL_UARTEx_DisableFifoMode>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x8e>
	{
		Error_Handler();
 80009be:	f000 f895 	bl	8000aec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000030 	.word	0x20000030
 80009cc:	40013800 	.word	0x40013800

080009d0 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <MX_USB_PCD_Init+0x4c>)
 80009d8:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009dc:	2208      	movs	r2, #8
 80009de:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_USB_PCD_Init+0x48>)
 8000a06:	f000 fd31 	bl	800146c <HAL_PCD_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USB_PCD_Init+0x44>
	{
		Error_Handler();
 8000a10:	f000 f86c 	bl	8000aec <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000c4 	.word	0x200000c4
 8000a1c:	40006800 	.word	0x40006800

08000a20 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a34:	2004      	movs	r0, #4
 8000a36:	f7ff fd39 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff fd36 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fd33 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2008      	movs	r0, #8
 8000a48:	f7ff fd30 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	212f      	movs	r1, #47	; 0x2f
 8000a50:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0xc0>)
 8000a52:	f000 fcf3 	bl	800143c <HAL_GPIO_WritePin>
			|PED_GREEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2123      	movs	r1, #35	; 0x23
 8000a5a:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0xc4>)
 8000a5c:	f000 fcee 	bl	800143c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CARS_RED_Pin CARS_YELLOW_Pin CARS_GREEN_Pin PED_RED_Pin
                           PED_GREEN_Pin */
	GPIO_InitStruct.Pin = CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8000a60:	232f      	movs	r3, #47	; 0x2f
 8000a62:	607b      	str	r3, [r7, #4]
			|PED_GREEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0xc0>)
 8000a76:	f000 fb71 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0xc0>)
 8000a8c:	f000 fb66 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_Pin */
	GPIO_InitStruct.Pin = BTN_Pin;
 8000a90:	2304      	movs	r3, #4
 8000a92:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <MX_GPIO_Init+0xc4>)
 8000aa2:	f000 fb5b 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000aa6:	2323      	movs	r3, #35	; 0x23
 8000aa8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <MX_GPIO_Init+0xc4>)
 8000abc:	f000 fb4e 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0xc8>)
 8000ad2:	f000 fb43 	bl	800115c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	48000c00 	.word	0x48000c00

08000aec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>

08000af6 <LL_AHB2_GRP1_EnableClock>:
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	; 0x70
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2250      	movs	r2, #80	; 0x50
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 f94f 	bl	8003e60 <memset>
  if(huart->Instance==USART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d124      	bne.n	8000c16 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f89f 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ff82 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bec:	f7ff ffb5 	bl	8000b5a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff ff80 	bl	8000af6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bf6:	23c0      	movs	r3, #192	; 0xc0
 8000bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c06:	2307      	movs	r3, #7
 8000c08:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000c12:	f000 faa3 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3770      	adds	r7, #112	; 0x70
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40013800 	.word	0x40013800
 8000c24:	48000400 	.word	0x48000400

08000c28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	; 0x70
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2250      	movs	r2, #80	; 0x50
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f909 	bl	8003e60 <memset>
  if(hpcd->Instance==USB)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_PCD_MspInit+0xa8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d136      	bne.n	8000cc6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c5e:	2318      	movs	r3, #24
 8000c60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c72:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c78:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c7e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 f849 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c90:	f7ff ff2c 	bl	8000aec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ff2e 	bl	8000af6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000cac:	230a      	movs	r3, #10
 8000cae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f000 fa4f 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cbe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cc2:	f7ff ff31 	bl	8000b28 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	; 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40006800 	.word	0x40006800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f8e8 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <SystemInit+0x98>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <SystemInit+0x98>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d50:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d54:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <SystemInit+0x9c>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d72:	f023 0305 	bic.w	r3, r3, #5
 8000d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <SystemInit+0xa0>)
 8000d94:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <SystemInit+0xa0>)
 8000d9c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	faf6fefb 	.word	0xfaf6fefb
 8000dc8:	22041000 	.word	0x22041000

08000dcc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000dcc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd0:	3304      	adds	r3, #4

08000dd2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000dd6:	d3f9      	bcc.n	8000dcc <CopyDataInit>
  bx lr
 8000dd8:	4770      	bx	lr

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dda:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ddc:	3004      	adds	r0, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dde:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>
  bx lr
 8000de2:	4770      	bx	lr

08000de4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff ff9e 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <LoopForever+0x6>)
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <LoopForever+0xa>)
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <LoopForever+0xe>)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f7ff ffed 	bl	8000dd2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopForever+0x12>)
 8000dfa:	490c      	ldr	r1, [pc, #48]	; (8000e2c <LoopForever+0x16>)
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <LoopForever+0x1a>)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f7ff ffe7 	bl	8000dd2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <LoopForever+0x1e>)
 8000e06:	490c      	ldr	r1, [pc, #48]	; (8000e38 <LoopForever+0x22>)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f7ff ffe8 	bl	8000dde <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0e:	f003 f803 	bl	8003e18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e12:	f7ff fc43 	bl	800069c <main>

08000e16 <LoopForever>:

LoopForever:
  b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   r0, =_estack
 8000e18:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000014 	.word	0x20000014
 8000e24:	08003f8c 	.word	0x08003f8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e28:	20030000 	.word	0x20030000
 8000e2c:	20030000 	.word	0x20030000
 8000e30:	08003f98 	.word	0x08003f98
  INIT_BSS _sbss, _ebss
 8000e34:	20000014 	.word	0x20000014
 8000e38:	200003c0 	.word	0x200003c0

08000e3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_Init+0x3c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x3c>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f94e 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f80f 	bl	8000e80 <HAL_InitTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	e001      	b.n	8000e72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6e:	f7ff fe8d 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	58004000 	.word	0x58004000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d024      	beq.n	8000ede <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e94:	f001 fca2 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_InitTick+0x6c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f948 	bl	8001142 <HAL_SYSTICK_Config>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10f      	bne.n	8000ed8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d809      	bhi.n	8000ed2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec6:	f000 f922 	bl	800110e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <HAL_InitTick+0x70>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e004      	b.n	8000ee2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e001      	b.n	8000ee2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	2000000c 	.word	0x2000000c

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000010 	.word	0x20000010
 8000f18:	200003bc 	.word	0x200003bc

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200003bc 	.word	0x200003bc

08000f34 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTickPrio+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffe2 	bl	8000f1c <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffd2 	bl	8000f1c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000010 	.word	0x20000010

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff47 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff5e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff90 	bl	800104c <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5f 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb2 	bl	80010b4 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e14c      	b.n	8001406 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 813e 	beq.w	8001400 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d005      	beq.n	800119c <HAL_GPIO_Init+0x40>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 0201 	and.w	r2, r3, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b03      	cmp	r3, #3
 8001208:	d017      	beq.n	800123a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d123      	bne.n	800128e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	6939      	ldr	r1, [r7, #16]
 800128a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0203 	and.w	r2, r3, #3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8098 	beq.w	8001400 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fa:	d019      	beq.n	8001330 <HAL_GPIO_Init+0x1d4>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a4a      	ldr	r2, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x2cc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x1d0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a49      	ldr	r2, [pc, #292]	; (800142c <HAL_GPIO_Init+0x2d0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1cc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2d4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1c8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a47      	ldr	r2, [pc, #284]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1c4>
 800131c:	2304      	movs	r3, #4
 800131e:	e008      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001320:	2307      	movs	r3, #7
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001324:	2303      	movs	r3, #3
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001342:	4938      	ldr	r1, [pc, #224]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001374:	4a30      	ldr	r2, [pc, #192]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139e:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f aeab 	bne.w	800116c <HAL_GPIO_Init+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	48001000 	.word	0x48001000
 8001438:	58000800 	.word	0x58000800

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001458:	e002      	b.n	8001460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af06      	add	r7, sp, #24
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0cb      	b.n	8001616 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fbc8 	bl	8000c28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fc7b 	bl	8003da0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e040      	b.n	8001532 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3301      	adds	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	3303      	adds	r3, #3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3338      	adds	r3, #56	; 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	333c      	adds	r3, #60	; 0x3c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3340      	adds	r3, #64	; 0x40
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3b9      	bcc.n	80014b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e044      	b.n	80015cc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3b5      	bcc.n	8001542 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	687e      	ldr	r6, [r7, #4]
 80015de:	466d      	mov	r5, sp
 80015e0:	f106 0410 	add.w	r4, r6, #16
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	1d33      	adds	r3, r6, #4
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f002 fbf0 	bl	8003dd6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d102      	bne.n	8001614 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f805 	bl	800161e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800161e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001642:	b29b      	uxth	r3, r3
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001656:	b29b      	uxth	r3, r3
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	58000400 	.word	0x58000400

08001694 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_PWREx_GetVoltageRange+0x18>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	58000400 	.word	0x58000400

080016b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016c2:	d101      	bne.n	80016c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_RCC_HSE_Enable>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_RCC_HSE_Disable>:
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_RCC_HSE_IsReady>:
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001722:	d101      	bne.n	8001728 <LL_RCC_HSE_IsReady+0x18>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <LL_RCC_HSE_IsReady+0x1a>
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_RCC_HSI_Enable>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_RCC_HSI_Disable>:
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_RCC_HSI_IsReady>:
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001782:	d101      	bne.n	8001788 <LL_RCC_HSI_IsReady+0x18>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <LL_RCC_HSI_IsReady+0x1a>
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_RCC_HSI48_Enable>:
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_RCC_HSI48_Disable>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_RCC_HSI48_IsReady>:
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b02      	cmp	r3, #2
 8001814:	d101      	bne.n	800181a <LL_RCC_HSI48_IsReady+0x18>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_RCC_HSI48_IsReady+0x1a>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_RCC_LSE_Enable>:
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_RCC_LSE_Disable>:
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_RCC_LSE_EnableBypass>:
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_RCC_LSE_DisableBypass>:
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d101      	bne.n	80018c6 <LL_RCC_LSE_IsReady+0x18>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_RCC_LSE_IsReady+0x1a>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d101      	bne.n	800192e <LL_RCC_LSI1_IsReady+0x18>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_RCC_LSI1_IsReady+0x1a>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196c:	f023 0304 	bic.w	r3, r3, #4
 8001970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b08      	cmp	r3, #8
 8001990:	d101      	bne.n	8001996 <LL_RCC_LSI2_IsReady+0x18>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_RCC_LSI2_IsReady+0x1a>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019be:	4313      	orrs	r3, r2
 80019c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d101      	bne.n	8001a22 <LL_RCC_MSI_IsReady+0x16>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <LL_RCC_MSI_IsReady+0x18>
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a66:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2bb0      	cmp	r3, #176	; 0xb0
 8001a6c:	d901      	bls.n	8001a72 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001a6e:	23b0      	movs	r3, #176	; 0xb0
 8001a70:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 0203 	bic.w	r2, r3, #3
 8001abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b4e:	f023 020f 	bic.w	r2, r3, #15
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c6e:	d101      	bne.n	8001c74 <LL_RCC_PLL_IsReady+0x18>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <LL_RCC_PLL_IsReady+0x1a>
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d101      	bne.n	8001cfa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d1a:	d101      	bne.n	8001d20 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d101      	bne.n	8001d46 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d64:	d101      	bne.n	8001d6a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d88:	d101      	bne.n	8001d8e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b08d      	sub	sp, #52	; 0x34
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e363      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 808d 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbc:	f7ff fe89 	bl	8001ad2 <LL_RCC_GetSysClkSource>
 8001dc0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc2:	f7ff ff82 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 8001dc6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x3e>
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	d147      	bne.n	8001e64 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d144      	bne.n	8001e64 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e347      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001dea:	f7ff fe34 	bl	8001a56 <LL_RCC_MSI_GetRange>
 8001dee:	4603      	mov	r3, r0
 8001df0:	429c      	cmp	r4, r3
 8001df2:	d914      	bls.n	8001e1e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fd2f 	bl	800285c <RCC_SetFlashLatencyFromMSIRange>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e336      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe0e 	bl	8001a2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe32 	bl	8001a80 <LL_RCC_MSI_SetCalibTrimming>
 8001e1c:	e013      	b.n	8001e46 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe03 	bl	8001a2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe27 	bl	8001a80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd10 	bl	800285c <RCC_SetFlashLatencyFromMSIRange>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e317      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e46:	f000 fcc9 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4aa4      	ldr	r2, [pc, #656]	; (80020e0 <HAL_RCC_OscConfig+0x344>)
 8001e4e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e50:	4ba4      	ldr	r3, [pc, #656]	; (80020e4 <HAL_RCC_OscConfig+0x348>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f813 	bl	8000e80 <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d039      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e308      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01e      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e6c:	f7ff fdb0 	bl	80019d0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f854 	bl	8000f1c <HAL_GetTick>
 8001e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e78:	f7ff f850 	bl	8000f1c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e2f5      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e8a:	f7ff fdbf 	bl	8001a0c <LL_RCC_MSI_IsReady>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f1      	beq.n	8001e78 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fdc8 	bl	8001a2e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fdec 	bl	8001a80 <LL_RCC_MSI_SetCalibTrimming>
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eaa:	f7ff fda0 	bl	80019ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eae:	f7ff f835 	bl	8000f1c <HAL_GetTick>
 8001eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f831 	bl	8000f1c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e2d6      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ec8:	f7ff fda0 	bl	8001a0c <LL_RCC_MSI_IsReady>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f1      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x11a>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ed4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d047      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee2:	f7ff fdf6 	bl	8001ad2 <LL_RCC_GetSysClkSource>
 8001ee6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee8:	f7ff feef 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 8001eec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_OscConfig+0x164>
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d134      	bne.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e2b4      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x180>
 8001f16:	f7ff fbdd 	bl	80016d4 <LL_RCC_HSE_Enable>
 8001f1a:	e001      	b.n	8001f20 <HAL_RCC_OscConfig+0x184>
 8001f1c:	f7ff fbe9 	bl	80016f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fff8 	bl	8000f1c <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe fff4 	bl	8000f1c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e299      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f42:	f7ff fbe5 	bl	8001710 <LL_RCC_HSE_IsReady>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f1      	beq.n	8001f30 <HAL_RCC_OscConfig+0x194>
 8001f4c:	e011      	b.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7fe ffe5 	bl	8000f1c <HAL_GetTick>
 8001f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f56:	f7fe ffe1 	bl	8000f1c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e286      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f68:	f7ff fbd2 	bl	8001710 <LL_RCC_HSE_IsReady>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d04c      	beq.n	8002018 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	f7ff fda8 	bl	8001ad2 <LL_RCC_GetSysClkSource>
 8001f82:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f84:	f7ff fea1 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 8001f88:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d10e      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e266      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fbf1 	bl	8001794 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fb2:	e031      	b.n	8002018 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d019      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	f7ff fbba 	bl	8001734 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ffac 	bl	8000f1c <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ffa8 	bl	8000f1c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e24d      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fda:	f7ff fbc9 	bl	8001770 <LL_RCC_HSI_IsReady>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f1      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fbd3 	bl	8001794 <LL_RCC_HSI_SetCalibTrimming>
 8001fee:	e013      	b.n	8002018 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff0:	f7ff fbaf 	bl	8001752 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ff92 	bl	8000f1c <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7fe ff8e 	bl	8000f1c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e233      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800200e:	f7ff fbaf 	bl	8001770 <LL_RCC_HSI_IsReady>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f1      	bne.n	8001ffc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a3 	beq.w	8002178 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d076      	beq.n	8002128 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d046      	beq.n	80020d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002046:	f7ff fc66 	bl	8001916 <LL_RCC_LSI1_IsReady>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d113      	bne.n	8002078 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002050:	f7ff fc3f 	bl	80018d2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002054:	f7fe ff62 	bl	8000f1c <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800205c:	f7fe ff5e 	bl	8000f1c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e203      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800206e:	f7ff fc52 	bl	8001916 <LL_RCC_LSI1_IsReady>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f1      	beq.n	800205c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002078:	f7ff fc5f 	bl	800193a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe ff4e 	bl	8000f1c <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002084:	f7fe ff4a 	bl	8000f1c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1ef      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002096:	f7ff fc72 	bl	800197e <LL_RCC_LSI2_IsReady>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f1      	beq.n	8002084 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fc7c 	bl	80019a2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80020aa:	f7ff fc23 	bl	80018f4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7fe ff35 	bl	8000f1c <HAL_GetTick>
 80020b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020b6:	f7fe ff31 	bl	8000f1c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1d6      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80020c8:	f7ff fc25 	bl	8001916 <LL_RCC_LSI1_IsReady>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f1      	bne.n	80020b6 <HAL_RCC_OscConfig+0x31a>
 80020d2:	e051      	b.n	8002178 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80020d4:	f7ff fbfd 	bl	80018d2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff20 	bl	8000f1c <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80020de:	e00c      	b.n	80020fa <HAL_RCC_OscConfig+0x35e>
 80020e0:	20000008 	.word	0x20000008
 80020e4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020e8:	f7fe ff18 	bl	8000f1c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1bd      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80020fa:	f7ff fc0c 	bl	8001916 <LL_RCC_LSI1_IsReady>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f1      	beq.n	80020e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002104:	f7ff fc2a 	bl	800195c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800210a:	f7fe ff07 	bl	8000f1c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1ac      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800211c:	f7ff fc2f 	bl	800197e <LL_RCC_LSI2_IsReady>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f1      	bne.n	800210a <HAL_RCC_OscConfig+0x36e>
 8002126:	e027      	b.n	8002178 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002128:	f7ff fc18 	bl	800195c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7fe fef6 	bl	8000f1c <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002134:	f7fe fef2 	bl	8000f1c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b03      	cmp	r3, #3
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e197      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002146:	f7ff fc1a 	bl	800197e <LL_RCC_LSI2_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f1      	bne.n	8002134 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002150:	f7ff fbd0 	bl	80018f4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fee2 	bl	8000f1c <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800215c:	f7fe fede 	bl	8000f1c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e183      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800216e:	f7ff fbd2 	bl	8001916 <LL_RCC_LSI1_IsReady>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f1      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d05b      	beq.n	800223c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002184:	4ba7      	ldr	r3, [pc, #668]	; (8002424 <HAL_RCC_OscConfig+0x688>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d114      	bne.n	80021ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002190:	f7ff fa70 	bl	8001674 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002194:	f7fe fec2 	bl	8000f1c <HAL_GetTick>
 8002198:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219c:	f7fe febe 	bl	8000f1c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e163      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ae:	4b9d      	ldr	r3, [pc, #628]	; (8002424 <HAL_RCC_OscConfig+0x688>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x42c>
 80021c2:	f7ff fb30 	bl	8001826 <LL_RCC_LSE_Enable>
 80021c6:	e00c      	b.n	80021e2 <HAL_RCC_OscConfig+0x446>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d104      	bne.n	80021da <HAL_RCC_OscConfig+0x43e>
 80021d0:	f7ff fb4b 	bl	800186a <LL_RCC_LSE_EnableBypass>
 80021d4:	f7ff fb27 	bl	8001826 <LL_RCC_LSE_Enable>
 80021d8:	e003      	b.n	80021e2 <HAL_RCC_OscConfig+0x446>
 80021da:	f7ff fb35 	bl	8001848 <LL_RCC_LSE_Disable>
 80021de:	f7ff fb55 	bl	800188c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d014      	beq.n	8002214 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe fe97 	bl	8000f1c <HAL_GetTick>
 80021ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fe93 	bl	8000f1c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e136      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002208:	f7ff fb51 	bl	80018ae <LL_RCC_LSE_IsReady>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ef      	beq.n	80021f2 <HAL_RCC_OscConfig+0x456>
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7fe fe82 	bl	8000f1c <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7fe fe7e 	bl	8000f1c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e121      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002232:	f7ff fb3c 	bl	80018ae <LL_RCC_LSE_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ef      	bne.n	800221c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d014      	beq.n	800227a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002250:	f7ff fab5 	bl	80017be <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7fe fe62 	bl	8000f1c <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225c:	f7fe fe5e 	bl	8000f1c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e103      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800226e:	f7ff fac8 	bl	8001802 <LL_RCC_HSI48_IsReady>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f1      	beq.n	800225c <HAL_RCC_OscConfig+0x4c0>
 8002278:	e013      	b.n	80022a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800227a:	f7ff fab1 	bl	80017e0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe fe4d 	bl	8000f1c <HAL_GetTick>
 8002282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002286:	f7fe fe49 	bl	8000f1c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0ee      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002298:	f7ff fab3 	bl	8001802 <LL_RCC_HSI48_IsReady>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f1      	bne.n	8002286 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80e4 	beq.w	8002474 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ac:	f7ff fc11 	bl	8001ad2 <LL_RCC_GetSysClkSource>
 80022b0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	2b02      	cmp	r3, #2
 80022c0:	f040 80b4 	bne.w	800242c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d123      	bne.n	800231a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d11c      	bne.n	800231a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d114      	bne.n	800231a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d10d      	bne.n	800231a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d05d      	beq.n	80023d6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d058      	beq.n	80023d2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0a1      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002332:	f7ff fc84 	bl	8001c3e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002336:	f7fe fdf1 	bl	8000f1c <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fded 	bl	8000f1c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e092      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ef      	bne.n	800233e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCC_OscConfig+0x68c>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002376:	0212      	lsls	r2, r2, #8
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800238a:	430a      	orrs	r2, r1
 800238c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002394:	f7ff fc44 	bl	8001c20 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a8:	f7fe fdb8 	bl	8000f1c <HAL_GetTick>
 80023ac:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fdb4 	bl	8000f1c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e059      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	e050      	b.n	8002474 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d147      	bne.n	8002474 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023e4:	f7ff fc1c 	bl	8001c20 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f8:	f7fe fd90 	bl	8000f1c <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fd8c 	bl	8000f1c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e031      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ef      	beq.n	8002400 <HAL_RCC_OscConfig+0x664>
 8002420:	e028      	b.n	8002474 <HAL_RCC_OscConfig+0x6d8>
 8002422:	bf00      	nop
 8002424:	58000400 	.word	0x58000400
 8002428:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d01e      	beq.n	8002470 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	f7ff fc04 	bl	8001c3e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe fd71 	bl	8000f1c <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fd6d 	bl	8000f1c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e012      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_OscConfig+0x6e4>)
 800246a:	4013      	ands	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
 800246e:	e001      	b.n	8002474 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3734      	adds	r7, #52	; 0x34
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	eefefffc 	.word	0xeefefffc

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e12d      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b98      	ldr	r3, [pc, #608]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d91b      	bls.n	80024de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b95      	ldr	r3, [pc, #596]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4993      	ldr	r1, [pc, #588]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b6:	f7fe fd31 	bl	8000f1c <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024be:	f7fe fd2d 	bl	8000f1c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e111      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d1ef      	bne.n	80024be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fafb 	bl	8001aea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fd12 	bl	8000f1c <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024fc:	f7fe fd0e 	bl	8000f1c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0f2      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800250e:	f7ff fbe8 	bl	8001ce2 <LL_RCC_IsActiveFlag_HPRE>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f1      	beq.n	80024fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff faf2 	bl	8001b12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800252e:	f7fe fcf5 	bl	8000f1c <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002536:	f7fe fcf1 	bl	8000f1c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0d5      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002548:	f7ff fbdd 	bl	8001d06 <LL_RCC_IsActiveFlag_C2HPRE>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f1      	beq.n	8002536 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff faeb 	bl	8001b3e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002568:	f7fe fcd8 	bl	8000f1c <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002570:	f7fe fcd4 	bl	8000f1c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e0b8      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002582:	f7ff fbd3 	bl	8001d2c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f1      	beq.n	8002570 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fae5 	bl	8001b6c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025a2:	f7fe fcbb 	bl	8000f1c <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025aa:	f7fe fcb7 	bl	8000f1c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e09b      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025bc:	f7ff fbc9 	bl	8001d52 <LL_RCC_IsActiveFlag_PPRE1>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f1      	beq.n	80025aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d017      	beq.n	8002602 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fadb 	bl	8001b94 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025de:	f7fe fc9d 	bl	8000f1c <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025e6:	f7fe fc99 	bl	8000f1c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e07d      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80025f8:	f7ff fbbd 	bl	8001d76 <LL_RCC_IsActiveFlag_PPRE2>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f1      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d043      	beq.n	8002696 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d106      	bne.n	8002624 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002616:	f7ff f87b 	bl	8001710 <LL_RCC_HSE_IsReady>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11e      	bne.n	800265e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e067      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d106      	bne.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800262c:	f7ff fb16 	bl	8001c5c <LL_RCC_PLL_IsReady>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d113      	bne.n	800265e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e05c      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002642:	f7ff f9e3 	bl	8001a0c <LL_RCC_MSI_IsReady>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d108      	bne.n	800265e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e051      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002650:	f7ff f88e 	bl	8001770 <LL_RCC_HSI_IsReady>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e04a      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fa21 	bl	8001aaa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fc58 	bl	8000f1c <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe fc54 	bl	8000f1c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e036      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	f7ff fa24 	bl	8001ad2 <LL_RCC_GetSysClkSource>
 800268a:	4602      	mov	r2, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	429a      	cmp	r2, r3
 8002694:	d1ec      	bne.n	8002670 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d21b      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4913      	ldr	r1, [pc, #76]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fc32 	bl	8000f1c <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026bc:	f7fe fc2e 	bl	8000f1c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e012      	b.n	80026f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_ClockConfig+0x278>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1ef      	bne.n	80026bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026dc:	f000 f87e 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_RCC_ClockConfig+0x27c>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80026e6:	f7fe fc25 	bl	8000f34 <HAL_GetTickPrio>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fbc7 	bl	8000e80 <HAL_InitTick>
 80026f2:	4603      	mov	r3, r0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	58004000 	.word	0x58004000
 8002700:	20000008 	.word	0x20000008

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	f7ff f9e2 	bl	8001ad2 <LL_RCC_GetSysClkSource>
 800270e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002716:	f7ff f99e 	bl	8001a56 <LL_RCC_MSI_GetRange>
 800271a:	4603      	mov	r3, r0
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e04b      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d102      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e045      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d10a      	bne.n	8002754 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800273e:	f7fe ffb7 	bl	80016b0 <LL_RCC_HSE_IsEnabledDiv2>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e03a      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e037      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002754:	f7ff fab9 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 8002758:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d003      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x64>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d003      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x6a>
 8002766:	e00d      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800276a:	60bb      	str	r3, [r7, #8]
        break;
 800276c:	e015      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800276e:	f7fe ff9f 	bl	80016b0 <LL_RCC_HSE_IsEnabledDiv2>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800277a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800277c:	e00d      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002780:	60bb      	str	r3, [r7, #8]
        break;
 8002782:	e00a      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002784:	f7ff f967 	bl	8001a56 <LL_RCC_MSI_GetRange>
 8002788:	4603      	mov	r3, r0
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	60bb      	str	r3, [r7, #8]
        break;
 8002798:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800279a:	f7ff fa71 	bl	8001c80 <LL_RCC_PLL_GetN>
 800279e:	4602      	mov	r2, r0
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	fb03 f402 	mul.w	r4, r3, r2
 80027a6:	f7ff fa84 	bl	8001cb2 <LL_RCC_PLL_GetDivider>
 80027aa:	4603      	mov	r3, r0
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	3301      	adds	r3, #1
 80027b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80027b4:	f7ff fa71 	bl	8001c9a <LL_RCC_PLL_GetR>
 80027b8:	4603      	mov	r3, r0
 80027ba:	0f5b      	lsrs	r3, r3, #29
 80027bc:	3301      	adds	r3, #1
 80027be:	fbb4 f3f3 	udiv	r3, r4, r3
 80027c2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	08003f14 	.word	0x08003f14
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	01e84800 	.word	0x01e84800

080027dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027dc:	b598      	push	{r3, r4, r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80027e0:	f7ff ff90 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80027e4:	4604      	mov	r4, r0
 80027e6:	f7ff f9e9 	bl	8001bbc <LL_RCC_GetAHBPrescaler>
 80027ea:	4603      	mov	r3, r0
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_GetHCLKFreq+0x24>)
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd98      	pop	{r3, r4, r7, pc}
 8002800:	08003eb4 	.word	0x08003eb4

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b598      	push	{r3, r4, r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002808:	f7ff ffe8 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 800280c:	4604      	mov	r4, r0
 800280e:	f7ff f9ef 	bl	8001bf0 <LL_RCC_GetAPB1Prescaler>
 8002812:	4603      	mov	r3, r0
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_RCC_GetPCLK1Freq+0x28>)
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd98      	pop	{r3, r4, r7, pc}
 800282c:	08003ef4 	.word	0x08003ef4

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b598      	push	{r3, r4, r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002834:	f7ff ffd2 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8002838:	4604      	mov	r4, r0
 800283a:	f7ff f9e5 	bl	8001c08 <LL_RCC_GetAPB2Prescaler>
 800283e:	4603      	mov	r3, r0
 8002840:	0adb      	lsrs	r3, r3, #11
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd98      	pop	{r3, r4, r7, pc}
 8002858:	08003ef4 	.word	0x08003ef4

0800285c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2bb0      	cmp	r3, #176	; 0xb0
 8002868:	d903      	bls.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e007      	b.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002882:	f7ff f9a7 	bl	8001bd4 <LL_RCC_GetAHB4Prescaler>
 8002886:	4603      	mov	r3, r0
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0c9c      	lsrs	r4, r3, #18
 80028a6:	f7fe fef5 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4619      	mov	r1, r3
 80028ae:	4620      	mov	r0, r4
 80028b0:	f000 f80c 	bl	80028cc <RCC_SetFlashLatency>
 80028b4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop
 80028c0:	08003f14 	.word	0x08003f14
 80028c4:	08003eb4 	.word	0x08003eb4
 80028c8:	431bde83 	.word	0x431bde83

080028cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b093      	sub	sp, #76	; 0x4c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <RCC_SetFlashLatency+0xe8>)
 80028d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80028e2:	4a35      	ldr	r2, [pc, #212]	; (80029b8 <RCC_SetFlashLatency+0xec>)
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <RCC_SetFlashLatency+0xf0>)
 80028f0:	f107 040c 	add.w	r4, r7, #12
 80028f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80028fa:	2300      	movs	r3, #0
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002904:	d11a      	bne.n	800293c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002906:	2300      	movs	r3, #0
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
 800290a:	e013      	b.n	8002934 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3348      	adds	r3, #72	; 0x48
 8002912:	443b      	add	r3, r7
 8002914:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d807      	bhi.n	800292e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800291e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	443b      	add	r3, r7
 8002926:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800292c:	e020      	b.n	8002970 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800292e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002930:	3301      	adds	r3, #1
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	2b03      	cmp	r3, #3
 8002938:	d9e8      	bls.n	800290c <RCC_SetFlashLatency+0x40>
 800293a:	e019      	b.n	8002970 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800293c:	2300      	movs	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	e013      	b.n	800296a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3348      	adds	r3, #72	; 0x48
 8002948:	443b      	add	r3, r7
 800294a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	d807      	bhi.n	8002964 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3348      	adds	r3, #72	; 0x48
 800295a:	443b      	add	r3, r7
 800295c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002962:	e005      	b.n	8002970 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	3301      	adds	r3, #1
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	2b02      	cmp	r3, #2
 800296e:	d9e8      	bls.n	8002942 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <RCC_SetFlashLatency+0xf4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0207 	bic.w	r2, r3, #7
 8002978:	4911      	ldr	r1, [pc, #68]	; (80029c0 <RCC_SetFlashLatency+0xf4>)
 800297a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002980:	f7fe facc 	bl	8000f1c <HAL_GetTick>
 8002984:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002986:	e008      	b.n	800299a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002988:	f7fe fac8 	bl	8000f1c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e007      	b.n	80029aa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <RCC_SetFlashLatency+0xf4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1ef      	bne.n	8002988 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	374c      	adds	r7, #76	; 0x4c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	08003e88 	.word	0x08003e88
 80029b8:	08003e98 	.word	0x08003e98
 80029bc:	08003ea4 	.word	0x08003ea4
 80029c0:	58004000 	.word	0x58004000

080029c4 <LL_RCC_LSE_IsEnabled>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <LL_RCC_LSE_IsEnabled+0x18>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_RCC_LSE_IsEnabled+0x1a>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_LSE_IsReady>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d101      	bne.n	8002a00 <LL_RCC_LSE_IsReady+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_RCC_LSE_IsReady+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_MSI_EnablePLLMode>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_SetRFWKPClockSource>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_SetSMPSClockSource>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f023 0203 	bic.w	r2, r3, #3
 8002a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_SetSMPSPrescaler>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_SetUSARTClockSource>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_SetLPUARTClockSource>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_SetI2CClockSource>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b16:	43db      	mvns	r3, r3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_SetLPTIMClockSource>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0c1b      	lsrs	r3, r3, #16
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_SetSAIClockSource>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_SetRNGClockSource>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_SetCLK48ClockSource>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_SetUSBClockSource>:
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffe3 	bl	8002bc4 <LL_RCC_SetCLK48ClockSource>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <LL_RCC_SetADCClockSource>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_SetRTCClockSource>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_GetRTCClockSource>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_ForceBackupDomainReset>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_PLLSAI1_Enable>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_PLLSAI1_Disable>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cec:	6013      	str	r3, [r2, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_PLLSAI1_IsReady>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d0a:	d101      	bne.n	8002d10 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d034      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d40:	d021      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d46:	d81b      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d4c:	d01d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d52:	d815      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5c:	d110      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d6e:	e00d      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f94d 	bl	8003014 <RCCEx_PLLSAI1_ConfigNP>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d7e:	e005      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]
        break;
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fee8 	bl	8002b6c <LL_RCC_SetSAIClockSource>
 8002d9c:	e001      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d046      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002dae:	f7ff ff56 	bl	8002c5e <LL_RCC_GetRTCClockSource>
 8002db2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d03c      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dbe:	f7fe fc59 	bl	8001674 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff30 	bl	8002c32 <LL_RCC_SetRTCClockSource>
 8002dd2:	e02e      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002dde:	f7ff ff4b 	bl	8002c78 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002de2:	f7ff ff5a 	bl	8002c9a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002dfe:	f7ff fde1 	bl	80029c4 <LL_RCC_LSE_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d114      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e08:	f7fe f888 	bl	8000f1c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe f884 	bl	8000f1c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d902      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	77fb      	strb	r3, [r7, #31]
              break;
 8002e26:	e004      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e28:	f7ff fdde 	bl	80029e8 <LL_RCC_LSE_IsReady>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	77bb      	strb	r3, [r7, #30]
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
 8002e3a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe2a 	bl	8002aa6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe35 	bl	8002ad2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fe5d 	bl	8002b38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fe52 	bl	8002b38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fe2a 	bl	8002afe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fe1f 	bl	8002afe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d022      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe8d 	bl	8002bf0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eee:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef8:	d10b      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8e3 	bl	80030ca <RCCEx_PLLSAI1_ConfigNQ>
 8002f04:	4603      	mov	r3, r0
 8002f06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d02b      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f30:	d003      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe2a 	bl	8002b98 <LL_RCC_SetRNGClockSource>
 8002f44:	e00a      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7ff fe21 	bl	8002b98 <LL_RCC_SetRNGClockSource>
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fe34 	bl	8002bc4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f64:	d107      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f74:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d022      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe3d 	bl	8002c06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8e3 	bl	8003180 <RCCEx_PLLSAI1_ConfigNR>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fd26 	bl	8002a2a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fd45 	bl	8002a7e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fd2c 	bl	8002a56 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ffe:	7fbb      	ldrb	r3, [r7, #30]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800300c:	f7ff fcfe 	bl	8002a0c <LL_RCC_MSI_EnablePLLMode>
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}

08003014 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003020:	f7ff fe5b 	bl	8002cda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003024:	f7fd ff7a 	bl	8000f1c <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800302a:	e009      	b.n	8003040 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800302c:	f7fd ff76 	bl	8000f1c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	73fb      	strb	r3, [r7, #15]
      break;
 800303e:	e004      	b.n	800304a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003040:	f7ff fe5a 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d137      	bne.n	80030c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307a:	4313      	orrs	r3, r2
 800307c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800307e:	f7ff fe1d 	bl	8002cbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003082:	f7fd ff4b 	bl	8000f1c <HAL_GetTick>
 8003086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003088:	e009      	b.n	800309e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800308a:	f7fd ff47 	bl	8000f1c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d902      	bls.n	800309e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	73fb      	strb	r3, [r7, #15]
        break;
 800309c:	e004      	b.n	80030a8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800309e:	f7ff fe2b 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d1f0      	bne.n	800308a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030bc:	4313      	orrs	r3, r2
 80030be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030d6:	f7ff fe00 	bl	8002cda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030da:	f7fd ff1f 	bl	8000f1c <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030e0:	e009      	b.n	80030f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e2:	f7fd ff1b 	bl	8000f1c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e004      	b.n	8003100 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030f6:	f7ff fdff 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d137      	bne.n	8003176 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003130:	4313      	orrs	r3, r2
 8003132:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003134:	f7ff fdc2 	bl	8002cbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fd fef0 	bl	8000f1c <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003140:	f7fd feec 	bl	8000f1c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
        break;
 8003152:	e004      	b.n	800315e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003154:	f7ff fdd0 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d1f0      	bne.n	8003140 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003172:	4313      	orrs	r3, r2
 8003174:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800318c:	f7ff fda5 	bl	8002cda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003190:	f7fd fec4 	bl	8000f1c <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003196:	e009      	b.n	80031ac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003198:	f7fd fec0 	bl	8000f1c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d902      	bls.n	80031ac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	73fb      	strb	r3, [r7, #15]
      break;
 80031aa:	e004      	b.n	80031b6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ac:	f7ff fda4 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d137      	bne.n	800322c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d0:	4313      	orrs	r3, r2
 80031d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031ea:	f7ff fd67 	bl	8002cbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fd fe95 	bl	8000f1c <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031f4:	e009      	b.n	800320a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f6:	f7fd fe91 	bl	8000f1c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d902      	bls.n	800320a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	73fb      	strb	r3, [r7, #15]
        break;
 8003208:	e004      	b.n	8003214 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800320a:	f7ff fd75 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d1f0      	bne.n	80031f6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003228:	4313      	orrs	r3, r2
 800322a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <LL_RCC_GetUSARTClockSource>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4013      	ands	r3, r2
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_RCC_GetLPUARTClockSource>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4013      	ands	r3, r2
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e042      	b.n	800330e <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fc7e 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f82d 	bl	8003318 <UART_SetConfig>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e022      	b.n	800330e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa49 	bl	8003768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fad0 	bl	80038ac <UART_CheckIdleState>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af00      	add	r7, sp, #0
 8003320:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	431a      	orrs	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	4313      	orrs	r3, r2
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4baf      	ldr	r3, [pc, #700]	; (8003604 <UART_SetConfig+0x2ec>)
 8003348:	4013      	ands	r3, r2
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003350:	430b      	orrs	r3, r1
 8003352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4aa4      	ldr	r2, [pc, #656]	; (8003608 <UART_SetConfig+0x2f0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003380:	4313      	orrs	r3, r2
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800338e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003398:	430b      	orrs	r3, r1
 800339a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	f023 010f 	bic.w	r1, r3, #15
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a95      	ldr	r2, [pc, #596]	; (800360c <UART_SetConfig+0x2f4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d125      	bne.n	8003408 <UART_SetConfig+0xf0>
 80033bc:	2003      	movs	r0, #3
 80033be:	f7ff ff3a 	bl	8003236 <LL_RCC_GetUSARTClockSource>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d81b      	bhi.n	8003400 <UART_SetConfig+0xe8>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0xb8>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033f1 	.word	0x080033f1
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e6:	e042      	b.n	800346e <UART_SetConfig+0x156>
 80033e8:	2302      	movs	r3, #2
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ee:	e03e      	b.n	800346e <UART_SetConfig+0x156>
 80033f0:	2304      	movs	r3, #4
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f6:	e03a      	b.n	800346e <UART_SetConfig+0x156>
 80033f8:	2308      	movs	r3, #8
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fe:	e036      	b.n	800346e <UART_SetConfig+0x156>
 8003400:	2310      	movs	r3, #16
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003406:	e032      	b.n	800346e <UART_SetConfig+0x156>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7e      	ldr	r2, [pc, #504]	; (8003608 <UART_SetConfig+0x2f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12a      	bne.n	8003468 <UART_SetConfig+0x150>
 8003412:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003416:	f7ff ff1e 	bl	8003256 <LL_RCC_GetLPUARTClockSource>
 800341a:	4603      	mov	r3, r0
 800341c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003420:	d01a      	beq.n	8003458 <UART_SetConfig+0x140>
 8003422:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003426:	d81b      	bhi.n	8003460 <UART_SetConfig+0x148>
 8003428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342c:	d00c      	beq.n	8003448 <UART_SetConfig+0x130>
 800342e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003432:	d815      	bhi.n	8003460 <UART_SetConfig+0x148>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <UART_SetConfig+0x128>
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343c:	d008      	beq.n	8003450 <UART_SetConfig+0x138>
 800343e:	e00f      	b.n	8003460 <UART_SetConfig+0x148>
 8003440:	2300      	movs	r3, #0
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003446:	e012      	b.n	800346e <UART_SetConfig+0x156>
 8003448:	2302      	movs	r3, #2
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344e:	e00e      	b.n	800346e <UART_SetConfig+0x156>
 8003450:	2304      	movs	r3, #4
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003456:	e00a      	b.n	800346e <UART_SetConfig+0x156>
 8003458:	2308      	movs	r3, #8
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345e:	e006      	b.n	800346e <UART_SetConfig+0x156>
 8003460:	2310      	movs	r3, #16
 8003462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003466:	e002      	b.n	800346e <UART_SetConfig+0x156>
 8003468:	2310      	movs	r3, #16
 800346a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a65      	ldr	r2, [pc, #404]	; (8003608 <UART_SetConfig+0x2f0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	f040 8097 	bne.w	80035a8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800347a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800347e:	2b08      	cmp	r3, #8
 8003480:	d823      	bhi.n	80034ca <UART_SetConfig+0x1b2>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0x170>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034ad 	.word	0x080034ad
 800348c:	080034cb 	.word	0x080034cb
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034cb 	.word	0x080034cb
 8003498:	080034bb 	.word	0x080034bb
 800349c:	080034cb 	.word	0x080034cb
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034cb 	.word	0x080034cb
 80034a8:	080034c3 	.word	0x080034c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7ff f9aa 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80034b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034b2:	e010      	b.n	80034d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <UART_SetConfig+0x2f8>)
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034b8:	e00d      	b.n	80034d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ba:	f7ff f923 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80034be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034c0:	e009      	b.n	80034d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034c8:	e005      	b.n	80034d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 812b 	beq.w	8003734 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	4a4c      	ldr	r2, [pc, #304]	; (8003614 <UART_SetConfig+0x2fc>)
 80034e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d305      	bcc.n	800350e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	429a      	cmp	r2, r3
 800350c:	d903      	bls.n	8003516 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003514:	e10e      	b.n	8003734 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	2200      	movs	r2, #0
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	60fa      	str	r2, [r7, #12]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <UART_SetConfig+0x2fc>)
 8003524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003528:	b29b      	uxth	r3, r3
 800352a:	2200      	movs	r2, #0
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003538:	f7fc fe20 	bl	800017c <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	020b      	lsls	r3, r1, #8
 800354e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003552:	0202      	lsls	r2, r0, #8
 8003554:	6979      	ldr	r1, [r7, #20]
 8003556:	6849      	ldr	r1, [r1, #4]
 8003558:	0849      	lsrs	r1, r1, #1
 800355a:	2000      	movs	r0, #0
 800355c:	460c      	mov	r4, r1
 800355e:	4605      	mov	r5, r0
 8003560:	eb12 0804 	adds.w	r8, r2, r4
 8003564:	eb43 0905 	adc.w	r9, r3, r5
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	469a      	mov	sl, r3
 8003570:	4693      	mov	fp, r2
 8003572:	4652      	mov	r2, sl
 8003574:	465b      	mov	r3, fp
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fc fdff 	bl	800017c <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4613      	mov	r3, r2
 8003584:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358c:	d308      	bcc.n	80035a0 <UART_SetConfig+0x288>
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d204      	bcs.n	80035a0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a3a      	ldr	r2, [r7, #32]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e0c9      	b.n	8003734 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035a6:	e0c5      	b.n	8003734 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	d16d      	bne.n	800368e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80035b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035b6:	3b01      	subs	r3, #1
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	d82d      	bhi.n	8003618 <UART_SetConfig+0x300>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x2ac>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035e5 	.word	0x080035e5
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	08003619 	.word	0x08003619
 80035d0:	080035f3 	.word	0x080035f3
 80035d4:	08003619 	.word	0x08003619
 80035d8:	08003619 	.word	0x08003619
 80035dc:	08003619 	.word	0x08003619
 80035e0:	080035fb 	.word	0x080035fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7ff f924 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035ea:	e01b      	b.n	8003624 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <UART_SetConfig+0x2f8>)
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035f0:	e018      	b.n	8003624 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f2:	f7ff f887 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035f8:	e014      	b.n	8003624 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003600:	e010      	b.n	8003624 <UART_SetConfig+0x30c>
 8003602:	bf00      	nop
 8003604:	cfff69f3 	.word	0xcfff69f3
 8003608:	40008000 	.word	0x40008000
 800360c:	40013800 	.word	0x40013800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	08003f54 	.word	0x08003f54
      default:
        pclk = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8084 	beq.w	8003734 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <UART_SetConfig+0x448>)
 8003632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003636:	461a      	mov	r2, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	fbb3 f3f2 	udiv	r3, r3, r2
 800363e:	005a      	lsls	r2, r3, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	441a      	add	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2b0f      	cmp	r3, #15
 8003656:	d916      	bls.n	8003686 <UART_SetConfig+0x36e>
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d212      	bcs.n	8003686 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	b29a      	uxth	r2, r3
 8003676:	8bfb      	ldrh	r3, [r7, #30]
 8003678:	4313      	orrs	r3, r2
 800367a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	8bfa      	ldrh	r2, [r7, #30]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e056      	b.n	8003734 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800368c:	e052      	b.n	8003734 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800368e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003692:	3b01      	subs	r3, #1
 8003694:	2b07      	cmp	r3, #7
 8003696:	d822      	bhi.n	80036de <UART_SetConfig+0x3c6>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0x388>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036c1 	.word	0x080036c1
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036df 	.word	0x080036df
 80036ac:	080036cf 	.word	0x080036cf
 80036b0:	080036df 	.word	0x080036df
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036df 	.word	0x080036df
 80036bc:	080036d7 	.word	0x080036d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7ff f8b6 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 80036c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036c6:	e010      	b.n	80036ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <UART_SetConfig+0x44c>)
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036cc:	e00d      	b.n	80036ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7ff f819 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80036d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d4:	e009      	b.n	80036ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036dc:	e005      	b.n	80036ea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036e8:	bf00      	nop
    }

    if (pclk != 0U)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d021      	beq.n	8003734 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <UART_SetConfig+0x448>)
 80036f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036fa:	461a      	mov	r2, r3
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	441a      	add	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	d909      	bls.n	800372e <UART_SetConfig+0x416>
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d205      	bcs.n	800372e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	b29a      	uxth	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	e002      	b.n	8003734 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2201      	movs	r2, #1
 8003738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2201      	movs	r2, #1
 8003740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2200      	movs	r2, #0
 8003748:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2200      	movs	r2, #0
 800374e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003750:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003754:	4618      	mov	r0, r3
 8003756:	3730      	adds	r7, #48	; 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375e:	bf00      	nop
 8003760:	08003f54 	.word	0x08003f54
 8003764:	00f42400 	.word	0x00f42400

08003768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003866:	d10a      	bne.n	800387e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b098      	sub	sp, #96	; 0x60
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038bc:	f7fd fb2e 	bl	8000f1c <HAL_GetTick>
 80038c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d12f      	bne.n	8003930 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f88e 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d022      	beq.n	8003930 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
 800390a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800390e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e063      	b.n	80039f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d149      	bne.n	80039d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f857 	bl	8003a00 <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d03c      	beq.n	80039d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	623b      	str	r3, [r7, #32]
   return(result);
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800396c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	633b      	str	r3, [r7, #48]	; 0x30
 8003978:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e6      	bne.n	8003958 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3308      	adds	r3, #8
 8003990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	60fb      	str	r3, [r7, #12]
   return(result);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3308      	adds	r3, #8
 80039a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039aa:	61fa      	str	r2, [r7, #28]
 80039ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	617b      	str	r3, [r7, #20]
   return(result);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e5      	bne.n	800398a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e012      	b.n	80039f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3758      	adds	r7, #88	; 0x58
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a10:	e049      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d045      	beq.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fd fa7f 	bl	8000f1c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e048      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d031      	beq.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d110      	bne.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2208      	movs	r2, #8
 8003a56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f838 	bl	8003ace <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2208      	movs	r2, #8
 8003a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e029      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a80:	d111      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f81e 	bl	8003ace <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e00f      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d0a6      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b095      	sub	sp, #84	; 0x54
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	643b      	str	r3, [r7, #64]	; 0x40
 8003af6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e6      	bne.n	8003ad6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e3      	bne.n	8003b08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d118      	bne.n	8003b7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f023 0310 	bic.w	r3, r3, #16
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6979      	ldr	r1, [r7, #20]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b8e:	bf00      	nop
 8003b90:	3754      	adds	r7, #84	; 0x54
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e027      	b.n	8003c00 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e02d      	b.n	8003c80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f84f 	bl	8003d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e02d      	b.n	8003cfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	; 0x24
 8003cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f811 	bl	8003d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d108      	bne.n	8003d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d24:	e031      	b.n	8003d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d26:	2308      	movs	r3, #8
 8003d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	0e5b      	lsrs	r3, r3, #25
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	0f5b      	lsrs	r3, r3, #29
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d4e:	7bbb      	ldrb	r3, [r7, #14]
 8003d50:	7b3a      	ldrb	r2, [r7, #12]
 8003d52:	4911      	ldr	r1, [pc, #68]	; (8003d98 <UARTEx_SetNbDataToProcess+0x94>)
 8003d54:	5c8a      	ldrb	r2, [r1, r2]
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d5a:	7b3a      	ldrb	r2, [r7, #12]
 8003d5c:	490f      	ldr	r1, [pc, #60]	; (8003d9c <UARTEx_SetNbDataToProcess+0x98>)
 8003d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	7b7a      	ldrb	r2, [r7, #13]
 8003d70:	4909      	ldr	r1, [pc, #36]	; (8003d98 <UARTEx_SetNbDataToProcess+0x94>)
 8003d72:	5c8a      	ldrb	r2, [r1, r2]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d78:	7b7a      	ldrb	r2, [r7, #13]
 8003d7a:	4908      	ldr	r1, [pc, #32]	; (8003d9c <UARTEx_SetNbDataToProcess+0x98>)
 8003d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	08003f6c 	.word	0x08003f6c
 8003d9c:	08003f74 	.word	0x08003f74

08003da0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003da8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003dac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	f107 0014 	add.w	r0, r7, #20
 8003de4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	b004      	add	sp, #16
 8003e16:	4770      	bx	lr

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4d0d      	ldr	r5, [pc, #52]	; (8003e50 <__libc_init_array+0x38>)
 8003e1c:	4c0d      	ldr	r4, [pc, #52]	; (8003e54 <__libc_init_array+0x3c>)
 8003e1e:	1b64      	subs	r4, r4, r5
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	2600      	movs	r6, #0
 8003e24:	42a6      	cmp	r6, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	4d0b      	ldr	r5, [pc, #44]	; (8003e58 <__libc_init_array+0x40>)
 8003e2a:	4c0c      	ldr	r4, [pc, #48]	; (8003e5c <__libc_init_array+0x44>)
 8003e2c:	f000 f820 	bl	8003e70 <_init>
 8003e30:	1b64      	subs	r4, r4, r5
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	2600      	movs	r6, #0
 8003e36:	42a6      	cmp	r6, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e40:	4798      	blx	r3
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4a:	4798      	blx	r3
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08003f84 	.word	0x08003f84
 8003e54:	08003f84 	.word	0x08003f84
 8003e58:	08003f84 	.word	0x08003f84
 8003e5c:	08003f88 	.word	0x08003f88

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
