
Lab2-TrafficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  0800511c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f8  20000014  08005128  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000040c  08005128  0002040c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000192e6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d08  00000000  00000000  0003932a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019d8  00000000  00000000  0003c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e0  00000000  00000000  0003da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000221f7  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001710e  00000000  00000000  000614e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dfad5  00000000  00000000  000785f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001580ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e88  00000000  00000000  0015811c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08005000 	.word	0x08005000

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08005000 	.word	0x08005000

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <abuzz_start>:
void abuzz_p_short();



void abuzz_start()
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
	TIM2->PSC 	= 42000-1;
 80004e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e6:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR   = 0xFFFF;
 80004ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004f4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1  = 0x0064;
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fa:	2264      	movs	r2, #100	; 0x64
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CNT   = 0x0000;
 80004fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <abuzz_stop>:



void abuzz_stop()
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	TIM2->PSC  = 0x0000;
 8000514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR  = 0xFFFF;
 800051c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000524:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 0x0000;
 8000526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800052a:	2200      	movs	r2, #0
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <abuzz_p_long>:

void abuzz_p_long()
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	TIM2->ARR = 0x0F90;
 800053c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000540:	f44f 6279 	mov.w	r2, #3984	; 0xf90
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0x0000;
 8000546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <reset_traffic_lights>:
	ev_button_push,
	ev_state_timeout,
	ev_return_state
};

void reset_traffic_lights(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <reset_traffic_lights+0x3c>)
 8000562:	f001 f8a5 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2102      	movs	r1, #2
 800056a:	480a      	ldr	r0, [pc, #40]	; (8000594 <reset_traffic_lights+0x3c>)
 800056c:	f001 f8a0 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <reset_traffic_lights+0x3c>)
 8000576:	f001 f89b 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2108      	movs	r1, #8
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <reset_traffic_lights+0x3c>)
 8000580:	f001 f896 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <reset_traffic_lights+0x3c>)
 800058a:	f001 f891 	bl	80016b0 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	48000800 	.word	0x48000800

08000598 <set_traffic_lights>:

void set_traffic_lights(enum traffic_light_state state) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	3b06      	subs	r3, #6
 80005a6:	2b19      	cmp	r3, #25
 80005a8:	f200 80ac 	bhi.w	8000704 <set_traffic_lights+0x16c>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <set_traffic_lights+0x1c>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080006a7 	.word	0x080006a7
 80005b8:	08000705 	.word	0x08000705
 80005bc:	08000705 	.word	0x08000705
 80005c0:	08000705 	.word	0x08000705
 80005c4:	08000667 	.word	0x08000667
 80005c8:	08000705 	.word	0x08000705
 80005cc:	08000705 	.word	0x08000705
 80005d0:	08000705 	.word	0x08000705
 80005d4:	08000705 	.word	0x08000705
 80005d8:	08000705 	.word	0x08000705
 80005dc:	08000705 	.word	0x08000705
 80005e0:	08000687 	.word	0x08000687
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	08000705 	.word	0x08000705
 80005ec:	08000705 	.word	0x08000705
 80005f0:	08000705 	.word	0x08000705
 80005f4:	08000705 	.word	0x08000705
 80005f8:	08000705 	.word	0x08000705
 80005fc:	08000705 	.word	0x08000705
 8000600:	08000705 	.word	0x08000705
 8000604:	0800063d 	.word	0x0800063d
 8000608:	08000705 	.word	0x08000705
 800060c:	08000705 	.word	0x08000705
 8000610:	08000705 	.word	0x08000705
 8000614:	08000705 	.word	0x08000705
 8000618:	080006c7 	.word	0x080006c7
		case s_CarsRed_PedestrianRed:
			reset_traffic_lights();
 800061c:	f7ff ff9c 	bl	8000558 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianRed;
 8000620:	4b3a      	ldr	r3, [pc, #232]	; (800070c <set_traffic_lights+0x174>)
 8000622:	2212      	movs	r2, #18
 8000624:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2101      	movs	r1, #1
 800062a:	4839      	ldr	r0, [pc, #228]	; (8000710 <set_traffic_lights+0x178>)
 800062c:	f001 f840 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2108      	movs	r1, #8
 8000634:	4836      	ldr	r0, [pc, #216]	; (8000710 <set_traffic_lights+0x178>)
 8000636:	f001 f83b 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 800063a:	e063      	b.n	8000704 <set_traffic_lights+0x16c>
		case s_CarsRedYellow_PedestrianRed:
			reset_traffic_lights();
 800063c:	f7ff ff8c 	bl	8000558 <reset_traffic_lights>
			currentState = s_CarsRedYellow_PedestrianRed;
 8000640:	4b32      	ldr	r3, [pc, #200]	; (800070c <set_traffic_lights+0x174>)
 8000642:	221a      	movs	r2, #26
 8000644:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	4831      	ldr	r0, [pc, #196]	; (8000710 <set_traffic_lights+0x178>)
 800064c:	f001 f830 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2102      	movs	r1, #2
 8000654:	482e      	ldr	r0, [pc, #184]	; (8000710 <set_traffic_lights+0x178>)
 8000656:	f001 f82b 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	482c      	ldr	r0, [pc, #176]	; (8000710 <set_traffic_lights+0x178>)
 8000660:	f001 f826 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8000664:	e04e      	b.n	8000704 <set_traffic_lights+0x16c>
		case s_CarsYellow_PedestrianRed:
			reset_traffic_lights();
 8000666:	f7ff ff77 	bl	8000558 <reset_traffic_lights>
			currentState = s_CarsYellow_PedestrianRed;
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <set_traffic_lights+0x174>)
 800066c:	220a      	movs	r2, #10
 800066e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2102      	movs	r1, #2
 8000674:	4826      	ldr	r0, [pc, #152]	; (8000710 <set_traffic_lights+0x178>)
 8000676:	f001 f81b 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2108      	movs	r1, #8
 800067e:	4824      	ldr	r0, [pc, #144]	; (8000710 <set_traffic_lights+0x178>)
 8000680:	f001 f816 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8000684:	e03e      	b.n	8000704 <set_traffic_lights+0x16c>
		case s_CarsRed_PedestrianGreen:
			reset_traffic_lights();
 8000686:	f7ff ff67 	bl	8000558 <reset_traffic_lights>
			currentState = s_CarsRed_PedestrianGreen;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <set_traffic_lights+0x174>)
 800068c:	2211      	movs	r2, #17
 800068e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2101      	movs	r1, #1
 8000694:	481e      	ldr	r0, [pc, #120]	; (8000710 <set_traffic_lights+0x178>)
 8000696:	f001 f80b 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2120      	movs	r1, #32
 800069e:	481c      	ldr	r0, [pc, #112]	; (8000710 <set_traffic_lights+0x178>)
 80006a0:	f001 f806 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 80006a4:	e02e      	b.n	8000704 <set_traffic_lights+0x16c>
		case s_CarsGreen_PedestrianRed:
			reset_traffic_lights();
 80006a6:	f7ff ff57 	bl	8000558 <reset_traffic_lights>
			currentState = s_CarsGreen_PedestrianRed;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <set_traffic_lights+0x174>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2104      	movs	r1, #4
 80006b4:	4816      	ldr	r0, [pc, #88]	; (8000710 <set_traffic_lights+0x178>)
 80006b6:	f000 fffb 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2108      	movs	r1, #8
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <set_traffic_lights+0x178>)
 80006c0:	f000 fff6 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 80006c4:	e01e      	b.n	8000704 <set_traffic_lights+0x16c>
		case s_init:
			reset_traffic_lights();
 80006c6:	f7ff ff47 	bl	8000558 <reset_traffic_lights>
			currentState = s_init;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <set_traffic_lights+0x174>)
 80006cc:	221f      	movs	r2, #31
 80006ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CARS_RED_GPIO_Port, CARS_RED_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <set_traffic_lights+0x178>)
 80006d6:	f000 ffeb 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_YELLOW_GPIO_Port, CARS_YELLOW_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2102      	movs	r1, #2
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <set_traffic_lights+0x178>)
 80006e0:	f000 ffe6 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CARS_GREEN_GPIO_Port, CARS_GREEN_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2104      	movs	r1, #4
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <set_traffic_lights+0x178>)
 80006ea:	f000 ffe1 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_RED_GPIO_Port, PED_RED_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2108      	movs	r1, #8
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <set_traffic_lights+0x178>)
 80006f4:	f000 ffdc 	bl	80016b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PED_GREEN_GPIO_Port, PED_GREEN_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2120      	movs	r1, #32
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <set_traffic_lights+0x178>)
 80006fe:	f000 ffd7 	bl	80016b0 <HAL_GPIO_WritePin>
			break;
 8000702:	bf00      	nop
	}
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000404 	.word	0x20000404
 8000710:	48000800 	.word	0x48000800

08000714 <buzz>:

void buzz(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 ffc6 	bl	80016b0 <HAL_GPIO_WritePin>
	abuzz_start();
 8000724:	f7ff fedb 	bl	80004de <abuzz_start>
	HAL_Delay(500);
 8000728:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072c:	f000 fd48 	bl	80011c0 <HAL_Delay>
	abuzz_p_long();
 8000730:	f7ff ff02 	bl	8000538 <abuzz_p_long>
	HAL_Delay(500);
 8000734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000738:	f000 fd42 	bl	80011c0 <HAL_Delay>
	abuzz_stop();
 800073c:	f7ff fee8 	bl	8000510 <abuzz_stop>
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2140      	movs	r1, #64	; 0x40
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 ffb2 	bl	80016b0 <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <toggleIndicator>:

void toggleIndicator(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(INDIC_GPIO_Port, INDIC_Pin);
 8000754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <toggleIndicator+0x18>)
 800075a:	f000 ffc1 	bl	80016e0 <HAL_GPIO_TogglePin>
	buzz();
 800075e:	f7ff ffd9 	bl	8000714 <buzz>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	48000400 	.word	0x48000400

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fc9f 	bl	80010b4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f8bf 	bl	80008f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800077a:	f000 f933 	bl	80009e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fa3b 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000782:	f000 f9c3 	bl	8000b0c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000786:	f000 fa0f 	bl	8000ba8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800078a:	f000 f949 	bl	8000a20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800078e:	2100      	movs	r1, #0
 8000790:	4856      	ldr	r0, [pc, #344]	; (80008ec <main+0x180>)
 8000792:	f002 ff5d 	bl	8003650 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	set_traffic_lights(s_init);
 8000796:	201f      	movs	r0, #31
 8000798:	f7ff fefe 	bl	8000598 <set_traffic_lights>
	enum event currentEvent;
	int ticks_left_in_state = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]

	while (1)
	{
	    uint32_t buttonPressed = GPIOB->IDR & BTN_Pin;
 80007a0:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <main+0x184>)
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	607b      	str	r3, [r7, #4]

	    if (buttonPressed && (currentState == s_init || currentState == s_CarsGreen_PedestrianRed))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d009      	beq.n	80007c4 <main+0x58>
 80007b0:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <main+0x188>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b1f      	cmp	r3, #31
 80007b6:	d003      	beq.n	80007c0 <main+0x54>
 80007b8:	4b4e      	ldr	r3, [pc, #312]	; (80008f4 <main+0x188>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d101      	bne.n	80007c4 <main+0x58>
	        currentEvent = ev_button_push;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]

			if (ticks_left_in_state == 0){
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f040 8082 	bne.w	80008d0 <main+0x164>
				switch (currentState){
 80007cc:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <main+0x188>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3b06      	subs	r3, #6
 80007d2:	2b19      	cmp	r3, #25
 80007d4:	f200 8085 	bhi.w	80008e2 <main+0x176>
 80007d8:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <main+0x74>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	08000849 	.word	0x08000849
 80007e4:	080008e3 	.word	0x080008e3
 80007e8:	080008e3 	.word	0x080008e3
 80007ec:	080008e3 	.word	0x080008e3
 80007f0:	0800086b 	.word	0x0800086b
 80007f4:	080008e3 	.word	0x080008e3
 80007f8:	080008e3 	.word	0x080008e3
 80007fc:	080008e3 	.word	0x080008e3
 8000800:	080008e3 	.word	0x080008e3
 8000804:	080008e3 	.word	0x080008e3
 8000808:	080008e3 	.word	0x080008e3
 800080c:	080008ab 	.word	0x080008ab
 8000810:	08000877 	.word	0x08000877
 8000814:	080008e3 	.word	0x080008e3
 8000818:	080008e3 	.word	0x080008e3
 800081c:	080008e3 	.word	0x080008e3
 8000820:	080008e3 	.word	0x080008e3
 8000824:	080008e3 	.word	0x080008e3
 8000828:	080008e3 	.word	0x080008e3
 800082c:	080008e3 	.word	0x080008e3
 8000830:	0800089f 	.word	0x0800089f
 8000834:	080008e3 	.word	0x080008e3
 8000838:	080008e3 	.word	0x080008e3
 800083c:	080008e3 	.word	0x080008e3
 8000840:	080008e3 	.word	0x080008e3
 8000844:	080008bb 	.word	0x080008bb
					case s_CarsGreen_PedestrianRed:
						if (currentEvent == ev_button_push){
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d144      	bne.n	80008d8 <main+0x16c>
							toggleIndicator();
 800084e:	f7ff ff7f 	bl	8000750 <toggleIndicator>
							HAL_Delay(2000);
 8000852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000856:	f000 fcb3 	bl	80011c0 <HAL_Delay>
							set_traffic_lights(s_CarsYellow_PedestrianRed);
 800085a:	200a      	movs	r0, #10
 800085c:	f7ff fe9c 	bl	8000598 <set_traffic_lights>
							ticks_left_in_state = 25;
 8000860:	2319      	movs	r3, #25
 8000862:	60bb      	str	r3, [r7, #8]
							currentEvent = ev_none;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
						}
						break;
 8000868:	e036      	b.n	80008d8 <main+0x16c>
					case s_CarsYellow_PedestrianRed:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 800086a:	2012      	movs	r0, #18
 800086c:	f7ff fe94 	bl	8000598 <set_traffic_lights>
						ticks_left_in_state = 15;
 8000870:	230f      	movs	r3, #15
 8000872:	60bb      	str	r3, [r7, #8]
						break;
 8000874:	e035      	b.n	80008e2 <main+0x176>
					case s_CarsRed_PedestrianRed:
						if(currentEvent == ev_none) {
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <main+0x11c>
							set_traffic_lights(s_CarsRed_PedestrianGreen);
 800087c:	2011      	movs	r0, #17
 800087e:	f7ff fe8b 	bl	8000598 <set_traffic_lights>
							ticks_left_in_state = 50;
 8000882:	2332      	movs	r3, #50	; 0x32
 8000884:	60bb      	str	r3, [r7, #8]
						} else if (currentEvent == ev_return_state){
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
							toggleIndicator();
							ticks_left_in_state = 20;
						}
						break;
 8000886:	e029      	b.n	80008dc <main+0x170>
						} else if (currentEvent == ev_return_state){
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d126      	bne.n	80008dc <main+0x170>
							set_traffic_lights(s_CarsRedYellow_PedestrianRed);
 800088e:	201a      	movs	r0, #26
 8000890:	f7ff fe82 	bl	8000598 <set_traffic_lights>
							toggleIndicator();
 8000894:	f7ff ff5c 	bl	8000750 <toggleIndicator>
							ticks_left_in_state = 20;
 8000898:	2314      	movs	r3, #20
 800089a:	60bb      	str	r3, [r7, #8]
						break;
 800089c:	e01e      	b.n	80008dc <main+0x170>
					case s_CarsRedYellow_PedestrianRed:
						set_traffic_lights(s_CarsGreen_PedestrianRed);
 800089e:	2006      	movs	r0, #6
 80008a0:	f7ff fe7a 	bl	8000598 <set_traffic_lights>
						ticks_left_in_state = 15;
 80008a4:	230f      	movs	r3, #15
 80008a6:	60bb      	str	r3, [r7, #8]
						break;
 80008a8:	e01b      	b.n	80008e2 <main+0x176>
					case s_CarsRed_PedestrianGreen:
						set_traffic_lights(s_CarsRed_PedestrianRed);
 80008aa:	2012      	movs	r0, #18
 80008ac:	f7ff fe74 	bl	8000598 <set_traffic_lights>
						ticks_left_in_state = 10;
 80008b0:	230a      	movs	r3, #10
 80008b2:	60bb      	str	r3, [r7, #8]
						currentEvent = ev_return_state;
 80008b4:	2303      	movs	r3, #3
 80008b6:	73fb      	strb	r3, [r7, #15]
						break;
 80008b8:	e013      	b.n	80008e2 <main+0x176>
					case s_init:
						if (currentEvent == ev_button_push){
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10f      	bne.n	80008e0 <main+0x174>
							currentEvent = ev_none;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]
							set_traffic_lights(s_CarsGreen_PedestrianRed);
 80008c4:	2006      	movs	r0, #6
 80008c6:	f7ff fe67 	bl	8000598 <set_traffic_lights>
							ticks_left_in_state = 20;
 80008ca:	2314      	movs	r3, #20
 80008cc:	60bb      	str	r3, [r7, #8]
						}
						break;
 80008ce:	e007      	b.n	80008e0 <main+0x174>
				}
			} else {
				ticks_left_in_state--;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	e004      	b.n	80008e2 <main+0x176>
						break;
 80008d8:	bf00      	nop
 80008da:	e002      	b.n	80008e2 <main+0x176>
						break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <main+0x176>
						break;
 80008e0:	bf00      	nop
			}
			HAL_Delay(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f000 fc6c 	bl	80011c0 <HAL_Delay>
	{
 80008e8:	e75a      	b.n	80007a0 <main+0x34>
 80008ea:	bf00      	nop
 80008ec:	20000030 	.word	0x20000030
 80008f0:	48000400 	.word	0x48000400
 80008f4:	20000404 	.word	0x20000404

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09a      	sub	sp, #104	; 0x68
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2248      	movs	r2, #72	; 0x48
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fb72 	bl	8004ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800091e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800092c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800092e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	f023 0303 	bic.w	r3, r3, #3
 8000938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000942:	f000 ffeb 	bl	800191c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fd9a 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <SystemClock_Config+0xe8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <SystemClock_Config+0xe8>)
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <SystemClock_Config+0xe8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000968:	2327      	movs	r3, #39	; 0x27
 800096a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2340      	movs	r3, #64	; 0x40
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000984:	2300      	movs	r3, #0
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800098c:	2300      	movs	r3, #0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fb55 	bl	8002044 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009a0:	f000 f9a6 	bl	8000cf0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009a4:	236f      	movs	r3, #111	; 0x6f
 80009a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2101      	movs	r1, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 feb1 	bl	800272c <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80009d0:	f000 f98e 	bl	8000cf0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009d4:	f002 fc6c 	bl	80032b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009d8:	bf00      	nop
 80009da:	3768      	adds	r7, #104	; 0x68
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	58000400 	.word	0x58000400

080009e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2250      	movs	r2, #80	; 0x50
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 fafd 	bl	8004ff0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fadc 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000a12:	f000 f96d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7a:	4823      	ldr	r0, [pc, #140]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a7c:	f002 fd2f 	bl	80034de <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 f933 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a94:	4619      	mov	r1, r3
 8000a96:	481c      	ldr	r0, [pc, #112]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000a98:	f002 ffc8 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000aa2:	f000 f925 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000aa8:	f002 fd70 	bl	800358c <HAL_TIM_PWM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f91d 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000ac6:	f003 fc1f 	bl	8004308 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ad0:	f000 f90e 	bl	8000cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad4:	2360      	movs	r3, #96	; 0x60
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000aec:	f002 fe8a 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000af6:	f000 f8fb 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM2_Init+0xe8>)
 8000afc:	f000 f95f 	bl	8000dbe <HAL_TIM_MspPostInit>

}
 8000b00:	bf00      	nop
 8000b02:	3738      	adds	r7, #56	; 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000030 	.word	0x20000030

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <MX_USART1_UART_Init+0x98>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b34:	220c      	movs	r2, #12
 8000b36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b56:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b58:	f003 fc56 	bl	8004408 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000b62:	f000 f8c5 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b6a:	f004 f917 	bl	8004d9c <HAL_UARTEx_SetTxFifoThreshold>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000b74:	f000 f8bc 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b7c:	f004 f94c 	bl	8004e18 <HAL_UARTEx_SetRxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000b86:	f000 f8b3 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b8c:	f004 f8cd 	bl	8004d2a <HAL_UARTEx_DisableFifoMode>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000b96:	f000 f8ab 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000007c 	.word	0x2000007c
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <MX_USB_PCD_Init+0x4c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_USB_PCD_Init+0x48>)
 8000bde:	f000 fd99 	bl	8001714 <HAL_PCD_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000be8:	f000 f882 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000110 	.word	0x20000110
 8000bf4:	40006800 	.word	0x40006800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff fc4d 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff fc4a 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fc47 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2008      	movs	r0, #8
 8000c20:	f7ff fc44 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8000c24:	2200      	movs	r2, #0
 8000c26:	212f      	movs	r1, #47	; 0x2f
 8000c28:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000c2a:	f000 fd41 	bl	80016b0 <HAL_GPIO_WritePin>
                          |PED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f000 fd3b 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INDIC_Pin|LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f640 0123 	movw	r1, #2083	; 0x823
 8000c40:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <MX_GPIO_Init+0xf0>)
 8000c42:	f000 fd35 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CARS_RED_Pin CARS_YELLOW_Pin CARS_GREEN_Pin PED_RED_Pin
                           PED_GREEN_Pin */
  GPIO_InitStruct.Pin = CARS_RED_Pin|CARS_YELLOW_Pin|CARS_GREEN_Pin|PED_RED_Pin
 8000c46:	232f      	movs	r3, #47	; 0x2f
 8000c48:	607b      	str	r3, [r7, #4]
                          |PED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000c5c:	f000 fbb8 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f000 fbaa 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <MX_GPIO_Init+0xec>)
 8000c8e:	f000 fb9f 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000c92:	2304      	movs	r3, #4
 8000c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_GPIO_Init+0xf0>)
 8000ca4:	f000 fb94 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INDIC_Pin LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = INDIC_Pin|LD2_Pin|LD3_Pin|LD1_Pin;
 8000ca8:	f640 0323 	movw	r3, #2083	; 0x823
 8000cac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <MX_GPIO_Init+0xf0>)
 8000cc0:	f000 fb86 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_GPIO_Init+0xf4>)
 8000cd6:	f000 fb7b 	bl	80013d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000c00 	.word	0x48000c00

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>

08000cfa <LL_AHB2_GRP1_EnableClock>:
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d50:	68fb      	ldr	r3, [r7, #12]
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dae:	d102      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff ffbb 	bl	8000d2c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b088      	sub	sp, #32
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dde:	d113      	bne.n	8000e08 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff ff8a 	bl	8000cfa <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f000 fae4 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	; 0x70
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2250      	movs	r2, #80	; 0x50
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 f8dd 	bl	8004ff0 <memset>
  if(huart->Instance==USART1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0x84>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d124      	bne.n	8000e8a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 f8b9 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e58:	f7ff ff4a 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e60:	f7ff ff7d 	bl	8000d5e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff ff48 	bl	8000cfa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e6a:	23c0      	movs	r3, #192	; 0xc0
 8000e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e86:	f000 faa3 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3770      	adds	r7, #112	; 0x70
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40013800 	.word	0x40013800
 8000e98:	48000400 	.word	0x48000400

08000e9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09c      	sub	sp, #112	; 0x70
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2250      	movs	r2, #80	; 0x50
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 f897 	bl	8004ff0 <memset>
  if(hpcd->Instance==USB)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_PCD_MspInit+0xa8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d136      	bne.n	8000f3a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ed2:	2318      	movs	r3, #24
 8000ed4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ee2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ee6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 f863 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000f04:	f7ff fef4 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fef6 	bl	8000cfa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f20:	230a      	movs	r3, #10
 8000f22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f000 fa4f 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f32:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f36:	f7ff fef9 	bl	8000d2c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3770      	adds	r7, #112	; 0x70
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40006800 	.word	0x40006800

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8e8 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <SystemInit+0x98>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <SystemInit+0x98>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000fc8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <SystemInit+0x9c>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe6:	f023 0305 	bic.w	r3, r3, #5
 8000fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <SystemInit+0xa0>)
 8001008:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SystemInit+0xa0>)
 8001010:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800101c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	faf6fefb 	.word	0xfaf6fefb
 800103c:	22041000 	.word	0x22041000

08001040 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001040:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001042:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001044:	3304      	adds	r3, #4

08001046 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001046:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001048:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800104a:	d3f9      	bcc.n	8001040 <CopyDataInit>
  bx lr
 800104c:	4770      	bx	lr

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800104e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001050:	3004      	adds	r0, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001052:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>
  bx lr
 8001056:	4770      	bx	lr

08001058 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800105c:	f7ff ff9e 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <LoopForever+0x6>)
 8001062:	490c      	ldr	r1, [pc, #48]	; (8001094 <LoopForever+0xa>)
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <LoopForever+0xe>)
 8001066:	2300      	movs	r3, #0
 8001068:	f7ff ffed 	bl	8001046 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <LoopForever+0x12>)
 800106e:	490c      	ldr	r1, [pc, #48]	; (80010a0 <LoopForever+0x16>)
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <LoopForever+0x1a>)
 8001072:	2300      	movs	r3, #0
 8001074:	f7ff ffe7 	bl	8001046 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <LoopForever+0x1e>)
 800107a:	490c      	ldr	r1, [pc, #48]	; (80010ac <LoopForever+0x22>)
 800107c:	2300      	movs	r3, #0
 800107e:	f7ff ffe8 	bl	8001052 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001082:	f003 ff91 	bl	8004fa8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001086:	f7ff fb71 	bl	800076c <main>

0800108a <LoopForever>:

LoopForever:
  b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001090:	20000008 	.word	0x20000008
 8001094:	20000014 	.word	0x20000014
 8001098:	0800511c 	.word	0x0800511c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800109c:	20030000 	.word	0x20030000
 80010a0:	20030000 	.word	0x20030000
 80010a4:	08005128 	.word	0x08005128
  INIT_BSS _sbss, _ebss
 80010a8:	20000014 	.word	0x20000014
 80010ac:	2000040c 	.word	0x2000040c

080010b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_Init+0x3c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_Init+0x3c>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f000 f94e 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 f80f 	bl	80010f4 <HAL_InitTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	e001      	b.n	80010e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e2:	f7ff fe55 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58004000 	.word	0x58004000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d024      	beq.n	8001152 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001108:	f001 fcbc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 800110c:	4602      	mov	r2, r0
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_InitTick+0x6c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	fbb3 f3f1 	udiv	r3, r3, r1
 800111c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f948 	bl	80013b6 <HAL_SYSTICK_Config>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10f      	bne.n	800114c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	d809      	bhi.n	8001146 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001132:	2200      	movs	r2, #0
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	f04f 30ff 	mov.w	r0, #4294967295
 800113a:	f000 f922 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_InitTick+0x70>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e007      	b.n	8001156 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e004      	b.n	8001156 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e001      	b.n	8001156 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000010 	.word	0x20000010
 8001164:	2000000c 	.word	0x2000000c

08001168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000010 	.word	0x20000010
 800118c:	20000408 	.word	0x20000408

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000408 	.word	0x20000408

080011a8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTickPrio+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000000c 	.word	0x2000000c

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffe2 	bl	8001190 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffd2 	bl	8001190 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000010 	.word	0x20000010

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff47 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb2 	bl	8001328 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e14c      	b.n	800167a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 813e 	beq.w	8001674 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0203 	and.w	r2, r3, #3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8098 	beq.w	8001674 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_GPIO_Init+0x2c8>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156e:	d019      	beq.n	80015a4 <HAL_GPIO_Init+0x1d4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4a      	ldr	r2, [pc, #296]	; (800169c <HAL_GPIO_Init+0x2cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1d0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a49      	ldr	r2, [pc, #292]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1cc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_GPIO_Init+0x2d4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1c8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <HAL_GPIO_Init+0x2d8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1c4>
 8001590:	2304      	movs	r3, #4
 8001592:	e008      	b.n	80015a6 <HAL_GPIO_Init+0x1d6>
 8001594:	2307      	movs	r3, #7
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x1d6>
 8001598:	2303      	movs	r3, #3
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x1d6>
 800159c:	2302      	movs	r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x1d6>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x1d6>
 80015a4:	2300      	movs	r3, #0
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b6:	4938      	ldr	r1, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x2c8>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e8:	4a30      	ldr	r2, [pc, #192]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001612:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 800161a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 8001648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_GPIO_Init+0x2dc>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f aeab 	bne.w	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40010000 	.word	0x40010000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000c00 	.word	0x48000c00
 80016a8:	48001000 	.word	0x48001000
 80016ac:	58000800 	.word	0x58000800

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43d9      	mvns	r1, r3
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	400b      	ands	r3, r1
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b08b      	sub	sp, #44	; 0x2c
 8001718:	af06      	add	r7, sp, #24
 800171a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0cb      	b.n	80018be <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fbae 	bl	8000e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fbef 	bl	8004f30 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e040      	b.n	80017da <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3301      	adds	r3, #1
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3303      	adds	r3, #3
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3338      	adds	r3, #56	; 0x38
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	333c      	adds	r3, #60	; 0x3c
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3340      	adds	r3, #64	; 0x40
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3b9      	bcc.n	8001758 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e044      	b.n	8001874 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	3301      	adds	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d3b5      	bcc.n	80017ea <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	687e      	ldr	r6, [r7, #4]
 8001886:	466d      	mov	r5, sp
 8001888:	f106 0410 	add.w	r4, r6, #16
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	602b      	str	r3, [r5, #0]
 8001894:	1d33      	adds	r3, r6, #4
 8001896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001898:	6838      	ldr	r0, [r7, #0]
 800189a:	f003 fb64 	bl	8004f66 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f805 	bl	80018c6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	58000400 	.word	0x58000400

0800193c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <HAL_PWREx_GetVoltageRange+0x18>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	58000400 	.word	0x58000400

08001958 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800196a:	d101      	bne.n	8001970 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_HSE_Enable>:
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_RCC_HSE_Disable>:
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_HSE_IsReady>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ca:	d101      	bne.n	80019d0 <LL_RCC_HSE_IsReady+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_RCC_HSE_IsReady+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_RCC_HSI_Enable>:
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_HSI_Disable>:
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_RCC_HSI_IsReady>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d101      	bne.n	8001a30 <LL_RCC_HSI_IsReady+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_RCC_HSI_IsReady+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_HSI48_Enable>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_HSI48_Disable>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_HSI48_IsReady>:
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d101      	bne.n	8001ac2 <LL_RCC_HSI48_IsReady+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_RCC_HSI48_IsReady+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_LSE_Enable>:
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_LSE_Disable>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_LSE_EnableBypass>:
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_RCC_LSE_DisableBypass>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d101      	bne.n	8001b6e <LL_RCC_LSE_IsReady+0x18>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <LL_RCC_LSE_IsReady+0x1a>
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d101      	bne.n	8001bd6 <LL_RCC_LSI1_IsReady+0x18>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_RCC_LSI1_IsReady+0x1a>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d101      	bne.n	8001c3e <LL_RCC_LSI2_IsReady+0x18>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_RCC_LSI2_IsReady+0x1a>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d101      	bne.n	8001cca <LL_RCC_MSI_IsReady+0x16>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_RCC_MSI_IsReady+0x18>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2bb0      	cmp	r3, #176	; 0xb0
 8001d14:	d901      	bls.n	8001d1a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d16:	23b0      	movs	r3, #176	; 0xb0
 8001d18:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 0203 	bic.w	r2, r3, #3
 8001d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001df6:	f023 020f 	bic.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6013      	str	r3, [r2, #0]
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f16:	d101      	bne.n	8001f1c <LL_RCC_PLL_IsReady+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_RCC_PLL_IsReady+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d101      	bne.n	8001fa2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fc2:	d101      	bne.n	8001fc8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d101      	bne.n	8001fee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800200c:	d101      	bne.n	8002012 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002030:	d101      	bne.n	8002036 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b08d      	sub	sp, #52	; 0x34
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e363      	b.n	800271e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 808d 	beq.w	800217e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002064:	f7ff fe89 	bl	8001d7a <LL_RCC_GetSysClkSource>
 8002068:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206a:	f7ff ff82 	bl	8001f72 <LL_RCC_PLL_GetMainSource>
 800206e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x3e>
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d147      	bne.n	800210c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	2b01      	cmp	r3, #1
 8002080:	d144      	bne.n	800210c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e347      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002092:	f7ff fe34 	bl	8001cfe <LL_RCC_MSI_GetRange>
 8002096:	4603      	mov	r3, r0
 8002098:	429c      	cmp	r4, r3
 800209a:	d914      	bls.n	80020c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd2f 	bl	8002b04 <RCC_SetFlashLatencyFromMSIRange>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e336      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fe0e 	bl	8001cd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fe32 	bl	8001d28 <LL_RCC_MSI_SetCalibTrimming>
 80020c4:	e013      	b.n	80020ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fe03 	bl	8001cd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe27 	bl	8001d28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fd10 	bl	8002b04 <RCC_SetFlashLatencyFromMSIRange>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e317      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020ee:	f000 fcc9 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4aa4      	ldr	r2, [pc, #656]	; (8002388 <HAL_RCC_OscConfig+0x344>)
 80020f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020f8:	4ba4      	ldr	r3, [pc, #656]	; (800238c <HAL_RCC_OscConfig+0x348>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fff9 	bl	80010f4 <HAL_InitTick>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d039      	beq.n	800217c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e308      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01e      	beq.n	8002152 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002114:	f7ff fdb0 	bl	8001c78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002118:	f7ff f83a 	bl	8001190 <HAL_GetTick>
 800211c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002120:	f7ff f836 	bl	8001190 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2f5      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002132:	f7ff fdbf 	bl	8001cb4 <LL_RCC_MSI_IsReady>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f1      	beq.n	8002120 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fdc8 	bl	8001cd6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fdec 	bl	8001d28 <LL_RCC_MSI_SetCalibTrimming>
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002152:	f7ff fda0 	bl	8001c96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002156:	f7ff f81b 	bl	8001190 <HAL_GetTick>
 800215a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215e:	f7ff f817 	bl	8001190 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e2d6      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002170:	f7ff fda0 	bl	8001cb4 <LL_RCC_MSI_IsReady>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f1      	bne.n	800215e <HAL_RCC_OscConfig+0x11a>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800217c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d047      	beq.n	800221a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218a:	f7ff fdf6 	bl	8001d7a <LL_RCC_GetSysClkSource>
 800218e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	f7ff feef 	bl	8001f72 <LL_RCC_PLL_GetMainSource>
 8002194:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_OscConfig+0x164>
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d134      	bne.n	800221a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e2b4      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x180>
 80021be:	f7ff fbdd 	bl	800197c <LL_RCC_HSE_Enable>
 80021c2:	e001      	b.n	80021c8 <HAL_RCC_OscConfig+0x184>
 80021c4:	f7ff fbe9 	bl	800199a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ffde 	bl	8001190 <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe ffda 	bl	8001190 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e299      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80021ea:	f7ff fbe5 	bl	80019b8 <LL_RCC_HSE_IsReady>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f1      	beq.n	80021d8 <HAL_RCC_OscConfig+0x194>
 80021f4:	e011      	b.n	800221a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe ffcb 	bl	8001190 <HAL_GetTick>
 80021fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fe:	f7fe ffc7 	bl	8001190 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	; 0x64
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e286      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002210:	f7ff fbd2 	bl	80019b8 <LL_RCC_HSE_IsReady>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f1      	bne.n	80021fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d04c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	f7ff fda8 	bl	8001d7a <LL_RCC_GetSysClkSource>
 800222a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222c:	f7ff fea1 	bl	8001f72 <LL_RCC_PLL_GetMainSource>
 8002230:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x200>
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d10e      	bne.n	800225c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e266      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fbf1 	bl	8001a3c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800225a:	e031      	b.n	80022c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d019      	beq.n	8002298 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	f7ff fbba 	bl	80019dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe ff92 	bl	8001190 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe ff8e 	bl	8001190 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e24d      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002282:	f7ff fbc9 	bl	8001a18 <LL_RCC_HSI_IsReady>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f1      	beq.n	8002270 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbd3 	bl	8001a3c <LL_RCC_HSI_SetCalibTrimming>
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002298:	f7ff fbaf 	bl	80019fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe ff78 	bl	8001190 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe ff74 	bl	8001190 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e233      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022b6:	f7ff fbaf 	bl	8001a18 <LL_RCC_HSI_IsReady>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f1      	bne.n	80022a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a3 	beq.w	8002420 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d076      	beq.n	80023d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d046      	beq.n	800237c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80022ee:	f7ff fc66 	bl	8001bbe <LL_RCC_LSI1_IsReady>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d113      	bne.n	8002320 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80022f8:	f7ff fc3f 	bl	8001b7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022fc:	f7fe ff48 	bl	8001190 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002304:	f7fe ff44 	bl	8001190 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e203      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002316:	f7ff fc52 	bl	8001bbe <LL_RCC_LSI1_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f1      	beq.n	8002304 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002320:	f7ff fc5f 	bl	8001be2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe ff34 	bl	8001190 <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800232c:	f7fe ff30 	bl	8001190 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1ef      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800233e:	f7ff fc72 	bl	8001c26 <LL_RCC_LSI2_IsReady>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f1      	beq.n	800232c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fc7c 	bl	8001c4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002352:	f7ff fc23 	bl	8001b9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe ff1b 	bl	8001190 <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800235e:	f7fe ff17 	bl	8001190 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1d6      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002370:	f7ff fc25 	bl	8001bbe <LL_RCC_LSI1_IsReady>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <HAL_RCC_OscConfig+0x31a>
 800237a:	e051      	b.n	8002420 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800237c:	f7ff fbfd 	bl	8001b7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe ff06 	bl	8001190 <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002386:	e00c      	b.n	80023a2 <HAL_RCC_OscConfig+0x35e>
 8002388:	20000008 	.word	0x20000008
 800238c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002390:	f7fe fefe 	bl	8001190 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1bd      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023a2:	f7ff fc0c 	bl	8001bbe <LL_RCC_LSI1_IsReady>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f1      	beq.n	8002390 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023ac:	f7ff fc2a 	bl	8001c04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023b2:	f7fe feed 	bl	8001190 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1ac      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023c4:	f7ff fc2f 	bl	8001c26 <LL_RCC_LSI2_IsReady>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f1      	bne.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 80023ce:	e027      	b.n	8002420 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80023d0:	f7ff fc18 	bl	8001c04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fedc 	bl	8001190 <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023dc:	f7fe fed8 	bl	8001190 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e197      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80023ee:	f7ff fc1a 	bl	8001c26 <LL_RCC_LSI2_IsReady>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f1      	bne.n	80023dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80023f8:	f7ff fbd0 	bl	8001b9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fec8 	bl	8001190 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002404:	f7fe fec4 	bl	8001190 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e183      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002416:	f7ff fbd2 	bl	8001bbe <LL_RCC_LSI1_IsReady>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f1      	bne.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05b      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242c:	4ba7      	ldr	r3, [pc, #668]	; (80026cc <HAL_RCC_OscConfig+0x688>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d114      	bne.n	8002462 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002438:	f7ff fa70 	bl	800191c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243c:	f7fe fea8 	bl	8001190 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7fe fea4 	bl	8001190 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e163      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002456:	4b9d      	ldr	r3, [pc, #628]	; (80026cc <HAL_RCC_OscConfig+0x688>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x42c>
 800246a:	f7ff fb30 	bl	8001ace <LL_RCC_LSE_Enable>
 800246e:	e00c      	b.n	800248a <HAL_RCC_OscConfig+0x446>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d104      	bne.n	8002482 <HAL_RCC_OscConfig+0x43e>
 8002478:	f7ff fb4b 	bl	8001b12 <LL_RCC_LSE_EnableBypass>
 800247c:	f7ff fb27 	bl	8001ace <LL_RCC_LSE_Enable>
 8002480:	e003      	b.n	800248a <HAL_RCC_OscConfig+0x446>
 8002482:	f7ff fb35 	bl	8001af0 <LL_RCC_LSE_Disable>
 8002486:	f7ff fb55 	bl	8001b34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d014      	beq.n	80024bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fe7d 	bl	8001190 <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fe79 	bl	8001190 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e136      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024b0:	f7ff fb51 	bl	8001b56 <LL_RCC_LSE_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ef      	beq.n	800249a <HAL_RCC_OscConfig+0x456>
 80024ba:	e013      	b.n	80024e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fe68 	bl	8001190 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7fe fe64 	bl	8001190 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e121      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80024da:	f7ff fb3c 	bl	8001b56 <LL_RCC_LSE_IsReady>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ef      	bne.n	80024c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02c      	beq.n	800254a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d014      	beq.n	8002522 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024f8:	f7ff fab5 	bl	8001a66 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe fe48 	bl	8001190 <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002504:	f7fe fe44 	bl	8001190 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e103      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002516:	f7ff fac8 	bl	8001aaa <LL_RCC_HSI48_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f1      	beq.n	8002504 <HAL_RCC_OscConfig+0x4c0>
 8002520:	e013      	b.n	800254a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002522:	f7ff fab1 	bl	8001a88 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fe33 	bl	8001190 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252e:	f7fe fe2f 	bl	8001190 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0ee      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002540:	f7ff fab3 	bl	8001aaa <LL_RCC_HSI48_IsReady>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f1      	bne.n	800252e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80e4 	beq.w	800271c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002554:	f7ff fc11 	bl	8001d7a <LL_RCC_GetSysClkSource>
 8002558:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 80b4 	bne.w	80026d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	429a      	cmp	r2, r3
 8002578:	d123      	bne.n	80025c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d11c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d114      	bne.n	80025c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d05d      	beq.n	800267e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d058      	beq.n	800267a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0a1      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025da:	f7ff fc84 	bl	8001ee6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025de:	f7fe fdd7 	bl	8001190 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fdd3 	bl	8001190 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e092      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ef      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <HAL_RCC_OscConfig+0x68c>)
 800260e:	4013      	ands	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800261e:	0212      	lsls	r2, r2, #8
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002632:	430a      	orrs	r2, r1
 8002634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800263c:	f7ff fc44 	bl	8001ec8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002650:	f7fe fd9e 	bl	8001190 <HAL_GetTick>
 8002654:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fd9a 	bl	8001190 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e059      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ef      	beq.n	8002658 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002678:	e050      	b.n	800271c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e04f      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d147      	bne.n	800271c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800268c:	f7ff fc1c 	bl	8001ec8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a0:	f7fe fd76 	bl	8001190 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fd72 	bl	8001190 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e031      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <HAL_RCC_OscConfig+0x664>
 80026c8:	e028      	b.n	800271c <HAL_RCC_OscConfig+0x6d8>
 80026ca:	bf00      	nop
 80026cc:	58000400 	.word	0x58000400
 80026d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d01e      	beq.n	8002718 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	f7ff fc04 	bl	8001ee6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fd57 	bl	8001190 <HAL_GetTick>
 80026e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fd53 	bl	8001190 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e012      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ef      	bne.n	80026e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_OscConfig+0x6e4>)
 8002712:	4013      	ands	r3, r2
 8002714:	60cb      	str	r3, [r1, #12]
 8002716:	e001      	b.n	800271c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3734      	adds	r7, #52	; 0x34
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	bf00      	nop
 8002728:	eefefffc 	.word	0xeefefffc

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e12d      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b98      	ldr	r3, [pc, #608]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d91b      	bls.n	8002786 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b95      	ldr	r3, [pc, #596]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4993      	ldr	r1, [pc, #588]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275e:	f7fe fd17 	bl	8001190 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002764:	e008      	b.n	8002778 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002766:	f7fe fd13 	bl	8001190 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e111      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002778:	4b8a      	ldr	r3, [pc, #552]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d1ef      	bne.n	8002766 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fafb 	bl	8001d92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800279c:	f7fe fcf8 	bl	8001190 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027a4:	f7fe fcf4 	bl	8001190 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0f2      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027b6:	f7ff fbe8 	bl	8001f8a <LL_RCC_IsActiveFlag_HPRE>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f1      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff faf2 	bl	8001dba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fcdb 	bl	8001190 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027de:	f7fe fcd7 	bl	8001190 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0d5      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80027f0:	f7ff fbdd 	bl	8001fae <LL_RCC_IsActiveFlag_C2HPRE>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f1      	beq.n	80027de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff faeb 	bl	8001de6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002810:	f7fe fcbe 	bl	8001190 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002818:	f7fe fcba 	bl	8001190 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0b8      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800282a:	f7ff fbd3 	bl	8001fd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f1      	beq.n	8002818 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d016      	beq.n	800286e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fae5 	bl	8001e14 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800284a:	f7fe fca1 	bl	8001190 <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002852:	f7fe fc9d 	bl	8001190 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e09b      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002864:	f7ff fbc9 	bl	8001ffa <LL_RCC_IsActiveFlag_PPRE1>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f1      	beq.n	8002852 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d017      	beq.n	80028aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fadb 	bl	8001e3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002886:	f7fe fc83 	bl	8001190 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800288e:	f7fe fc7f 	bl	8001190 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e07d      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028a0:	f7ff fbbd 	bl	800201e <LL_RCC_IsActiveFlag_PPRE2>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f1      	beq.n	800288e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d043      	beq.n	800293e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80028be:	f7ff f87b 	bl	80019b8 <LL_RCC_HSE_IsReady>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11e      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e067      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80028d4:	f7ff fb16 	bl	8001f04 <LL_RCC_PLL_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d113      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e05c      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80028ea:	f7ff f9e3 	bl	8001cb4 <LL_RCC_MSI_IsReady>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d108      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e051      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80028f8:	f7ff f88e 	bl	8001a18 <LL_RCC_HSI_IsReady>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e04a      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fa21 	bl	8001d52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002910:	f7fe fc3e 	bl	8001190 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fc3a 	bl	8001190 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e036      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	f7ff fa24 	bl	8001d7a <LL_RCC_GetSysClkSource>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	429a      	cmp	r2, r3
 800293c:	d1ec      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d21b      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 0207 	bic.w	r2, r3, #7
 8002954:	4913      	ldr	r1, [pc, #76]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295c:	f7fe fc18 	bl	8001190 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	e008      	b.n	8002976 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002964:	f7fe fc14 	bl	8001190 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e012      	b.n	800299c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x278>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d1ef      	bne.n	8002964 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002984:	f000 f87e 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002988:	4603      	mov	r3, r0
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_RCC_ClockConfig+0x27c>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800298e:	f7fe fc0b 	bl	80011a8 <HAL_GetTickPrio>
 8002992:	4603      	mov	r3, r0
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fbad 	bl	80010f4 <HAL_InitTick>
 800299a:	4603      	mov	r3, r0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58004000 	.word	0x58004000
 80029a8:	20000008 	.word	0x20000008

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	f7ff f9e2 	bl	8001d7a <LL_RCC_GetSysClkSource>
 80029b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029be:	f7ff f99e 	bl	8001cfe <LL_RCC_MSI_GetRange>
 80029c2:	4603      	mov	r3, r0
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e04b      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e045      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d10a      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029e6:	f7fe ffb7 	bl	8001958 <LL_RCC_HSE_IsEnabledDiv2>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e03a      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e037      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029fc:	f7ff fab9 	bl	8001f72 <LL_RCC_PLL_GetMainSource>
 8002a00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d003      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x64>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a0e:	e00d      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a12:	60bb      	str	r3, [r7, #8]
        break;
 8002a14:	e015      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a16:	f7fe ff9f 	bl	8001958 <LL_RCC_HSE_IsEnabledDiv2>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a22:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a24:	e00d      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a28:	60bb      	str	r3, [r7, #8]
        break;
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a2c:	f7ff f967 	bl	8001cfe <LL_RCC_MSI_GetRange>
 8002a30:	4603      	mov	r3, r0
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	60bb      	str	r3, [r7, #8]
        break;
 8002a40:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a42:	f7ff fa71 	bl	8001f28 <LL_RCC_PLL_GetN>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	fb03 f402 	mul.w	r4, r3, r2
 8002a4e:	f7ff fa84 	bl	8001f5a <LL_RCC_PLL_GetDivider>
 8002a52:	4603      	mov	r3, r0
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	3301      	adds	r3, #1
 8002a58:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a5c:	f7ff fa71 	bl	8001f42 <LL_RCC_PLL_GetR>
 8002a60:	4603      	mov	r3, r0
 8002a62:	0f5b      	lsrs	r3, r3, #29
 8002a64:	3301      	adds	r3, #1
 8002a66:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	080050a4 	.word	0x080050a4
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	01e84800 	.word	0x01e84800

08002a84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b598      	push	{r3, r4, r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a88:	f7ff ff90 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	f7ff f9e9 	bl	8001e64 <LL_RCC_GetAHBPrescaler>
 8002a92:	4603      	mov	r3, r0
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd98      	pop	{r3, r4, r7, pc}
 8002aa8:	08005044 	.word	0x08005044

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b598      	push	{r3, r4, r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ab0:	f7ff ffe8 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	f7ff f9ef 	bl	8001e98 <LL_RCC_GetAPB1Prescaler>
 8002aba:	4603      	mov	r3, r0
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd98      	pop	{r3, r4, r7, pc}
 8002ad4:	08005084 	.word	0x08005084

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b598      	push	{r3, r4, r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002adc:	f7ff ffd2 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	f7ff f9e5 	bl	8001eb0 <LL_RCC_GetAPB2Prescaler>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	0adb      	lsrs	r3, r3, #11
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd98      	pop	{r3, r4, r7, pc}
 8002b00:	08005084 	.word	0x08005084

08002b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2bb0      	cmp	r3, #176	; 0xb0
 8002b10:	d903      	bls.n	8002b1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e007      	b.n	8002b2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b2a:	f7ff f9a7 	bl	8001e7c <LL_RCC_GetAHB4Prescaler>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	0c9c      	lsrs	r4, r3, #18
 8002b4e:	f7fe fef5 	bl	800193c <HAL_PWREx_GetVoltageRange>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4619      	mov	r1, r3
 8002b56:	4620      	mov	r0, r4
 8002b58:	f000 f80c 	bl	8002b74 <RCC_SetFlashLatency>
 8002b5c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd90      	pop	{r4, r7, pc}
 8002b66:	bf00      	nop
 8002b68:	080050a4 	.word	0x080050a4
 8002b6c:	08005044 	.word	0x08005044
 8002b70:	431bde83 	.word	0x431bde83

08002b74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b093      	sub	sp, #76	; 0x4c
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <RCC_SetFlashLatency+0xe8>)
 8002b80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b8a:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <RCC_SetFlashLatency+0xec>)
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <RCC_SetFlashLatency+0xf0>)
 8002b98:	f107 040c 	add.w	r4, r7, #12
 8002b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bac:	d11a      	bne.n	8002be4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb2:	e013      	b.n	8002bdc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	3348      	adds	r3, #72	; 0x48
 8002bba:	443b      	add	r3, r7
 8002bbc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d807      	bhi.n	8002bd6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	443b      	add	r3, r7
 8002bce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bd4:	e020      	b.n	8002c18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd8:	3301      	adds	r3, #1
 8002bda:	643b      	str	r3, [r7, #64]	; 0x40
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d9e8      	bls.n	8002bb4 <RCC_SetFlashLatency+0x40>
 8002be2:	e019      	b.n	8002c18 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be8:	e013      	b.n	8002c12 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	3348      	adds	r3, #72	; 0x48
 8002bf0:	443b      	add	r3, r7
 8002bf2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d807      	bhi.n	8002c0c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	3348      	adds	r3, #72	; 0x48
 8002c02:	443b      	add	r3, r7
 8002c04:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c0a:	e005      	b.n	8002c18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0e:	3301      	adds	r3, #1
 8002c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d9e8      	bls.n	8002bea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <RCC_SetFlashLatency+0xf4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 0207 	bic.w	r2, r3, #7
 8002c20:	4911      	ldr	r1, [pc, #68]	; (8002c68 <RCC_SetFlashLatency+0xf4>)
 8002c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c28:	f7fe fab2 	bl	8001190 <HAL_GetTick>
 8002c2c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c2e:	e008      	b.n	8002c42 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c30:	f7fe faae 	bl	8001190 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e007      	b.n	8002c52 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <RCC_SetFlashLatency+0xf4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1ef      	bne.n	8002c30 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	374c      	adds	r7, #76	; 0x4c
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08005018 	.word	0x08005018
 8002c60:	08005028 	.word	0x08005028
 8002c64:	08005034 	.word	0x08005034
 8002c68:	58004000 	.word	0x58004000

08002c6c <LL_RCC_LSE_IsEnabled>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <LL_RCC_LSE_IsEnabled+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_LSE_IsReady>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d101      	bne.n	8002ca8 <LL_RCC_LSE_IsReady+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_RCC_LSE_IsReady+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_RCC_MSI_EnablePLLMode>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_SetRFWKPClockSource>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_SetSMPSClockSource>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_SetSMPSPrescaler>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_SetUSARTClockSource>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_SetLPUARTClockSource>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_SetI2CClockSource>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_SetLPTIMClockSource>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0c1b      	lsrs	r3, r3, #16
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_SetSAIClockSource>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_SetRNGClockSource>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_SetCLK48ClockSource>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_SetUSBClockSource>:
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffe3 	bl	8002e6c <LL_RCC_SetCLK48ClockSource>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <LL_RCC_SetADCClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_SetRTCClockSource>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_GetRTCClockSource>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_ForceBackupDomainReset>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_PLLSAI1_Enable>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_PLLSAI1_Disable>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f94:	6013      	str	r3, [r2, #0]
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_PLLSAI1_IsReady>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb2:	d101      	bne.n	8002fb8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d034      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe8:	d021      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fee:	d81b      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff4:	d01d      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffa:	d815      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003004:	d110      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003016:	e00d      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f94d 	bl	80032bc <RCCEx_PLLSAI1_ConfigNP>
 8003022:	4603      	mov	r3, r0
 8003024:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003026:	e005      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
        break;
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003034:	7ffb      	ldrb	r3, [r7, #31]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fee8 	bl	8002e14 <LL_RCC_SetSAIClockSource>
 8003044:	e001      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003046:	7ffb      	ldrb	r3, [r7, #31]
 8003048:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003052:	2b00      	cmp	r3, #0
 8003054:	d046      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003056:	f7ff ff56 	bl	8002f06 <LL_RCC_GetRTCClockSource>
 800305a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	429a      	cmp	r2, r3
 8003064:	d03c      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003066:	f7fe fc59 	bl	800191c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff30 	bl	8002eda <LL_RCC_SetRTCClockSource>
 800307a:	e02e      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003086:	f7ff ff4b 	bl	8002f20 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800308a:	f7ff ff5a 	bl	8002f42 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800309c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80030a6:	f7ff fde1 	bl	8002c6c <LL_RCC_LSE_IsEnabled>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d114      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b0:	f7fe f86e 	bl	8001190 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80030b6:	e00b      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe f86a 	bl	8001190 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d902      	bls.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	77fb      	strb	r3, [r7, #31]
              break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80030d0:	f7ff fdde 	bl	8002c90 <LL_RCC_LSE_IsReady>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	77bb      	strb	r3, [r7, #30]
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7ffb      	ldrb	r3, [r7, #31]
 80030e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe2a 	bl	8002d4e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe35 	bl	8002d7a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe5d 	bl	8002de0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fe52 	bl	8002de0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe2a 	bl	8002da6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fe1f 	bl	8002da6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d022      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fe8d 	bl	8002e98 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003186:	d107      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003196:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a0:	d10b      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f8e3 	bl	8003372 <RCCEx_PLLSAI1_ConfigNQ>
 80031ac:	4603      	mov	r3, r0
 80031ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02b      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d8:	d003      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fe2a 	bl	8002e40 <LL_RCC_SetRNGClockSource>
 80031ec:	e00a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff fe21 	bl	8002e40 <LL_RCC_SetRNGClockSource>
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fe34 	bl	8002e6c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800320c:	d107      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	2b00      	cmp	r3, #0
 8003228:	d022      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe3d 	bl	8002eae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800323c:	d107      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003256:	d10b      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f8e3 	bl	8003428 <RCCEx_PLLSAI1_ConfigNR>
 8003262:	4603      	mov	r3, r0
 8003264:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003266:	7ffb      	ldrb	r3, [r7, #31]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800326c:	7ffb      	ldrb	r3, [r7, #31]
 800326e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fd26 	bl	8002cd2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fd45 	bl	8002d26 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fd2c 	bl	8002cfe <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80032a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80032b4:	f7ff fcfe 	bl	8002cb4 <LL_RCC_MSI_EnablePLLMode>
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032c8:	f7ff fe5b 	bl	8002f82 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032cc:	f7fd ff60 	bl	8001190 <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032d2:	e009      	b.n	80032e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d4:	f7fd ff5c 	bl	8001190 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	73fb      	strb	r3, [r7, #15]
      break;
 80032e6:	e004      	b.n	80032f2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032e8:	f7ff fe5a 	bl	8002fa0 <LL_RCC_PLLSAI1_IsReady>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d137      	bne.n	8003368 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330c:	4313      	orrs	r3, r2
 800330e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003322:	4313      	orrs	r3, r2
 8003324:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003326:	f7ff fe1d 	bl	8002f64 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332a:	f7fd ff31 	bl	8001190 <HAL_GetTick>
 800332e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003330:	e009      	b.n	8003346 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003332:	f7fd ff2d 	bl	8001190 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d902      	bls.n	8003346 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	73fb      	strb	r3, [r7, #15]
        break;
 8003344:	e004      	b.n	8003350 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003346:	f7ff fe2b 	bl	8002fa0 <LL_RCC_PLLSAI1_IsReady>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d1f0      	bne.n	8003332 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003364:	4313      	orrs	r3, r2
 8003366:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800337e:	f7ff fe00 	bl	8002f82 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003382:	f7fd ff05 	bl	8001190 <HAL_GetTick>
 8003386:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003388:	e009      	b.n	800339e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338a:	f7fd ff01 	bl	8001190 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d902      	bls.n	800339e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e004      	b.n	80033a8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800339e:	f7ff fdff 	bl	8002fa0 <LL_RCC_PLLSAI1_IsReady>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d137      	bne.n	800341e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033dc:	f7ff fdc2 	bl	8002f64 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e0:	f7fd fed6 	bl	8001190 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033e6:	e009      	b.n	80033fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e8:	f7fd fed2 	bl	8001190 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d902      	bls.n	80033fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	73fb      	strb	r3, [r7, #15]
        break;
 80033fa:	e004      	b.n	8003406 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033fc:	f7ff fdd0 	bl	8002fa0 <LL_RCC_PLLSAI1_IsReady>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d1f0      	bne.n	80033e8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d108      	bne.n	800341e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341a:	4313      	orrs	r3, r2
 800341c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003434:	f7ff fda5 	bl	8002f82 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003438:	f7fd feaa 	bl	8001190 <HAL_GetTick>
 800343c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800343e:	e009      	b.n	8003454 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003440:	f7fd fea6 	bl	8001190 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d902      	bls.n	8003454 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	73fb      	strb	r3, [r7, #15]
      break;
 8003452:	e004      	b.n	800345e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003454:	f7ff fda4 	bl	8002fa0 <LL_RCC_PLLSAI1_IsReady>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d137      	bne.n	80034d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003492:	f7ff fd67 	bl	8002f64 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003496:	f7fd fe7b 	bl	8001190 <HAL_GetTick>
 800349a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800349c:	e009      	b.n	80034b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349e:	f7fd fe77 	bl	8001190 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d902      	bls.n	80034b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	73fb      	strb	r3, [r7, #15]
        break;
 80034b0:	e004      	b.n	80034bc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034b2:	f7ff fd75 	bl	8002fa0 <LL_RCC_PLLSAI1_IsReady>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d1f0      	bne.n	800349e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d0:	4313      	orrs	r3, r2
 80034d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e049      	b.n	8003584 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fc4a 	bl	8000d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f000 fb4f 	bl	8003bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e049      	b.n	8003632 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f841 	bl	800363a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 faf8 	bl	8003bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_TIM_PWM_Start+0x24>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e03c      	b.n	80036ee <HAL_TIM_PWM_Start+0x9e>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d109      	bne.n	800368e <HAL_TIM_PWM_Start+0x3e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e02f      	b.n	80036ee <HAL_TIM_PWM_Start+0x9e>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d109      	bne.n	80036a8 <HAL_TIM_PWM_Start+0x58>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e022      	b.n	80036ee <HAL_TIM_PWM_Start+0x9e>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d109      	bne.n	80036c2 <HAL_TIM_PWM_Start+0x72>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e015      	b.n	80036ee <HAL_TIM_PWM_Start+0x9e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d109      	bne.n	80036dc <HAL_TIM_PWM_Start+0x8c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e008      	b.n	80036ee <HAL_TIM_PWM_Start+0x9e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e079      	b.n	80037ea <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0xb6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003704:	e023      	b.n	800374e <HAL_TIM_PWM_Start+0xfe>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xc6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003714:	e01b      	b.n	800374e <HAL_TIM_PWM_Start+0xfe>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0xd6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003724:	e013      	b.n	800374e <HAL_TIM_PWM_Start+0xfe>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0xe6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003734:	e00b      	b.n	800374e <HAL_TIM_PWM_Start+0xfe>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b10      	cmp	r3, #16
 800373a:	d104      	bne.n	8003746 <HAL_TIM_PWM_Start+0xf6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003744:	e003      	b.n	800374e <HAL_TIM_PWM_Start+0xfe>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fdb0 	bl	80042bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_TIM_PWM_Start+0x1a4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_TIM_PWM_Start+0x12a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <HAL_TIM_PWM_Start+0x1a8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_TIM_PWM_Start+0x12a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_TIM_PWM_Start+0x1ac>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_TIM_PWM_Start+0x12e>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_TIM_PWM_Start+0x130>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <HAL_TIM_PWM_Start+0x1a4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_TIM_PWM_Start+0x158>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d115      	bne.n	80037d4 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_TIM_PWM_Start+0x1b0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d015      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x196>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d011      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0201 	orr.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d2:	e008      	b.n	80037e6 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800
 8003800:	00010007 	.word	0x00010007

08003804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0ff      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b14      	cmp	r3, #20
 800382e:	f200 80f0 	bhi.w	8003a12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800388d 	.word	0x0800388d
 800383c:	08003a13 	.word	0x08003a13
 8003840:	08003a13 	.word	0x08003a13
 8003844:	08003a13 	.word	0x08003a13
 8003848:	080038cd 	.word	0x080038cd
 800384c:	08003a13 	.word	0x08003a13
 8003850:	08003a13 	.word	0x08003a13
 8003854:	08003a13 	.word	0x08003a13
 8003858:	0800390f 	.word	0x0800390f
 800385c:	08003a13 	.word	0x08003a13
 8003860:	08003a13 	.word	0x08003a13
 8003864:	08003a13 	.word	0x08003a13
 8003868:	0800394f 	.word	0x0800394f
 800386c:	08003a13 	.word	0x08003a13
 8003870:	08003a13 	.word	0x08003a13
 8003874:	08003a13 	.word	0x08003a13
 8003878:	08003991 	.word	0x08003991
 800387c:	08003a13 	.word	0x08003a13
 8003880:	08003a13 	.word	0x08003a13
 8003884:	08003a13 	.word	0x08003a13
 8003888:	080039d1 	.word	0x080039d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f9f8 	bl	8003c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0204 	bic.w	r2, r2, #4
 80038b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6999      	ldr	r1, [r3, #24]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	619a      	str	r2, [r3, #24]
      break;
 80038ca:	e0a5      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fa54 	bl	8003d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6999      	ldr	r1, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	021a      	lsls	r2, r3, #8
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	619a      	str	r2, [r3, #24]
      break;
 800390c:	e084      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 faad 	bl	8003e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0208 	orr.w	r2, r2, #8
 8003928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0204 	bic.w	r2, r2, #4
 8003938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69d9      	ldr	r1, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	61da      	str	r2, [r3, #28]
      break;
 800394c:	e064      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fb05 	bl	8003f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69d9      	ldr	r1, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	021a      	lsls	r2, r3, #8
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	61da      	str	r2, [r3, #28]
      break;
 800398e:	e043      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fb42 	bl	8004020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0208 	orr.w	r2, r2, #8
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ce:	e023      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fb7a 	bl	80040d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	021a      	lsls	r2, r3, #8
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a10:	e002      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
      break;
 8003a16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_ConfigClockSource+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0b6      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x18a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d03e      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xd8>
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	f200 8087 	bhi.w	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	f000 8086 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x176>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d87f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d01a      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xaa>
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d87b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d050      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x11e>
 8003aa8:	2b60      	cmp	r3, #96	; 0x60
 8003aaa:	d877      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d03c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xfe>
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d873      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d058      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x13e>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d86f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d064      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d86b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d060      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d867      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d05a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ad4:	e062      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f000 fbc9 	bl	800427c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	609a      	str	r2, [r3, #8]
      break;
 8003b02:	e04f      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f000 fbb2 	bl	800427c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e03c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 fb24 	bl	8004184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fb7d 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e02c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 fb43 	bl	80041e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2160      	movs	r1, #96	; 0x60
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb6d 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 fb04 	bl	8004184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fb5d 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e00c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 fb54 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <TIM_Base_SetConfig+0xbc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x20>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <TIM_Base_SetConfig+0xbc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_Base_SetConfig+0x52>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d007      	beq.n	8003c12 <TIM_Base_SetConfig+0x52>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <TIM_Base_SetConfig+0xc0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_Base_SetConfig+0x52>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <TIM_Base_SetConfig+0xc4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <TIM_Base_SetConfig+0xbc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0xa0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <TIM_Base_SetConfig+0xc0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0xa0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <TIM_Base_SetConfig+0xc4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d103      	bne.n	8003c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	615a      	str	r2, [r3, #20]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800

08003c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0302 	bic.w	r3, r3, #2
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <TIM_OC1_SetConfig+0xec>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_OC1_SetConfig+0x70>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <TIM_OC1_SetConfig+0xf0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC1_SetConfig+0x70>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a22      	ldr	r2, [pc, #136]	; (8003d7c <TIM_OC1_SetConfig+0xf4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10c      	bne.n	8003d12 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0308 	bic.w	r3, r3, #8
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <TIM_OC1_SetConfig+0xec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <TIM_OC1_SetConfig+0xa2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <TIM_OC1_SetConfig+0xf4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_OC1_SetConfig+0xa2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <TIM_OC1_SetConfig+0xf0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d111      	bne.n	8003d4e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40014800 	.word	0x40014800
 8003d7c:	40014400 	.word	0x40014400

08003d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0210 	bic.w	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0320 	bic.w	r3, r3, #32
 8003dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <TIM_OC2_SetConfig+0xe8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10d      	bne.n	8003e00 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <TIM_OC2_SetConfig+0xe8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_OC2_SetConfig+0x98>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <TIM_OC2_SetConfig+0xec>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC2_SetConfig+0x98>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <TIM_OC2_SetConfig+0xf0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d113      	bne.n	8003e40 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800

08003e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <TIM_OC3_SetConfig+0xe4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10d      	bne.n	8003ef2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <TIM_OC3_SetConfig+0xe4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_OC3_SetConfig+0x96>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <TIM_OC3_SetConfig+0xe8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_OC3_SetConfig+0x96>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <TIM_OC3_SetConfig+0xec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d113      	bne.n	8003f32 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a14      	ldr	r2, [pc, #80]	; (8004014 <TIM_OC4_SetConfig+0xb0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_OC4_SetConfig+0x74>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <TIM_OC4_SetConfig+0xb4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC4_SetConfig+0x74>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a12      	ldr	r2, [pc, #72]	; (800401c <TIM_OC4_SetConfig+0xb8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d109      	bne.n	8003fec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004064:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <TIM_OC5_SetConfig+0xa4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_OC5_SetConfig+0x6a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <TIM_OC5_SetConfig+0xa8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_OC5_SetConfig+0x6a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a11      	ldr	r2, [pc, #68]	; (80040cc <TIM_OC5_SetConfig+0xac>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d109      	bne.n	800409e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800

080040d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	051b      	lsls	r3, r3, #20
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <TIM_OC6_SetConfig+0xa8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d007      	beq.n	800413c <TIM_OC6_SetConfig+0x6c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <TIM_OC6_SetConfig+0xac>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_OC6_SetConfig+0x6c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <TIM_OC6_SetConfig+0xb0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004142:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	029b      	lsls	r3, r3, #10
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 030a 	bic.w	r3, r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f023 0210 	bic.w	r2, r3, #16
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800420c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	f043 0307 	orr.w	r3, r3, #7
 8004268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	021a      	lsls	r2, r3, #8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	431a      	orrs	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	2201      	movs	r2, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	43db      	mvns	r3, r3
 80042de:	401a      	ands	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e04a      	b.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1f      	ldr	r2, [pc, #124]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004350:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d10c      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40012c00 	.word	0x40012c00

080043c8 <LL_RCC_GetUSARTClockSource>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4013      	ands	r3, r2
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_RCC_GetLPUARTClockSource>:
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4013      	ands	r3, r2
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e042      	b.n	80044a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc fcef 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2224      	movs	r2, #36	; 0x24
 8004436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f82c 	bl	80044a8 <UART_SetConfig>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e022      	b.n	80044a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa48 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 facf 	bl	8004a3c <UART_CheckIdleState>
 800449e:	4603      	mov	r3, r0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ac:	b08c      	sub	sp, #48	; 0x30
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4baf      	ldr	r3, [pc, #700]	; (8004794 <UART_SetConfig+0x2ec>)
 80044d8:	4013      	ands	r3, r2
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4aa4      	ldr	r2, [pc, #656]	; (8004798 <UART_SetConfig+0x2f0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004510:	4313      	orrs	r3, r2
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800451e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004528:	430b      	orrs	r3, r1
 800452a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f023 010f 	bic.w	r1, r3, #15
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a95      	ldr	r2, [pc, #596]	; (800479c <UART_SetConfig+0x2f4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d125      	bne.n	8004598 <UART_SetConfig+0xf0>
 800454c:	2003      	movs	r0, #3
 800454e:	f7ff ff3b 	bl	80043c8 <LL_RCC_GetUSARTClockSource>
 8004552:	4603      	mov	r3, r0
 8004554:	2b03      	cmp	r3, #3
 8004556:	d81b      	bhi.n	8004590 <UART_SetConfig+0xe8>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0xb8>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	08004581 	.word	0x08004581
 8004568:	08004579 	.word	0x08004579
 800456c:	08004589 	.word	0x08004589
 8004570:	2301      	movs	r3, #1
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004576:	e042      	b.n	80045fe <UART_SetConfig+0x156>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457e:	e03e      	b.n	80045fe <UART_SetConfig+0x156>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004586:	e03a      	b.n	80045fe <UART_SetConfig+0x156>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458e:	e036      	b.n	80045fe <UART_SetConfig+0x156>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004596:	e032      	b.n	80045fe <UART_SetConfig+0x156>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7e      	ldr	r2, [pc, #504]	; (8004798 <UART_SetConfig+0x2f0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d12a      	bne.n	80045f8 <UART_SetConfig+0x150>
 80045a2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80045a6:	f7ff ff1f 	bl	80043e8 <LL_RCC_GetLPUARTClockSource>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045b0:	d01a      	beq.n	80045e8 <UART_SetConfig+0x140>
 80045b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0x148>
 80045b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045bc:	d00c      	beq.n	80045d8 <UART_SetConfig+0x130>
 80045be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c2:	d815      	bhi.n	80045f0 <UART_SetConfig+0x148>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <UART_SetConfig+0x128>
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045cc:	d008      	beq.n	80045e0 <UART_SetConfig+0x138>
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x148>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d6:	e012      	b.n	80045fe <UART_SetConfig+0x156>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045de:	e00e      	b.n	80045fe <UART_SetConfig+0x156>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e6:	e00a      	b.n	80045fe <UART_SetConfig+0x156>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ee:	e006      	b.n	80045fe <UART_SetConfig+0x156>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f6:	e002      	b.n	80045fe <UART_SetConfig+0x156>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a65      	ldr	r2, [pc, #404]	; (8004798 <UART_SetConfig+0x2f0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	f040 8097 	bne.w	8004738 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800460a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800460e:	2b08      	cmp	r3, #8
 8004610:	d823      	bhi.n	800465a <UART_SetConfig+0x1b2>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x170>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800463d 	.word	0x0800463d
 800461c:	0800465b 	.word	0x0800465b
 8004620:	08004645 	.word	0x08004645
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800464b 	.word	0x0800464b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800465b 	.word	0x0800465b
 8004638:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe fa36 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004640:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b56      	ldr	r3, [pc, #344]	; (80047a0 <UART_SetConfig+0x2f8>)
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe f9af 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 812b 	beq.w	80048c4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	4a4c      	ldr	r2, [pc, #304]	; (80047a4 <UART_SetConfig+0x2fc>)
 8004674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004678:	461a      	mov	r2, r3
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004680:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d305      	bcc.n	800469e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	429a      	cmp	r2, r3
 800469c:	d903      	bls.n	80046a6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046a4:	e10e      	b.n	80048c4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	2200      	movs	r2, #0
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	60fa      	str	r2, [r7, #12]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <UART_SetConfig+0x2fc>)
 80046b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2200      	movs	r2, #0
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c8:	f7fb fd58 	bl	800017c <__aeabi_uldivmod>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	020b      	lsls	r3, r1, #8
 80046de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046e2:	0202      	lsls	r2, r0, #8
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	6849      	ldr	r1, [r1, #4]
 80046e8:	0849      	lsrs	r1, r1, #1
 80046ea:	2000      	movs	r0, #0
 80046ec:	460c      	mov	r4, r1
 80046ee:	4605      	mov	r5, r0
 80046f0:	eb12 0804 	adds.w	r8, r2, r4
 80046f4:	eb43 0905 	adc.w	r9, r3, r5
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	469a      	mov	sl, r3
 8004700:	4693      	mov	fp, r2
 8004702:	4652      	mov	r2, sl
 8004704:	465b      	mov	r3, fp
 8004706:	4640      	mov	r0, r8
 8004708:	4649      	mov	r1, r9
 800470a:	f7fb fd37 	bl	800017c <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4613      	mov	r3, r2
 8004714:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d308      	bcc.n	8004730 <UART_SetConfig+0x288>
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004724:	d204      	bcs.n	8004730 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e0c9      	b.n	80048c4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004736:	e0c5      	b.n	80048c4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d16d      	bne.n	800481e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004746:	3b01      	subs	r3, #1
 8004748:	2b07      	cmp	r3, #7
 800474a:	d82d      	bhi.n	80047a8 <UART_SetConfig+0x300>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0x2ac>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004775 	.word	0x08004775
 8004758:	0800477d 	.word	0x0800477d
 800475c:	080047a9 	.word	0x080047a9
 8004760:	08004783 	.word	0x08004783
 8004764:	080047a9 	.word	0x080047a9
 8004768:	080047a9 	.word	0x080047a9
 800476c:	080047a9 	.word	0x080047a9
 8004770:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe f9b0 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800477a:	e01b      	b.n	80047b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <UART_SetConfig+0x2f8>)
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004780:	e018      	b.n	80047b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe f913 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004788:	e014      	b.n	80047b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004790:	e010      	b.n	80047b4 <UART_SetConfig+0x30c>
 8004792:	bf00      	nop
 8004794:	cfff69f3 	.word	0xcfff69f3
 8004798:	40008000 	.word	0x40008000
 800479c:	40013800 	.word	0x40013800
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	080050e4 	.word	0x080050e4
      default:
        pclk = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8084 	beq.w	80048c4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	4a4b      	ldr	r2, [pc, #300]	; (80048f0 <UART_SetConfig+0x448>)
 80047c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ce:	005a      	lsls	r2, r3, #1
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	441a      	add	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b0f      	cmp	r3, #15
 80047e6:	d916      	bls.n	8004816 <UART_SetConfig+0x36e>
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d212      	bcs.n	8004816 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f023 030f 	bic.w	r3, r3, #15
 80047f8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	b29a      	uxth	r2, r3
 8004806:	8bfb      	ldrh	r3, [r7, #30]
 8004808:	4313      	orrs	r3, r2
 800480a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	8bfa      	ldrh	r2, [r7, #30]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e056      	b.n	80048c4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800481c:	e052      	b.n	80048c4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800481e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004822:	3b01      	subs	r3, #1
 8004824:	2b07      	cmp	r3, #7
 8004826:	d822      	bhi.n	800486e <UART_SetConfig+0x3c6>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0x388>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004851 	.word	0x08004851
 8004834:	08004859 	.word	0x08004859
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800485f 	.word	0x0800485f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800486f 	.word	0x0800486f
 800484c:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe f942 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004856:	e010      	b.n	800487a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <UART_SetConfig+0x44c>)
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe f8a5 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004864:	e009      	b.n	800487a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800486c:	e005      	b.n	800487a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004878:	bf00      	nop
    }

    if (pclk != 0U)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d021      	beq.n	80048c4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <UART_SetConfig+0x448>)
 8004886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800488a:	461a      	mov	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	441a      	add	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	2b0f      	cmp	r3, #15
 80048a8:	d909      	bls.n	80048be <UART_SetConfig+0x416>
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d205      	bcs.n	80048be <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	e002      	b.n	80048c4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2200      	movs	r2, #0
 80048d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2200      	movs	r2, #0
 80048de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3730      	adds	r7, #48	; 0x30
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	080050e4 	.word	0x080050e4
 80048f4:	00f42400 	.word	0x00f42400

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b098      	sub	sp, #96	; 0x60
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fba0 	bl	8001190 <HAL_GetTick>
 8004a50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d12f      	bne.n	8004ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f88e 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d022      	beq.n	8004ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a98:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e063      	b.n	8004b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d149      	bne.n	8004b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ace:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f857 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d03c      	beq.n	8004b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	623b      	str	r3, [r7, #32]
   return(result);
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30
 8004b08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	617b      	str	r3, [r7, #20]
   return(result);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e012      	b.n	8004b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3758      	adds	r7, #88	; 0x58
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	e049      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d045      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fc faf1 	bl	8001190 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e048      	b.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d031      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d110      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2208      	movs	r2, #8
 8004be6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f838 	bl	8004c5e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e029      	b.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c10:	d111      	bne.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f81e 	bl	8004c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e00f      	b.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d0a6      	beq.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b095      	sub	sp, #84	; 0x54
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	643b      	str	r3, [r7, #64]	; 0x40
 8004c86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e6      	bne.n	8004c66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e3      	bne.n	8004c98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d118      	bne.n	8004d0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f023 0310 	bic.w	r3, r3, #16
 8004cec:	647b      	str	r3, [r7, #68]	; 0x44
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6979      	ldr	r1, [r7, #20]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	613b      	str	r3, [r7, #16]
   return(result);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e6      	bne.n	8004cd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d1e:	bf00      	nop
 8004d20:	3754      	adds	r7, #84	; 0x54
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e027      	b.n	8004d90 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e02d      	b.n	8004e10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f84f 	bl	8004e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e02d      	b.n	8004e8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	; 0x24
 8004e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f811 	bl	8004e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004eb4:	e031      	b.n	8004f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eba:	2308      	movs	r3, #8
 8004ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	0e5b      	lsrs	r3, r3, #25
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	0f5b      	lsrs	r3, r3, #29
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	7b3a      	ldrb	r2, [r7, #12]
 8004ee2:	4911      	ldr	r1, [pc, #68]	; (8004f28 <UARTEx_SetNbDataToProcess+0x94>)
 8004ee4:	5c8a      	ldrb	r2, [r1, r2]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eea:	7b3a      	ldrb	r2, [r7, #12]
 8004eec:	490f      	ldr	r1, [pc, #60]	; (8004f2c <UARTEx_SetNbDataToProcess+0x98>)
 8004eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	7b7a      	ldrb	r2, [r7, #13]
 8004f00:	4909      	ldr	r1, [pc, #36]	; (8004f28 <UARTEx_SetNbDataToProcess+0x94>)
 8004f02:	5c8a      	ldrb	r2, [r1, r2]
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f08:	7b7a      	ldrb	r2, [r7, #13]
 8004f0a:	4908      	ldr	r1, [pc, #32]	; (8004f2c <UARTEx_SetNbDataToProcess+0x98>)
 8004f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	080050fc 	.word	0x080050fc
 8004f2c:	08005104 	.word	0x08005104

08004f30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f38:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004f3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4013      	ands	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f66:	b084      	sub	sp, #16
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	f107 0014 	add.w	r0, r7, #20
 8004f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	b004      	add	sp, #16
 8004fa6:	4770      	bx	lr

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4d0d      	ldr	r5, [pc, #52]	; (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1b64      	subs	r4, r4, r5
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4d0b      	ldr	r5, [pc, #44]	; (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	; (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 f820 	bl	8005000 <_init>
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	08005114 	.word	0x08005114
 8004fe4:	08005114 	.word	0x08005114
 8004fe8:	08005114 	.word	0x08005114
 8004fec:	08005118 	.word	0x08005118

08004ff0 <memset>:
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <_init>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

0800500c <_fini>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr
